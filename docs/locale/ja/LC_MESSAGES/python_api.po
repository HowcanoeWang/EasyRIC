# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Haozhou Wang
# This file is distributed under the same license as the EasyIDP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyIDP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-25 10:41+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../python_api/autodoc/easyidp.geotiff.geo2pixel.rst:2
msgid "easyidp.geotiff.geo2pixel"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1 easyidp.geotiff.geo2pixel:1
#: of
msgid ""
"convert point cloud xyz coordinate to geotiff pixel coordinate "
"(horizontal, vertical)"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop easyidp.geotiff.GeoTiff.crop_polygon
#: easyidp.geotiff.GeoTiff.crop_rectangle easyidp.geotiff.GeoTiff.math_polygon
#: easyidp.geotiff.GeoTiff.point_query easyidp.geotiff.GeoTiff.read_geotiff
#: easyidp.geotiff.GeoTiff.save_geotiff easyidp.geotiff.geo2pixel
#: easyidp.geotiff.get_header easyidp.geotiff.get_imarray
#: easyidp.geotiff.pixel2geo easyidp.geotiff.tifffile_crop
#: easyidp.jsonfile.dict2json easyidp.jsonfile.read_json
#: easyidp.jsonfile.save_json easyidp.jsonfile.write_json
#: easyidp.pointcloud.PointCloud.crop_point_cloud easyidp.pointcloud.read_las
#: easyidp.pointcloud.write_ply easyidp.roi.ROI.get_z_from_dsm
#: easyidp.roi.ROI.open easyidp.roi.ROI.read_shp easyidp.roi.read_cc_txt
#: easyidp.shp.convert_proj easyidp.shp.read_proj easyidp.shp.read_shp
#: easyidp.shp.show_shp_fields of
msgid "参数"
msgstr ""

#: easyidp.geotiff.geo2pixel:3 easyidp.geotiff.pixel2geo:3 of
msgid "[horizontal, vertical] points"
msgstr ""

#: easyidp.geotiff.geo2pixel:5 easyidp.geotiff.pixel2geo:5 of
msgid "the geotiff head dictionary from get_header()"
msgstr ""

#: easyidp.geotiff.geo2pixel:7 of
msgid ""
"if false: will get float coordinates -> (23.5, 27.8) if true: will get "
"int pixel index -> (23, 27)"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon easyidp.geotiff.GeoTiff.crop_rectangle
#: easyidp.geotiff.GeoTiff.point_query easyidp.geotiff.geo2pixel
#: easyidp.geotiff.get_header easyidp.geotiff.get_imarray
#: easyidp.geotiff.tifffile_crop easyidp.pointcloud.PointCloud.crop_point_cloud
#: easyidp.pointcloud.read_las easyidp.shp.read_proj easyidp.shp.read_shp of
msgid "返回"
msgstr ""

#: easyidp.geotiff.geo2pixel:11 of
msgid "pixel position of these points (horizontal, vertical)"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon easyidp.geotiff.GeoTiff.crop_rectangle
#: easyidp.geotiff.GeoTiff.has_data easyidp.geotiff.GeoTiff.point_query
#: easyidp.geotiff.geo2pixel easyidp.geotiff.get_header
#: easyidp.geotiff.get_imarray easyidp.geotiff.pixel2geo
#: easyidp.geotiff.tifffile_crop easyidp.jsonfile.read_json
#: easyidp.pointcloud.PointCloud.crop_point_cloud
#: easyidp.pointcloud.PointCloud.has_colors
#: easyidp.pointcloud.PointCloud.has_normals
#: easyidp.pointcloud.PointCloud.has_points easyidp.pointcloud.read_las
#: easyidp.roi.ROI.copy easyidp.roi.ROI.is_geo easyidp.shp.read_proj of
msgid "返回类型"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:11 easyidp.geotiff.geo2pixel:15
#: easyidp.geotiff.tifffile_crop:39 easyidp.jsonfile.dict2json:14
#: easyidp.jsonfile.save_json:14 easyidp.jsonfile.write_json:14
#: easyidp.pointcloud.write_ply:17 easyidp.roi.ROI.get_z_from_dsm:22
#: easyidp.roi.ROI.open:7 easyidp.roi.ROI.read_shp:17 of
msgid "提示"
msgstr ""

#: easyidp.geotiff.geo2pixel:16 of
msgid ""
"Please note: gis coordinate, horizontal is x axis, vertical is y axis, "
"origin at left upper."
msgstr ""

#: easyidp.geotiff.geo2pixel:18 of
msgid "To crop image ndarray:"
msgstr ""

#: easyidp.geotiff.geo2pixel:20 of
msgid "the first columns is vertical pixel (along height),"
msgstr ""

#: easyidp.geotiff.geo2pixel:21 of
msgid "the second columns is horizontal pixel number (along width),"
msgstr ""

#: easyidp.geotiff.geo2pixel:22 of
msgid "the third columns is 3 or 4 bands (RGB, alpha),"
msgstr ""

#: easyidp.geotiff.geo2pixel:23 of
msgid "the x and y is reversed compared with gis coordinates."
msgstr ""

#: easyidp.geotiff.geo2pixel:25 of
msgid ""
"This function has already do this reverse, so that you can use the output"
" directly."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:36
#: easyidp.geotiff.GeoTiff.point_query:12 easyidp.geotiff.geo2pixel:28
#: easyidp.geotiff.tifffile_crop:49 easyidp.roi.ROI.get_z_from_dsm:49
#: easyidp.shp.read_shp:27 of
msgid "实际案例"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.get_header.rst:2
msgid "easyidp.geotiff.get\\_header"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1 easyidp.geotiff.get_header:1
#: of
msgid "Read the necessary meta infomation from TIFF file"
msgstr ""

#: easyidp.geotiff.get_header:3 of
msgid "the path to the geotiff file"
msgstr ""

#: easyidp.geotiff.get_header:6 of
msgid "**header** -- the container of acquired meta info"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.get_imarray.rst:2
msgid "easyidp.geotiff.get\\_imarray"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
#: easyidp.geotiff.get_imarray:1 of
msgid "Read full map data as numpy array (time and RAM costy, not recommended)"
msgstr ""

#: easyidp.geotiff.GeoTiff.read_geotiff:3 easyidp.geotiff.get_imarray:3 of
msgid "the path to geotiff file"
msgstr ""

#: easyidp.geotiff.get_imarray:6 of
msgid "**data** -- the obtained image data"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.pixel2geo.rst:2
msgid "easyidp.geotiff.pixel2geo"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1 easyidp.geotiff.pixel2geo:1
#: of
msgid ""
"convert geotiff pixel coordinate (horizontal, vertical) to point cloud "
"xyz coordinate (x, y, z)"
msgstr ""

#: easyidp.geotiff.pixel2geo:10 of
msgid ":obj:`get_header`"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.tifffile_crop.rst:2
msgid "easyidp.geotiff.tifffile\\_crop"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
#: easyidp.geotiff.tifffile_crop:1 of
msgid "Extract a crop from a TIFF image file directory (IFD)."
msgstr ""

#: easyidp.geotiff.tifffile_crop:3 of
msgid ""
"Only the tiles englobing the crop area are loaded and not the whole page."
" This is usefull for large Whole slide images that can't fit int RAM."
msgstr ""

#: easyidp.geotiff.tifffile_crop:20 of
msgid "TIFF image file directory (IFD) from which the crop must be extracted."
msgstr ""

#: easyidp.geotiff.tifffile_crop:22 easyidp.geotiff.tifffile_crop:26 of
msgid ""
"Coordinates of the top left corner of the desired crop. top = i0 = "
"height_st left = j0 = w_st"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:21 easyidp.geotiff.tifffile_crop:30
#: of
msgid "Desired crop height."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:23 easyidp.geotiff.tifffile_crop:32
#: of
msgid "Desired crop width."
msgstr ""

#: easyidp.geotiff.tifffile_crop:35 of
msgid "**out** -- Extracted crop."
msgstr ""

#: easyidp.geotiff.tifffile_crop:40 of
msgid "Modified from [1]_ ,"
msgstr ""

#: easyidp.geotiff.tifffile_crop:42 of
msgid ""
"In EasyIDP v1.0, the function is ``caas_lite.get_crop(page, i0, j0, h, "
"w)``"
msgstr ""

#: easyidp.geotiff.tifffile_crop:44 easyidp.pointcloud.write_ply:34 of
msgid "引用"
msgstr ""

#: easyidp.geotiff.tifffile_crop:46 of
msgid ""
"https://gist.github.com/rfezzani/b4b8852c5a48a901c1e94e09feb34743#file-"
"get_crop-py-L60"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:43 easyidp.geotiff.tifffile_crop:58
#: of
msgid "It is not recommended to use without specifying parameters like this:"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:45 easyidp.geotiff.tifffile_crop:60
#: of
msgid "``crop_rectiange(434, 918, 320, 321)``"
msgstr ""

#: easyidp.geotiff.tifffile_crop:62 of
msgid "It is hard to know the exactly order immediately."
msgstr ""

#: easyidp.geotiff.tifffile_crop:64 of
msgid ":obj:`Geotiff.crop_rectange`"
msgstr ""

#: ../../python_api/autodoc/easyidp.jsonfile.dict2json.rst:2
msgid "easyidp.jsonfile.dict2json"
msgstr ""

#: ../../python_api/json.rst:21:<autosummary>:1 easyidp.jsonfile.dict2json:1 of
msgid "Convert dict to the same structure json file"
msgstr ""

#: easyidp.jsonfile.dict2json:3 easyidp.jsonfile.save_json:3
#: easyidp.jsonfile.write_json:3 of
msgid "the dict object want to save as json file"
msgstr ""

#: easyidp.jsonfile.dict2json:5 easyidp.jsonfile.save_json:5
#: easyidp.jsonfile.write_json:5 of
msgid ""
"the path including json file name to save the json file e.g. "
"``D:/xxx/xxxx/save.json``"
msgstr ""

#: easyidp.jsonfile.dict2json:8 easyidp.jsonfile.save_json:8
#: easyidp.jsonfile.write_json:8 of
msgid "whether save \"readable\" json with indent, default 0 without indent"
msgstr ""

#: easyidp.jsonfile.dict2json:10 easyidp.jsonfile.save_json:10
#: easyidp.jsonfile.write_json:10 of
msgid "the encoding type of output file"
msgstr ""

#: easyidp.jsonfile.dict2json:15 easyidp.jsonfile.save_json:15
#: easyidp.jsonfile.write_json:15 of
msgid "**indient example**"
msgstr ""

#: easyidp.jsonfile.dict2json:28 of
msgid ":obj:`easyidp.jsonfile.write_json`, :obj:`easyidp.jsonfile.save_json`"
msgstr ""

#: ../../python_api/autodoc/easyidp.jsonfile.read_json.rst:2
msgid "easyidp.jsonfile.read\\_json"
msgstr ""

#: ../../python_api/json.rst:21:<autosummary>:1 easyidp.jsonfile.read_json:1 of
msgid "Read json file to python dict."
msgstr ""

#: easyidp.jsonfile.read_json:3 of
msgid "The path to json file"
msgstr ""

#: ../../python_api/autodoc/easyidp.jsonfile.save_json.rst:2
msgid "easyidp.jsonfile.save\\_json"
msgstr ""

#: ../../python_api/json.rst:21:<autosummary>:1 easyidp.jsonfile.save_json:1
#: easyidp.jsonfile.write_json:1 of
msgid "Save dict to the same structure json file"
msgstr ""

#: easyidp.jsonfile.save_json:28 easyidp.jsonfile.write_json:28 of
msgid ":obj:`easyidp.jsonfile.dict2json`, :obj:`easyidp.jsonfile.save_json`"
msgstr ""

#: ../../python_api/autodoc/easyidp.jsonfile.write_json.rst:2
msgid "easyidp.jsonfile.write\\_json"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.read_las.rst:2
msgid "easyidp.pointcloud.read\\_las"
msgstr ""

#: ../../python_api/pointcloud.rst:35:<autosummary>:1
#: easyidp.pointcloud.read_las:1 of
msgid "Read the las file"
msgstr ""

#: easyidp.pointcloud.read_las:3 of
msgid "The path to las file"
msgstr ""

#: easyidp.pointcloud.read_las:6 of
msgid "points, colors, normals of given point cloud data"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.write_ply.rst:2
msgid "easyidp.pointcloud.write\\_ply"
msgstr ""

#: ../../python_api/pointcloud.rst:35:<autosummary>:1
#: easyidp.pointcloud.write_ply:1 of
msgid "Save point cloud to ply format"
msgstr ""

#: easyidp.pointcloud.write_ply:3 of
msgid "the nx3 numpy ndarray of point XYZ info"
msgstr ""

#: easyidp.pointcloud.write_ply:5 of
msgid "the nx3 numpy ndarray of point RGB info, dtype=np.uint8"
msgstr ""

#: easyidp.pointcloud.write_ply:7 of
msgid "the output point cloud file, including ext."
msgstr ""

#: easyidp.pointcloud.write_ply:9 of
msgid "the nx3 numpy ndarray of point normal info, by default None"
msgstr ""

#: easyidp.pointcloud.write_ply:11 of
msgid ""
"whether save the binary file. True: save BINARY ply file (by default) "
"False: save ASCII ply file."
msgstr ""

#: easyidp.pointcloud.write_ply:18 of
#, fuzzy
msgid ""
"Need to convert to structured arrays [1]_ then save the point cloud "
"structure looks like this:"
msgstr ""

#: easyidp.pointcloud.write_ply:32 of
msgid ""
"convert ndarray to strucutred array [2]_ and method to merge to "
"structured arrays [3]_"
msgstr ""

#: easyidp.pointcloud.write_ply:36 of
msgid "https://github.com/dranjan/python-plyfile#creating-a-ply-file"
msgstr ""

#: easyidp.pointcloud.write_ply:37 of
msgid ""
"https://stackoverflow.com/questions/3622850/converting-a-2d-numpy-array-"
"to-a-structured-array"
msgstr ""

#: easyidp.pointcloud.write_ply:38 of
msgid ""
"https://stackoverflow.com/questions/5355744/numpy-joining-structured-"
"arrays"
msgstr ""

#: ../../python_api/autodoc/easyidp.roi.read_cc_txt.rst:2
msgid "easyidp.roi.read\\_cc\\_txt"
msgstr ""

#: ../../python_api/roi.rst:32:<autosummary>:1 easyidp.roi.read_cc_txt:1 of
msgid "Read the point cloud annotation made by cloudcompare"
msgstr ""

#: easyidp.roi.read_cc_txt:3 of
msgid "The path to cloudcompare annotation txt file"
msgstr ""

#: ../../python_api/autodoc/easyidp.shp.convert_proj.rst:2
msgid "easyidp.shp.convert\\_proj"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1 easyidp.shp.convert_proj:1 of
msgid "Provide the geo coordinate transfrom based on pyproj package"
msgstr ""

#: easyidp.shp.convert_proj:3 of
msgid "the output of read_shp() function"
msgstr ""

#: easyidp.shp.convert_proj:5 of
msgid "the hidden output of read_shp(..., return_proj=True)"
msgstr ""

#: easyidp.shp.convert_proj:7 of
msgid "Examples: [1] pyproj.CRS.from_epsg(4326) [2] r'path/to/{shp_name}.prj',"
msgstr ""

#: ../../python_api/autodoc/easyidp.shp.read_proj.rst:2
msgid "easyidp.shp.read\\_proj"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1 easyidp.shp.read_proj:1 of
msgid "read \\*.prj file to pyproj object"
msgstr ""

#: easyidp.shp.read_proj:3 of
msgid "the file path of shp \\*.prj"
msgstr ""

#: easyidp.shp.read_proj:6 of
msgid "**proj**"
msgstr ""

#: ../../python_api/autodoc/easyidp.shp.read_shp.rst:2
msgid "easyidp.shp.read\\_shp"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1 easyidp.shp.read_shp:1 of
msgid "read shp file to python numpy object"
msgstr ""

#: easyidp.roi.ROI.read_shp:3 easyidp.shp.read_shp:3
#: easyidp.shp.show_shp_fields:3 of
msgid "the file path of \\*.shp"
msgstr ""

#: easyidp.roi.ROI.read_shp:5 easyidp.shp.read_shp:5 of
msgid ""
"by default None, will read automatically from prj file with the same name"
" of shp filename, or give manually by ``read_shp(..., "
"shp_proj=pyproj.CRS.from_epsg(4326), ...)`` or ``read_shp(..., "
"shp_proj=r'path/to/{shp_name}.prj', ...)``"
msgstr ""

#: easyidp.roi.ROI.read_shp:9 easyidp.shp.read_shp:9 of
msgid ""
"by default None, the id or name of shp file fields as output dictionary "
"keys"
msgstr ""

#: easyidp.roi.ROI.read_shp:11 easyidp.shp.read_shp:11 of
msgid "by default False, whether add column name to roi key."
msgstr ""

#: easyidp.roi.ROI.read_shp:13 easyidp.shp.read_shp:13 of
msgid "by default 'utf-8', for some chinese characters, 'gbk' may required"
msgstr ""

#: easyidp.shp.read_shp:15 of
msgid ""
"by default False, if given as true, will return extra pyproj.CRS object "
"of current shp file."
msgstr ""

#: easyidp.shp.read_shp:18 of
msgid ""
"* *dict,* -- the dictionary with read numpy polygon coordinates    .. "
"code-block:: python        {'id1': np.array([[x1,y1],[x2,y2],...]),"
"        'id2': np.array([[x1,y1],[x2,y2],...]),...} * *pyproj.CRS, "
"optional* -- once set return_proj=True"
msgstr ""

#: easyidp.shp.read_shp:18 of
msgid "*dict,* -- the dictionary with read numpy polygon coordinates"
msgstr ""

#: easyidp.shp.read_shp:24 of
msgid "*pyproj.CRS, optional* -- once set return_proj=True"
msgstr ""

#: easyidp.shp.read_shp:28 of
msgid "The example shp file has the following columns:"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[0] ID"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[1] MASSIFID"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[2] CROPTYPE"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[3] CROPDATE"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[4] CROPAREA"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[5] ATTID"
msgstr ""

#: easyidp.shp.read_shp:33 of
msgid "23010...0000"
msgstr ""

#: easyidp.shp.read_shp:33 of
msgid "小麦"
msgstr ""

#: easyidp.shp.read_shp:33 easyidp.shp.read_shp:35 easyidp.shp.read_shp:37
#: easyidp.shp.read_shp:39 easyidp.shp.read_shp:41 easyidp.shp.read_shp:45
#: easyidp.shp.read_shp:47 easyidp.shp.read_shp:49 easyidp.shp.read_shp:51
#: easyidp.shp.read_shp:53 of
msgid "2018-09-01"
msgstr ""

#: easyidp.shp.read_shp:33 of
msgid "61525.26302"
msgstr ""

#: easyidp.shp.read_shp:35 of
msgid "23010...0012"
msgstr ""

#: easyidp.shp.read_shp:35 of
msgid "蔬菜"
msgstr ""

#: easyidp.shp.read_shp:35 of
msgid "2802.33512"
msgstr ""

#: easyidp.shp.read_shp:37 of
msgid "23010...0014"
msgstr ""

#: easyidp.shp.read_shp:37 easyidp.shp.read_shp:41 of
msgid "玉米"
msgstr ""

#: easyidp.shp.read_shp:37 of
msgid "6960.7745"
msgstr ""

#: easyidp.shp.read_shp:39 of
msgid "23010...0061"
msgstr ""

#: easyidp.shp.read_shp:39 of
msgid "牧草"
msgstr ""

#: easyidp.shp.read_shp:39 of
msgid "25349.08639"
msgstr ""

#: easyidp.shp.read_shp:41 of
msgid "23010...0062"
msgstr ""

#: easyidp.shp.read_shp:41 of
msgid "71463.27666"
msgstr ""

#: easyidp.shp.read_shp:43 of
msgid "..."
msgstr ""

#: easyidp.shp.read_shp:45 of
msgid "23010...0582"
msgstr ""

#: easyidp.shp.read_shp:45 of
msgid "胡萝卜"
msgstr ""

#: easyidp.shp.read_shp:45 of
msgid "288.23876"
msgstr ""

#: easyidp.shp.read_shp:47 of
msgid "23010...0577"
msgstr ""

#: easyidp.shp.read_shp:47 of
msgid "杂豆"
msgstr ""

#: easyidp.shp.read_shp:47 of
msgid "2001.80384"
msgstr ""

#: easyidp.shp.read_shp:49 of
msgid "23010...0583"
msgstr ""

#: easyidp.shp.read_shp:49 of
msgid "大豆"
msgstr ""

#: easyidp.shp.read_shp:49 of
msgid "380.41704"
msgstr ""

#: easyidp.shp.read_shp:51 of
msgid "23010...0584"
msgstr ""

#: easyidp.shp.read_shp:51 easyidp.shp.read_shp:53 of
msgid "其它"
msgstr ""

#: easyidp.shp.read_shp:51 of
msgid "9133.25998"
msgstr ""

#: easyidp.shp.read_shp:53 of
msgid "23010...0585"
msgstr ""

#: easyidp.shp.read_shp:53 of
msgid "1704.27193"
msgstr ""

#: easyidp.shp.read_shp:56 of
msgid "First, prepare data"
msgstr ""

#: easyidp.shp.read_shp:63 of
msgid "Then using the second column ``MASSIFID`` as shape keys:"
msgstr ""

#: easyidp.shp.read_shp:79 of
msgid ""
"Due to the duplication of ``CROPTYPE``, you can not using it as the "
"unique key, but you can combine several columns together by passing a "
"list to ``name_field``:"
msgstr ""

#: easyidp.shp.read_shp:91 of
msgid "And you can also add column_names to id by ``include_title=True`` :"
msgstr ""

#: ../../python_api/autodoc/easyidp.shp.show_shp_fields.rst:2
msgid "easyidp.shp.show\\_shp\\_fields"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1 easyidp.shp.show_shp_fields:1 of
msgid "Read shp field data to pandas.DataFrame, for further json metadata usage"
msgstr ""

#: easyidp.shp.show_shp_fields:5 of
msgid "default is 'utf-8', however, or some chinese characters, 'gbk' is required"
msgstr ""

#: ../../python_api/geotiff.rst:3
msgid "GeoTiff"
msgstr ""

#: ../../python_api/geotiff.rst:7 ../../python_api/pointcloud.rst:7
#: ../../python_api/roi.rst:6
msgid "Class"
msgstr ""

#: ../../python_api/geotiff.rst:9
msgid "A summary of class ``GeoTiff``"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.read_geotiff <easyidp.GeoTiff.read_geotiff>`\\ "
"\\(tif\\_path\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.read_geotiff:1 of
msgid "Open and get the meta information (header) from geotiff"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ":py:obj:`easyidp.GeoTiff.has_data <easyidp.GeoTiff.has_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.has_data:1 of
msgid "Return True if current objects has geotiff infomation"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.point_query <easyidp.GeoTiff.point_query>`\\ "
"\\(points\\_hv\\[\\, is\\_geo\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.point_query:1 of
msgid "get the pixel value of given point(s)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.crop_polygon <easyidp.GeoTiff.crop_polygon>`\\ "
"\\(polygon\\_hv\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.crop_polygon:1 of
msgid "crop given polygon from geotiff"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.save_geotiff <easyidp.GeoTiff.save_geotiff>`\\ "
"\\(imarray\\, ...\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.save_geotiff:1 of
msgid "Save cropped region to geotiff file"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.math_polygon <easyidp.GeoTiff.math_polygon>`\\ "
"\\(polygon\\_hv\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.math_polygon:1 of
msgid "Calculate the valus inside given polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff:1 of
msgid ""
"A GeoTiff class, consisted by header information and file path to raw "
"file."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop:1 of
msgid ""
"Crop the geotiff by given <ROI> object with several polygons and polygon "
"names"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop:3 of
msgid "the <ROI> object created by easyidp.ROI()"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop:5 of
msgid ""
"the folder to save cropped images, use ROI indices as file_names, by "
"default \"\", means not save."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop of
msgid "引发"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop:8 of
msgid "have not finished yet."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:3
#: easyidp.geotiff.GeoTiff.math_polygon:3 of
msgid "(horizontal, vertical) points"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:5
#: easyidp.geotiff.GeoTiff.crop_rectangle:25
#: easyidp.geotiff.GeoTiff.math_polygon:5 easyidp.geotiff.GeoTiff.point_query:5
#: of
msgid ""
"whether the given polygon is pixel coords on imarray or geo coords "
"(default)"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:7
#: easyidp.geotiff.GeoTiff.crop_rectangle:27 of
msgid "if given, will save the cropped as \\*.tif file to path"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:10 of
msgid "The cropped numpy pixels imarray"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:1 of
msgid "Extract a rectangle regeion crop from a GeoTIFF image file."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:17 of
msgid "Coordinates of"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:19 of
msgid "Coordinates of the top left corner of the desired crop."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:30 of
msgid "Extracted crop."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:33 of
msgid ":obj:`tifffile_crop`"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:47 of
msgid "It is hard to know the exactly order"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:49 of
msgid ""
"PS: subfunction ``tifffile_crop`` has the order ``(top, left, h, w)`` "
"which is too heavy to change it."
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:7 of
msgid ""
"The method to calculate polygon summary, options are: [\"mean\", \"min\","
" \"max\", \"pmin5\", \"pmin10\", \"pmax5\", \"pmax10\"], please check "
"notes section for more details."
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:12 of
msgid "Option details for ``kernal`` parameter:"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:14 easyidp.roi.ROI.get_z_from_dsm:25 of
msgid "\"mean\": the mean value inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:15 easyidp.roi.ROI.get_z_from_dsm:26 of
msgid "\"min\": the minimum value inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:16 easyidp.roi.ROI.get_z_from_dsm:27 of
msgid "\"max\": the maximum value inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:17 of
msgid "\"pmin5\": 5th [percentile mean]_ inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:18 of
msgid "\"pmin10\": 10th [percentile mean]_ inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:19 of
msgid "\"pmax5\": 95th [percentile mean]_ inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:20 of
msgid "\"pmax10\": 90th [percentile mean]_ inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:3 of
msgid "The coordinates of qurey points, in order (horizontal, vertical)"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:8 of
msgid "the obtained pixel value (RGB or height)"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:13 of
msgid "Prequirements"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:20 of
msgid "Query one point by tuple"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:29 of
msgid "Query one point by list"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:38 of
msgid "Query several points by list"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:49 of
msgid "Query several points by numpy"
msgstr ""

#: easyidp.geotiff.GeoTiff.save_geotiff:3 of
msgid "(m, n, d) image ndarray cropped from `crop_polygon`"
msgstr ""

#: easyidp.geotiff.GeoTiff.save_geotiff:5 of
msgid "the pixel position of image top left cornder, the order is (left, top)"
msgstr ""

#: easyidp.geotiff.GeoTiff.save_geotiff:8 of
msgid "the save to geotiff file path"
msgstr ""

#: ../../python_api/geotiff.rst:28 ../../python_api/json.rst:9
#: ../../python_api/pointcloud.rst:25 ../../python_api/roi.rst:23
#: ../../python_api/shp.rst:9
msgid "Functions"
msgstr ""

#: ../../python_api/geotiff.rst:32
msgid ""
"The ``easyidp.GeoTiff`` class is an advanced wrapper around the following"
" functions, which is generally sufficient for most simple application "
"cases, please don't use the following functions unless you really need "
"to."
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.get_header <easyidp.geotiff.get_header>`\\ "
"\\(tif\\_path\\)"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.get_imarray <easyidp.geotiff.get_imarray>`\\ "
"\\(tif\\_path\\)"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.geo2pixel <easyidp.geotiff.geo2pixel>`\\ "
"\\(points\\_hv\\, header\\)"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.pixel2geo <easyidp.geotiff.pixel2geo>`\\ "
"\\(points\\_hv\\, header\\)"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.tifffile_crop <easyidp.geotiff.tifffile_crop>`\\"
" \\(page\\, top\\, ...\\)"
msgstr ""

#: ../../python_api/index.rst:3
msgid "API Summary"
msgstr "API概要"

#: ../../python_api/index.rst:5
msgid "The EasyIDP package have the following modules:"
msgstr ""

#: ../../python_api/index.rst:7
msgid ""
":doc:`Point cloud Module <./pointcloud>` : read, write, check and crop "
"opertation."
msgstr ""

#: ../../python_api/index.rst:8
msgid ""
":doc:`GeoTiff Module <./geotiff>` : read, write, crop, and statistics "
"opertation."
msgstr ""

#: ../../python_api/index.rst:9
msgid ":doc:`ROI Module <./roi>` : read region of interest from shp and txt file."
msgstr ""

#: ../../python_api/index.rst:11
msgid ":doc:`shp Submodule <./shp>`: read shape (\\*.shp) file."
msgstr ""

#: ../../python_api/index.rst:12
msgid ":doc:`jsonfile Submodule <./json>`: read and write json file."
msgstr ""

#: ../../python_api/index.rst:15
msgid ""
"For each module, consisted by several base functions (e.g. "
"``easyidp.geotiff.*`` ) and an advanced wrapper class for them (e.g. "
"``easyidp.GeoTiff``). In the most cases, please use the upper case class "
"wrapper rather than the lowercase base functions unless you really need "
"them."
msgstr ""

#: ../../python_api/index.rst:17
msgid "For example, this function can be used to read geotiff meta infomation:"
msgstr ""

#: ../../python_api/index.rst:24
msgid ""
"But it is more recommended use the advanced wrapper in most application "
"cases:"
msgstr ""

#: ../../python_api/index.rst:31
msgid ""
"Although it may seem like more code, advanced wrappers have more "
"convenient functions to use without caring about specific data structure "
"details. Most of our example cases are using the advanced class wrapper."
msgstr ""

#: ../../python_api/json.rst:5
msgid "• jsonfile"
msgstr ""

#: ../../python_api/json.rst:13 ../../python_api/roi.rst:27
#: ../../python_api/shp.rst:13
msgid ""
"The ``easyidp.ROI`` class is an advanced wrapper around the following "
"functions, which is generally sufficient for most simple application "
"cases, please don't use the following functions unless you really need "
"to."
msgstr ""

#: ../../python_api/json.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.jsonfile.read_json <easyidp.jsonfile.read_json>`\\ "
"\\(json\\_path\\)"
msgstr ""

#: ../../python_api/json.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.jsonfile.save_json <easyidp.jsonfile.save_json>`\\ "
"\\(data\\_dict\\, json\\_path\\)"
msgstr ""

#: ../../python_api/json.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.jsonfile.write_json <easyidp.jsonfile.write_json>`\\ "
"\\(data\\_dict\\, json\\_path\\)"
msgstr ""

#: ../../python_api/json.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.jsonfile.dict2json <easyidp.jsonfile.dict2json>`\\ "
"\\(data\\_dict\\, json\\_path\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:3
msgid "Point Cloud"
msgstr "点群"

#: ../../python_api/pointcloud.rst:9
msgid "A summary of class ``PointCloud``"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
msgid ""
":py:obj:`easyidp.PointCloud.has_colors <easyidp.PointCloud.has_colors>`\\"
" \\(\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_colors:1 of
msgid "Returns True if the point cloud contains point colors."
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
msgid ""
":py:obj:`easyidp.PointCloud.has_points <easyidp.PointCloud.has_points>`\\"
" \\(\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_points:1 of
msgid "Returns True if the point cloud contains points."
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
msgid ""
":py:obj:`easyidp.PointCloud.has_normals "
"<easyidp.PointCloud.has_normals>`\\ \\(\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_normals:1 of
msgid "Returns True if the point cloud contains point normals."
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
msgid ""
":py:obj:`easyidp.PointCloud.crop_point_cloud "
"<easyidp.PointCloud.crop_point_cloud>`\\ \\(polygon\\_xy\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
#: easyidp.pointcloud.PointCloud.crop_point_cloud:1 of
msgid "crop the point cloud along z axis"
msgstr ""

#: easyidp.pointcloud.PointCloud:1 of
msgid ""
"PointCloud class. A point cloud consists of point coordinates, and "
"optionally point colors and point normals."
msgstr ""

#: easyidp.pointcloud.PointCloud.crop_point_cloud:3 of
msgid "the polygon xy coords"
msgstr ""

#: easyidp.pointcloud.PointCloud.crop_point_cloud:6 of
msgid "The cropped point cloud"
msgstr ""

#: ../../python_api/pointcloud.rst:29
msgid ""
"The ``easyidp.PointCloud`` class is an advanced wrapper around the "
"following functions, which is generally sufficient for most simple "
"application cases, please don't use the following functions unless you "
"really need to."
msgstr ""

#: ../../python_api/pointcloud.rst:35:<autosummary>:1
msgid ""
":py:obj:`easyidp.pointcloud.write_ply <easyidp.pointcloud.write_ply>`\\ "
"\\(points\\, colors\\, ...\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:35:<autosummary>:1
msgid ""
":py:obj:`easyidp.pointcloud.read_las <easyidp.pointcloud.read_las>`\\ "
"\\(las\\_path\\)"
msgstr ""

#: ../../python_api/roi.rst:3
msgid "ROI"
msgstr ""

#: ../../python_api/roi.rst:8
msgid "A summary of class ``ROI``"
msgstr ""

#: ../../python_api/roi.rst:17:<autosummary>:1
msgid ":py:obj:`easyidp.ROI.is_geo <easyidp.ROI.is_geo>`\\ \\(\\)"
msgstr ""

#: ../../python_api/roi.rst:17:<autosummary>:1 easyidp.roi.ROI.is_geo:1 of
msgid "Returns True if the ROI is geo coordinate."
msgstr ""

#: ../../python_api/roi.rst:17:<autosummary>:1
msgid ""
":py:obj:`easyidp.ROI.get_z_from_dsm <easyidp.ROI.get_z_from_dsm>`\\ "
"\\(dsm\\[\\, mode\\, ...\\]\\)"
msgstr ""

#: ../../python_api/roi.rst:17:<autosummary>:1 easyidp.roi.ROI.get_z_from_dsm:1
#: of
msgid "get the z values (heights) from DSM for 2D polygon"
msgstr ""

#: ../../python_api/roi.rst:17:<autosummary>:1
msgid ""
":py:obj:`easyidp.ROI.open <easyidp.ROI.open>`\\ \\(target\\_path\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../python_api/roi.rst:17:<autosummary>:1 easyidp.roi.ROI.open:1 of
msgid "An advanced wrapper to open ROI without dealing with format"
msgstr ""

#: ../../python_api/roi.rst:17:<autosummary>:1
msgid ":py:obj:`easyidp.ROI.copy <easyidp.ROI.copy>`\\ \\(\\)"
msgstr ""

#: ../../python_api/roi.rst:17:<autosummary>:1 easyidp.roi.ROI.copy:1 of
msgid "make a deep copy of current file"
msgstr ""

#: easyidp.roi.ROI:1 of
msgid "Summary APIs of each objects, often read from shp file."
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:3 of
msgid "the path of dsm, or the GeoTiff object from idp.GeoTiff()"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:5 of
msgid ""
"the mode to calculate z values, option in \"point\" and \"face\" "
"**point**: get height on each vertex, result in different values for each"
" vertex **face**: get height on polygon face, result in the same value "
"for each vertex"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:9 of
msgid ""
"The math kernal to calculate the z value. [\"mean\", \"min\", \"max\", "
"\"pmin5\", \"pmin10\", \"pmax5\", \"pmax10\"], by default 'mean'"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:12 of
msgid ""
"the buffer of ROI, by default 0 (no buffer), can be positive values or -1"
" (using all map), please check the Notes section for more details"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:16 of
msgid ""
"When the crs is not the save with DSM crs, where change the ROI crs to "
"fit DSM. **False**(default): change ROI's CRS; **True**: not change ROI's"
" CRS, only attach the z value to current coordinate."
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:23 of
msgid "**Option details for** ``kernal`` **parameter**"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:28 of
msgid "\"pmin5\": 5th *percentile mean* inside polygon"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:29 of
msgid "\"pmin10\": 10th *percentile mean* inside polygon"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:30 of
msgid "\"pmax5\": 95th *percentile mean* inside polygon"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:31 of
msgid "\"pmax10\": 90th *percentile mean* inside polygon"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:33 of
msgid ""
"percentile mean: the mean value of all pixels over/under xth percentile "
"threshold"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:35 of
msgid "**Option details for** ``buffer`` **parameter**"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:37 of
msgid "0: not using buffer"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:38 of
msgid "-1: ignore given polygon, using the full dsm to calculate the height"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:39 of
msgid ""
"float: buffer distance, the unit of buffer follows the ROI coordinates, "
"either pixel or meter."
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:41 of
msgid ""
"If mode is \"point\", will generate a round buffer polygon first, then "
"extract the z-value by this region, but the return will only be a single "
"point."
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:43 of
msgid ""
"If mode is \"face\", will buffer the polygon and then calculate the "
"height inside the buffered polygon"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:-1 of
msgid "roi_crop_mode.png"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:50 of
msgid "Combine"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:52 of
msgid ":obj:`easyidp.GeoTiff.math_polygon`"
msgstr ""

#: easyidp.roi.ROI.open:3 of
msgid "the path to roi files, current support \\*.shp and labelme.json"
msgstr ""

#: easyidp.roi.ROI.open:8 of
msgid ""
"You can also pass several control parameters in this function, please "
"refer see also for more information"
msgstr ""

#: easyidp.roi.ROI.open:10 of
msgid ":obj:`read_shp`, :obj:`read_labelme_json`"
msgstr ""

#: easyidp.roi.ROI.read_shp:1 of
msgid "read ROI from shp file"
msgstr ""

#: easyidp.roi.ROI.read_shp:18 of
msgid "For details of this parameters, please refer to see also."
msgstr ""

#: easyidp.roi.ROI.read_shp:20 of
msgid ":obj:`easyidp.shp.read_shp`"
msgstr ""

#: ../../python_api/roi.rst:32:<autosummary>:1
msgid ""
":py:obj:`easyidp.roi.read_cc_txt <easyidp.roi.read_cc_txt>`\\ "
"\\(txt\\_path\\)"
msgstr ""

#: ../../python_api/shp.rst:5
msgid "• shapefile"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1
msgid ":py:obj:`easyidp.shp.read_proj <easyidp.shp.read_proj>`\\ \\(prj\\_path\\)"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.shp.show_shp_fields <easyidp.shp.show_shp_fields>`\\ "
"\\(shp\\_path\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.shp.read_shp <easyidp.shp.read_shp>`\\ "
"\\(shp\\_path\\[\\, shp\\_proj\\, ...\\]\\)"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.shp.convert_proj <easyidp.shp.convert_proj>`\\ "
"\\(shp\\_dict\\, ...\\)"
msgstr ""

#~ msgid ""
#~ "Although it may seem like more "
#~ "code, advanced wrappers have more "
#~ "convenient functions to use without "
#~ "caring about specific data structure "
#~ "details."
#~ msgstr ""

#~ msgid "\"pmin5\": 5th percentile mean [1]_ inside polygon"
#~ msgstr ""

#~ msgid "\"pmin10\": 10th percentile mean [1]_ inside polygon"
#~ msgstr ""

#~ msgid "\"pmax5\": 95th percentile mean [1]_ inside polygon"
#~ msgstr ""

#~ msgid "\"pmax10\": 90th percentile mean [1]_ inside polygon"
#~ msgstr ""

#~ msgid ":doc:`Point cloud Module <./pointcloud>`"
#~ msgstr ""

#~ msgid ":doc:`GeoTiff Module <./geotiff>`"
#~ msgstr ""

#~ msgid "Json"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`ROI Module <./roi>` : read region"
#~ " of interest from shp and txt "
#~ "file."
#~ msgstr ""

#~ msgid "Jsonfile"
#~ msgstr ""

#~ msgid "Shapefile"
#~ msgstr ""

#~ msgid "jsonfile"
#~ msgstr ""

#~ msgid "shapefile"
#~ msgstr ""

#~ msgid ":doc:`ROI Module <./roi>`"
#~ msgstr ""

#~ msgid "read region of interest from shp and txt file."
#~ msgstr ""

#~ msgid ":doc:`Shp Submodule <./shp>`: read shape (\\*.shp) file."
#~ msgstr ""

#~ msgid ":doc:`Json Submodule <./json>`: read and write json file."
#~ msgstr ""

#~ msgid "\\|\\-\\- jsonfile"
#~ msgstr ""

#~ msgid "\\|\\-\\- shapefile"
#~ msgstr ""

