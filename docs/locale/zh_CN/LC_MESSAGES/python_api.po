# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Haozhou Wang
# This file is distributed under the same license as the EasyIDP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyIDP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-21 07:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../python_api/autodoc/easyidp.geotiff.geo2pixel.rst:2
msgid "easyidp.geotiff.geo2pixel"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1 easyidp.geotiff.geo2pixel:1
#: of
msgid ""
"convert point cloud xyz coordinate to geotiff pixel coordinate "
"(horizontal, vertical)"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop easyidp.geotiff.GeoTiff.crop_polygon
#: easyidp.geotiff.GeoTiff.math_polygon easyidp.geotiff.GeoTiff.point_query
#: easyidp.geotiff.GeoTiff.read_geotiff easyidp.geotiff.GeoTiff.save_geotiff
#: easyidp.geotiff.geo2pixel easyidp.geotiff.get_header
#: easyidp.geotiff.get_imarray easyidp.geotiff.pixel2geo
#: easyidp.geotiff.tifffile_crop easyidp.pointcloud.PointCloud.crop_point_cloud
#: easyidp.pointcloud.read_las easyidp.pointcloud.write_ply of
msgid "参数"
msgstr ""

#: easyidp.geotiff.geo2pixel:3 easyidp.geotiff.pixel2geo:3 of
msgid "[horizontal, vertical] points"
msgstr ""

#: easyidp.geotiff.geo2pixel:5 easyidp.geotiff.pixel2geo:5 of
msgid "the geotiff head dictionary from get_header()"
msgstr ""

#: easyidp.geotiff.geo2pixel:7 of
msgid ""
"if false: will get float coordinates -> (23.5, 27.8) if true: will get "
"int pixel index -> (23, 27)"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon easyidp.geotiff.GeoTiff.point_query
#: easyidp.geotiff.geo2pixel easyidp.geotiff.get_header
#: easyidp.geotiff.get_imarray easyidp.geotiff.tifffile_crop
#: easyidp.pointcloud.PointCloud.crop_point_cloud easyidp.pointcloud.read_las
#: of
msgid "返回"
msgstr ""

#: easyidp.geotiff.geo2pixel:11 of
msgid "pixel position of these points (horizontal, vertical)"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon easyidp.geotiff.GeoTiff.has_data
#: easyidp.geotiff.GeoTiff.point_query easyidp.geotiff.geo2pixel
#: easyidp.geotiff.get_header easyidp.geotiff.get_imarray
#: easyidp.geotiff.pixel2geo easyidp.geotiff.tifffile_crop
#: easyidp.pointcloud.PointCloud.crop_point_cloud
#: easyidp.pointcloud.PointCloud.has_colors
#: easyidp.pointcloud.PointCloud.has_normals
#: easyidp.pointcloud.PointCloud.has_points easyidp.pointcloud.read_las of
msgid "返回类型"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:11 easyidp.geotiff.geo2pixel:15
#: easyidp.geotiff.tifffile_crop:39 easyidp.pointcloud.write_ply:17 of
msgid "提示"
msgstr ""

#: easyidp.geotiff.geo2pixel:16 of
msgid ""
"Please note: gis coordinate, horizontal is x axis, vertical is y axis, "
"origin at left upper."
msgstr ""

#: easyidp.geotiff.geo2pixel:18 of
msgid "To crop image ndarray:"
msgstr ""

#: easyidp.geotiff.geo2pixel:20 of
msgid "the first columns is vertical pixel (along height),"
msgstr ""

#: easyidp.geotiff.geo2pixel:21 of
msgid "the second columns is horizontal pixel number (along width),"
msgstr ""

#: easyidp.geotiff.geo2pixel:22 of
msgid "the third columns is 3 or 4 bands (RGB, alpha),"
msgstr ""

#: easyidp.geotiff.geo2pixel:23 of
msgid "the x and y is reversed compared with gis coordinates."
msgstr ""

#: easyidp.geotiff.geo2pixel:25 of
msgid ""
"This function has already do this reverse, so that you can use the output"
" directly."
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:12 easyidp.geotiff.geo2pixel:28 of
msgid "实际案例"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.get_header.rst:2
msgid "easyidp.geotiff.get\\_header"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1 easyidp.geotiff.get_header:1
#: of
msgid "Read the necessary meta infomation from TIFF file"
msgstr "从Geotiff中读取头文件信息"

#: easyidp.geotiff.get_header:3 of
msgid "the path to the geotiff file"
msgstr "Geotiff文件的路径"

#: easyidp.geotiff.get_header:6 of
msgid "**header** -- the container of acquired meta info"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.get_imarray.rst:2
msgid "easyidp.geotiff.get\\_imarray"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
#: easyidp.geotiff.get_imarray:1 of
msgid "Read full map data as numpy array (time and RAM costy, not recommended)"
msgstr ""

#: easyidp.geotiff.GeoTiff.read_geotiff:3 easyidp.geotiff.get_imarray:3 of
msgid "the path to geotiff file"
msgstr "Geotiff文件的路径"

#: easyidp.geotiff.get_imarray:6 of
msgid "**data** -- the obtained image data"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.pixel2geo.rst:2
msgid "easyidp.geotiff.pixel2geo"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1 easyidp.geotiff.pixel2geo:1
#: of
msgid ""
"convert geotiff pixel coordinate (horizontal, vertical) to point cloud "
"xyz coordinate (x, y, z)"
msgstr ""

#: easyidp.geotiff.pixel2geo:10 of
msgid ":obj:`get_header`"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.tifffile_crop.rst:2
msgid "easyidp.geotiff.tifffile\\_crop"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
#: easyidp.geotiff.tifffile_crop:1 of
msgid "Extract a crop from a TIFF image file directory (IFD)."
msgstr ""

#: easyidp.geotiff.tifffile_crop:3 of
msgid ""
"Only the tiles englobing the crop area are loaded and not the whole page."
" This is usefull for large Whole slide images that can't fit int RAM."
msgstr ""

#: easyidp.geotiff.tifffile_crop:20 of
msgid "TIFF image file directory (IFD) from which the crop must be extracted."
msgstr ""

#: easyidp.geotiff.tifffile_crop:22 easyidp.geotiff.tifffile_crop:26 of
msgid ""
"Coordinates of the top left corner of the desired crop. top = i0 = "
"height_st left = j0 = w_st"
msgstr ""

#: easyidp.geotiff.tifffile_crop:30 of
msgid "Desired crop height."
msgstr ""

#: easyidp.geotiff.tifffile_crop:32 of
msgid "Desired crop width."
msgstr ""

#: easyidp.geotiff.tifffile_crop:35 of
msgid "**out** -- Extracted crop."
msgstr ""

#: easyidp.geotiff.tifffile_crop:40 of
msgid "Modified from [1]_ ,"
msgstr ""

#: easyidp.geotiff.tifffile_crop:42 of
msgid ""
"In EasyIDP v1.0, the function is ``caas_lite.get_crop(page, i0, j0, h, "
"w)``"
msgstr ""

#: easyidp.geotiff.tifffile_crop:44 easyidp.pointcloud.write_ply:34 of
msgid "引用"
msgstr ""

#: easyidp.geotiff.tifffile_crop:46 of
msgid ""
"https://gist.github.com/rfezzani/b4b8852c5a48a901c1e94e09feb34743#file-"
"get_crop-py-L60"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.read_las.rst:2
msgid "easyidp.pointcloud.read\\_las"
msgstr ""

#: ../../python_api/pointcloud.rst:35:<autosummary>:1
#: easyidp.pointcloud.read_las:1 of
msgid "Read the las file"
msgstr "读取las文件"

#: easyidp.pointcloud.read_las:3 of
msgid "The path to las file"
msgstr "Geotiff文件的路径"

#: easyidp.pointcloud.read_las:6 of
msgid "points, colors, normals of given point cloud data"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.write_ply.rst:2
msgid "easyidp.pointcloud.write\\_ply"
msgstr ""

#: ../../python_api/pointcloud.rst:35:<autosummary>:1
#: easyidp.pointcloud.write_ply:1 of
msgid "Save point cloud to ply format"
msgstr "将点云保存为ply文件"

#: easyidp.pointcloud.write_ply:3 of
msgid "the nx3 numpy ndarray of point XYZ info"
msgstr "点云XYZ信息的numpy ndarray (nx3)"

#: easyidp.pointcloud.write_ply:5 of
msgid "the nx3 numpy ndarray of point RGB info, dtype=np.uint8"
msgstr "点云RGB信息的numpy ndarray (nx3)"

#: easyidp.pointcloud.write_ply:7 of
msgid "the output point cloud file, including ext."
msgstr "输出的点云文件路径，包括拓展名"

#: easyidp.pointcloud.write_ply:9 of
msgid "the nx3 numpy ndarray of point normal info, by default None"
msgstr "点云的法向量信息numpy ndarray (nx3)，默认为None"

#: easyidp.pointcloud.write_ply:11 of
msgid ""
"whether save the binary file. True: save BINARY ply file (by default) "
"False: save ASCII ply file."
msgstr "是否保存为二进制文件。 默认True:保存为BINARY点云PLY文件;  False: 保存为ASCII点云PLY文件"

#: easyidp.pointcloud.write_ply:18 of
msgid ""
"Need to convert to structured arrays [1]_ then save the point cloud "
"structure looks like this:"
msgstr "需要转换成结构性数组(structured arrays) [1]_ ， 然后保存像这样的点云结构"

#: easyidp.pointcloud.write_ply:32 of
msgid ""
"convert ndarray to strucutred array [2]_ and method to merge to "
"structured arrays [3]_"
msgstr "把ndarray转换为结构性数组的方法 [2]_ 与合并结构性数组的方法 [3]_ "

#: easyidp.pointcloud.write_ply:36 of
msgid "https://github.com/dranjan/python-plyfile#creating-a-ply-file"
msgstr ""

#: easyidp.pointcloud.write_ply:37 of
msgid ""
"https://stackoverflow.com/questions/3622850/converting-a-2d-numpy-array-"
"to-a-structured-array"
msgstr ""

#: easyidp.pointcloud.write_ply:38 of
msgid ""
"https://stackoverflow.com/questions/5355744/numpy-joining-structured-"
"arrays"
msgstr ""

#: ../../python_api/geotiff.rst:3
msgid "GeoTiff"
msgstr ""

#: ../../python_api/geotiff.rst:7 ../../python_api/pointcloud.rst:7
msgid "Class"
msgstr "类"

#: ../../python_api/geotiff.rst:9
msgid "A summary of class ``GeoTiff``"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.read_geotiff <easyidp.GeoTiff.read_geotiff>`\\ "
"\\(tif\\_path\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.read_geotiff:1 of
msgid "Open and get the meta information (header) from geotiff"
msgstr "从Geotiff中读取头文件信息"

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ":py:obj:`easyidp.GeoTiff.has_data <easyidp.GeoTiff.has_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.has_data:1 of
msgid "Return True if current objects has geotiff infomation"
msgstr "如果含有Geotiff信息，则返回True"

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.point_query <easyidp.GeoTiff.point_query>`\\ "
"\\(points\\_hv\\[\\, is\\_geo\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.point_query:1 of
msgid "get the pixel value of given point(s)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.crop_polygon <easyidp.GeoTiff.crop_polygon>`\\ "
"\\(polygon\\_hv\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.crop_polygon:1 of
msgid "crop given polygon from geotiff"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.save_geotiff <easyidp.GeoTiff.save_geotiff>`\\ "
"\\(imarray\\, ...\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.save_geotiff:1 of
msgid "Save cropped region to geotiff file"
msgstr "Geotiff文件的保存路径"

#: ../../python_api/geotiff.rst:21:<autosummary>:1
msgid ""
":py:obj:`easyidp.GeoTiff.math_polygon <easyidp.GeoTiff.math_polygon>`\\ "
"\\(polygon\\_hv\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21:<autosummary>:1
#: easyidp.geotiff.GeoTiff.math_polygon:1 of
msgid "Calculate the valus inside given polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff:1 of
msgid ""
"A GeoTiff class, consisted by header information and file path to raw "
"file."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop:1 of
msgid ""
"Crop the geotiff by given <ROI> object with several polygons and polygon "
"names"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop:3 of
msgid "the <ROI> object created by easyidp.ROI()"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop:5 of
msgid ""
"the folder to save cropped images, use ROI indices as file_names, by "
"default \"\", means not save."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop of
msgid "引发"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop:8 of
msgid "have not finished yet."
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:3
#: easyidp.geotiff.GeoTiff.math_polygon:3 of
msgid "(horizontal, vertical) points"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:5
#: easyidp.geotiff.GeoTiff.math_polygon:5 easyidp.geotiff.GeoTiff.point_query:5
#: of
msgid ""
"whether the given polygon is pixel coords on imarray or geo coords "
"(default)"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:7 of
msgid "if given, will save the cropped as \\*.tif file to path"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:10 of
msgid "The cropped numpy pixels imarray"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:7 of
msgid ""
"The method to calculate polygon summary, options are: [\"mean\", \"min\","
" \"max\", \"pmin5\", \"pmin10\", \"pmax5\", \"pmax10\"], please check "
"notes section for more details."
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:12 of
msgid "Option details for ``kernal`` parameter:"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:14 of
msgid "\"mean\": the mean value inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:15 of
msgid "\"min\": the minimum value inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:16 of
msgid "\"max\": the maximum value inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:17 of
msgid "\"pmin5\": 5th percentile mean [1]_ inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:18 of
msgid "\"pmin10\": 10th percentile mean [1]_ inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:19 of
msgid "\"pmax5\": 95th percentile mean [1]_ inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:20 of
msgid "\"pmax10\": 90th percentile mean [1]_ inside polygon"
msgstr ""

#: easyidp.geotiff.GeoTiff.math_polygon:22 of
msgid ""
"percentile mean: the mean value of all pixels over/under xth percentile "
"threshold"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:3 of
msgid "The coordinates of qurey points, in order (horizontal, vertical)"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:8 of
msgid "the obtained pixel value (RGB or height)"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:13 of
msgid "Prequirements"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:20 of
msgid "Query one point by tuple"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:29 of
msgid "Query one point by list"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:38 of
msgid "Query several points by list"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:49 of
msgid "Query several points by numpy"
msgstr ""

#: easyidp.geotiff.GeoTiff.save_geotiff:3 of
msgid "(m, n, d) image ndarray cropped from `crop_polygon`"
msgstr ""

#: easyidp.geotiff.GeoTiff.save_geotiff:5 of
msgid "the pixel position of image top left cornder, the order is (left, top)"
msgstr ""

#: easyidp.geotiff.GeoTiff.save_geotiff:8 of
msgid "the save to geotiff file path"
msgstr "Geotiff文件的保存路径"

#: ../../python_api/geotiff.rst:28 ../../python_api/pointcloud.rst:25
msgid "Functions"
msgstr "函数"

#: ../../python_api/geotiff.rst:32
msgid ""
"The ``easyidp.GeoTiff`` class is an advanced wrapper around the following"
" functions, which is generally sufficient for most simple application "
"cases, please don't use the following functions unless you really need "
"to."
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.get_header <easyidp.geotiff.get_header>`\\ "
"\\(tif\\_path\\)"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.get_imarray <easyidp.geotiff.get_imarray>`\\ "
"\\(tif\\_path\\)"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.geo2pixel <easyidp.geotiff.geo2pixel>`\\ "
"\\(points\\_hv\\, header\\)"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.pixel2geo <easyidp.geotiff.pixel2geo>`\\ "
"\\(points\\_hv\\, header\\)"
msgstr ""

#: ../../python_api/geotiff.rst:41:<autosummary>:1
msgid ""
":py:obj:`easyidp.geotiff.tifffile_crop <easyidp.geotiff.tifffile_crop>`\\"
" \\(page\\, top\\, ...\\)"
msgstr ""

#: ../../python_api/index.rst:3
msgid "API Summary"
msgstr "API概述"

#: ../../python_api/index.rst:5
msgid "The EasyIDP package have the following modules:"
msgstr "EasyIDP含有下面的几个模块"

#: ../../python_api/index.rst:7
msgid ":doc:`Point cloud Module <./pointcloud>`"
msgstr ":doc:`点云模块 <./pointcloud>`"

#: ../../python_api/index.rst:8
msgid ":doc:`GeoTiff Module <./geotiff>`"
msgstr ":doc:`GeoTiff模块 <./geotiff>`"

#: ../../python_api/index.rst:10
msgid ""
"For each module, consisted by several base functions (e.g. "
"``easyidp.geotiff.*`` ) and an advanced wrapper class for them (e.g. "
"``easyidp.GeoTiff``). In the most cases, please use the upper case class "
"wrapper rather than the lowercase base functions unless you really need "
"them."
msgstr ""
"每一个模块都由一些底层函数(如 ``easyidp.geotiff.*`` )和一个高级封装的类(如 ``easyidp.GeoTiff`` "
")组成。大部分情况下，除非特别需要，请使用大写的高级封装的类而不是小写的底层函数"

#: ../../python_api/index.rst:12
msgid "For example, this function can be used to read geotiff meta infomation:"
msgstr "例如，下面这个函数可以用来读取geotiff的元信息："

#: ../../python_api/index.rst:19
msgid ""
"But it is more recommended use the advanced wrapper in most application "
"cases:"
msgstr "但是大部分情况下更推荐使用高级封装："

#: ../../python_api/index.rst:26
msgid ""
"Although it may seem like more code, advanced wrappers have more "
"convenient functions to use without caring about specific data structure "
"details. Most of our example cases are using the advanced class wrapper."
msgstr "尽管看上去代码数量变多了，但是高级封装有更方便使用的函数，而不用关心具体的数据结构细节。大部分的例子也使用高级封装的类"

#: ../../python_api/pointcloud.rst:3
msgid "Point Cloud"
msgstr "点云"

#: ../../python_api/pointcloud.rst:9
msgid "A summary of class ``PointCloud``"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
msgid ""
":py:obj:`easyidp.PointCloud.has_colors <easyidp.PointCloud.has_colors>`\\"
" \\(\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_colors:1 of
msgid "Returns True if the point cloud contains point colors."
msgstr "如果点云有颜色信息，返回True"

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
msgid ""
":py:obj:`easyidp.PointCloud.has_points <easyidp.PointCloud.has_points>`\\"
" \\(\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_points:1 of
msgid "Returns True if the point cloud contains points."
msgstr "如果点云有点坐标信息，返回True"

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
msgid ""
":py:obj:`easyidp.PointCloud.has_normals "
"<easyidp.PointCloud.has_normals>`\\ \\(\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_normals:1 of
msgid "Returns True if the point cloud contains point normals."
msgstr "如果点云有点法向量信息，返回True"

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
msgid ""
":py:obj:`easyidp.PointCloud.crop_point_cloud "
"<easyidp.PointCloud.crop_point_cloud>`\\ \\(polygon\\_xy\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:18:<autosummary>:1
#: easyidp.pointcloud.PointCloud.crop_point_cloud:1 of
msgid "crop the point cloud along z axis"
msgstr "沿着z轴切点云(竖切)"

#: easyidp.pointcloud.PointCloud:1 of
msgid ""
"PointCloud class. A point cloud consists of point coordinates, and "
"optionally point colors and point normals."
msgstr ""

#: easyidp.pointcloud.PointCloud.crop_point_cloud:3 of
msgid "the polygon xy coords"
msgstr "多边形的xy坐标"

#: easyidp.pointcloud.PointCloud.crop_point_cloud:6 of
msgid "The cropped point cloud"
msgstr "切好的点云"

#: ../../python_api/pointcloud.rst:29
msgid ""
"The ``easyidp.PointCloud`` class is an advanced wrapper around the "
"following functions, which is generally sufficient for most simple "
"application cases, please don't use the following functions unless you "
"really need to."
msgstr ""

#: ../../python_api/pointcloud.rst:35:<autosummary>:1
msgid ""
":py:obj:`easyidp.pointcloud.write_ply <easyidp.pointcloud.write_ply>`\\ "
"\\(points\\, colors\\, ...\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:35:<autosummary>:1
msgid ""
":py:obj:`easyidp.pointcloud.read_las <easyidp.pointcloud.read_las>`\\ "
"\\(las\\_path\\)"
msgstr ""

