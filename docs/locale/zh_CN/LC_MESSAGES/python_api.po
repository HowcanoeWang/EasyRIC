# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Haozhou Wang
# This file is distributed under the same license as the EasyIDP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyIDP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-20 13:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../python_api/autodoc/easyidp.cvtools.imarray_crop.rst:2
msgid "easyidp.cvtools.imarray\\_crop"
msgstr ""

#: ../../python_api/cvtools.rst:20:<autosummary>:1
#: easyidp.cvtools.imarray_crop:1 of
msgid "crop a given ndarray image by given polygon pixel positions"
msgstr ""

#: easyidp.cvtools.imarray_crop easyidp.cvtools.poly2mask
#: easyidp.cvtools.rgb2gray easyidp.data.TestData.__init__
#: easyidp.data.url_checker easyidp.data.user_data_dir
#: easyidp.geotiff.GeoTiff.__init__ easyidp.geotiff.GeoTiff.crop_polygon
#: easyidp.geotiff.GeoTiff.crop_rectangle easyidp.geotiff.GeoTiff.crop_rois
#: easyidp.geotiff.GeoTiff.geo2pixel easyidp.geotiff.GeoTiff.pixel2geo
#: easyidp.geotiff.GeoTiff.point_query easyidp.geotiff.GeoTiff.polygon_math
#: easyidp.geotiff.GeoTiff.read_geotiff easyidp.geotiff.geo2pixel
#: easyidp.geotiff.get_header easyidp.geotiff.get_imarray
#: easyidp.geotiff.pixel2geo easyidp.geotiff.point_query
#: easyidp.geotiff.save_geotiff easyidp.geotiff.tifffile_crop
#: easyidp.geotools.convert_proj easyidp.geotools.convert_proj3d
#: easyidp.geotools.is_single_point easyidp.jsonfile.dict2json
#: easyidp.jsonfile.read_geojson easyidp.jsonfile.read_json
#: easyidp.jsonfile.save_json easyidp.jsonfile.show_geojson_fields
#: easyidp.jsonfile.write_json easyidp.metashape.Metashape.__init__
#: easyidp.metashape.Metashape.back2raw
#: easyidp.metashape.Metashape.back2raw_crs
#: easyidp.metashape.Metashape.change_photo_folder
#: easyidp.metashape.Metashape.get_photo_position
#: easyidp.metashape.Metashape.open_chunk
#: easyidp.metashape.Metashape.open_project
#: easyidp.metashape.Metashape.show_roi_on_img
#: easyidp.metashape.Metashape.sort_img_by_distance
#: easyidp.metashape.apply_transform_matrix easyidp.metashape.read_chunk_zip
#: easyidp.metashape.read_project_zip easyidp.pix4d.Pix4D.__init__
#: easyidp.pix4d.Pix4D.back2raw easyidp.pix4d.Pix4D.back2raw_crs
#: easyidp.pix4d.Pix4D.get_photo_position easyidp.pix4d.Pix4D.load_dom
#: easyidp.pix4d.Pix4D.load_dsm easyidp.pix4d.Pix4D.load_pcd
#: easyidp.pix4d.Pix4D.open_project easyidp.pix4d.Pix4D.show_roi_on_img
#: easyidp.pix4d.Pix4D.sort_img_by_distance
#: easyidp.pix4d.parse_p4d_param_folder easyidp.pix4d.parse_p4d_project
#: easyidp.pix4d.read_cam_ssk easyidp.pix4d.read_campos_geo
#: easyidp.pix4d.read_ccp easyidp.pix4d.read_cicp easyidp.pix4d.read_pmat
#: easyidp.pix4d.read_xyz easyidp.pointcloud.PointCloud.__init__
#: easyidp.pointcloud.PointCloud.crop_point_cloud
#: easyidp.pointcloud.PointCloud.crop_rois
#: easyidp.pointcloud.PointCloud.read_point_cloud
#: easyidp.pointcloud.PointCloud.save
#: easyidp.pointcloud.PointCloud.update_offset_value
#: easyidp.pointcloud.PointCloud.write_point_cloud easyidp.pointcloud.read_las
#: easyidp.pointcloud.read_laz easyidp.pointcloud.read_ply
#: easyidp.pointcloud.write_las easyidp.pointcloud.write_laz
#: easyidp.pointcloud.write_ply easyidp.reconstruct.Calibration.calibrate
#: easyidp.reconstruct.Sensor.in_img_boundary
#: easyidp.reconstruct.save_back2raw_json_and_png
#: easyidp.reconstruct.sort_img_by_distance easyidp.roi.ROI.__init__
#: easyidp.roi.ROI.back2raw easyidp.roi.ROI.change_crs easyidp.roi.ROI.crop
#: easyidp.roi.ROI.get_z_from_dsm easyidp.roi.ROI.open
#: easyidp.roi.ROI.read_geojson easyidp.roi.ROI.read_labelme_json
#: easyidp.roi.ROI.read_shp easyidp.roi.read_cc_txt easyidp.shp.read_proj
#: easyidp.shp.read_shp easyidp.shp.show_shp_fields
#: easyidp.visualize.draw_backward_one_roi
#: easyidp.visualize.draw_polygon_on_img of
msgid "参数"
msgstr ""

#: easyidp.cvtools.imarray_crop:3 of
msgid ""
"| the image data in numpy ndarray | if the shape is (height, width), view"
" it as DSM data, the data type should be float. | if the shape is "
"(height, width, dimen), view it as RGB DOM data (dimen=3 means RGB and "
"dimen=4 means RGBA). |     the data type for this case should be either "
"0-1 float, or 0-255 int.  .. caution::      Currently, the EasyIDP "
"package does not have the ability to handle multi-spectral image data "
"directly.     If you really want to use this function to crop multi-"
"spectral image with multiple layers, please send each layer one by one."
"      For example, you have a multi-spectral imarray with 6 bands:      "
".. code-block:: python          >>> multi_spect_imarray.shape         "
"(1028, 800, 6)      Then using the following for loops to iteratively "
"process each band     (please modify it by yourself, can not guarantee it"
" works directly)      .. code-block:: python          >>> band_container "
"= []         >>> for i in range(0, 6):         >>>     band = "
"multi_spect_imarray[:,:,i]         >>>     out, offset = "
"idp.cvtools.imarray_crop(band, polygon_hv, "
"outside_value=your_geotiff.header['nodata'])         >>>     "
"band_container.append(out)         >>> final_out = "
"np.dstack(band_container)"
msgstr ""

#: easyidp.cvtools.imarray_crop of
msgid "the image data in numpy ndarray"
msgstr "numpy ndarray 中的图像数据"

#: easyidp.cvtools.imarray_crop of
msgid ""
"if the shape is (height, width), view it as DSM data, the data type "
"should be float."
msgstr ""
"如果形状是 (高度, 宽度)，将其视为 DSM 数据，数据类型应为 float。"

#: easyidp.cvtools.imarray_crop of
msgid ""
"if the shape is (height, width, dimen), view it as RGB DOM data (dimen=3 "
"means RGB and dimen=4 means RGBA)."
msgstr ""
"如果形状是 (高度, 宽度, 维度)，将其视为 RGB DOM 数据（维度=3 表示 RGB，维度=4 表示 RGBA）。"

#: easyidp.cvtools.imarray_crop of
msgid "the data type for this case should be either 0-1 float, or 0-255 int."
msgstr "这种情况下的数据类型应为 0-1 的 float 或 0-255 的 int。"

#: easyidp.cvtools.imarray_crop:10 of
msgid ""
"Currently, the EasyIDP package does not have the ability to handle multi-"
"spectral image data directly. If you really want to use this function to "
"crop multi-spectral image with multiple layers, please send each layer "
"one by one."
msgstr ""
"目前，EasyIDP 包不具备直接处理多光谱图像数据的能力。如果您确实想使用此功能裁剪具有多层的多光谱图像，请逐层发送。"

#: easyidp.cvtools.imarray_crop:13 of
msgid "For example, you have a multi-spectral imarray with 6 bands:"
msgstr "例如，您有一个具有 6 个波段的多光谱 imarray："

#: easyidp.cvtools.imarray_crop:20 of
msgid ""
"Then using the following for loops to iteratively process each band "
"(please modify it by yourself, can not guarantee it works directly)"
msgstr ""
"然后使用以下 for 循环迭代处理每个波段（请自行修改，不能保证它能直接工作）"

#: easyidp.cvtools.imarray_crop:32 of
msgid ""
"| pixel position of boundary point, the order is (horizontal, vertical)  "
".. caution::      it is reverted to the numpy imarray axis.     horzontal"
" = numpy axis 1, vertical = numpy axis 0."
msgstr ""
"| 边界点的像素位置，顺序为（水平，垂直） .. 注意:: 它是 numpy imarray 轴的反转。水平 = numpy 轴 1，垂直 = numpy 轴 0。"

#: easyidp.cvtools.imarray_crop of
msgid "pixel position of boundary point, the order is (horizontal, vertical)"
msgstr "边界点的像素位置，顺序为（水平，垂直）"

#: easyidp.cvtools.imarray_crop:36 of
msgid ""
"it is reverted to the numpy imarray axis. horzontal = numpy axis 1, "
"vertical = numpy axis 0."
msgstr "它是 numpy imarray 轴的反转。水平 = numpy 轴 1，垂直 = numpy 轴 0。"

#: easyidp.cvtools.imarray_crop:39 of
msgid ""
"| specify exact value outside the polgyon, default 0. | But for some DSM "
"geotiff, it could be -10000.0, depends on the geotiff meta infomation"
msgstr ""
"| 指定多边形外的确切值，默认 0。 | 但对于某些 DSM geotiff，可能是 -10000.0，这取决于 geotiff 元信息"

#: easyidp.cvtools.imarray_crop of
msgid "specify exact value outside the polgyon, default 0."
msgstr "指定多边形外的确切值，默认 0。"

#: easyidp.cvtools.imarray_crop of
msgid ""
"But for some DSM geotiff, it could be -10000.0, depends on the geotiff "
"meta infomation"
msgstr ""
"但对于某些 DSM geotiff，可能是 -10000.0，这取决于 geotiff 元信息"

#: easyidp.cvtools.imarray_crop easyidp.cvtools.poly2mask
#: easyidp.cvtools.rgb2gray easyidp.data.user_data_dir
#: easyidp.geotiff.GeoTiff.crop_polygon easyidp.geotiff.GeoTiff.crop_rectangle
#: easyidp.geotiff.GeoTiff.crop_rois easyidp.geotiff.GeoTiff.point_query
#: easyidp.geotiff.geo2pixel easyidp.geotiff.get_header
#: easyidp.geotiff.get_imarray easyidp.geotiff.point_query
#: easyidp.geotiff.tifffile_crop easyidp.geotools.is_single_point
#: easyidp.jsonfile.read_geojson easyidp.metashape.Metashape.back2raw_crs
#: easyidp.metashape.Metashape.get_photo_position
#: easyidp.metashape.Metashape.sort_img_by_distance
#: easyidp.metashape.apply_transform_matrix easyidp.metashape.read_project_zip
#: easyidp.pix4d.Pix4D.back2raw_crs easyidp.pix4d.Pix4D.get_photo_position
#: easyidp.pix4d.Pix4D.sort_img_by_distance
#: easyidp.pix4d.parse_p4d_param_folder easyidp.pix4d.parse_p4d_project
#: easyidp.pix4d.read_cam_ssk easyidp.pix4d.read_campos_geo
#: easyidp.pix4d.read_ccp easyidp.pix4d.read_cicp easyidp.pix4d.read_pmat
#: easyidp.pix4d.read_xyz easyidp.pointcloud.read_las
#: easyidp.pointcloud.read_laz easyidp.pointcloud.read_ply
#: easyidp.reconstruct.Calibration.calibrate
#: easyidp.reconstruct.sort_img_by_distance easyidp.roi.ROI.back2raw
#: easyidp.roi.ROI.crop easyidp.shp.read_shp of
msgid "返回"
msgstr ""

#: easyidp.cvtools.imarray_crop:43 of
msgid ""
"* **imarray_out** (*ndarray*) -- the (m,n,d) ndrray to store pixel info *"
" **roi_top_left_offset** (*ndarray*) -- the (h, v) pixel index that "
"represent the polygon bbox left top corner"
msgstr ""
"* **imarray_out** (*ndarray*) -- 用于存储像素信息的 (m,n,d) ndrray *"
" **roi_top_left_offset** (*ndarray*) -- 表示多边形 bbox 左上角的 (h, v) 像素索引"

#: easyidp.cvtools.imarray_crop:43 of
msgid "**imarray_out** (*ndarray*) -- the (m,n,d) ndrray to store pixel info"
msgstr "**imarray_out** (*ndarray*) -- 用于存储像素信息的 (m,n,d) ndrray"

#: easyidp.cvtools.imarray_crop:44 of
msgid ""
"**roi_top_left_offset** (*ndarray*) -- the (h, v) pixel index that "
"represent the polygon bbox left top corner"
msgstr "**roi_top_left_offset** (*ndarray*) -- 表示多边形 bbox 左上角的 (h, v) 像素索引"

#: ../../python_api/autodoc/easyidp.cvtools.poly2mask.rst:2
msgid "easyidp.cvtools.poly2mask"
msgstr "easyidp.cvtools.poly2mask"

#: ../../python_api/cvtools.rst:20:<autosummary>:1 easyidp.cvtools.poly2mask:1
#: of
msgid "convert vector polygon to raster masks"
msgstr "将矢量多边形转换为栅格掩膜"

#: easyidp.cvtools.poly2mask:3 of
msgid ""
".. caution::     it is reversed with numpy index order  (horizontal, "
"vertical) = (width, height)"
msgstr ""
".. 注意:: 它与 numpy 索引顺序相反 (水平, 垂直) = (宽度, 高度)"

#: easyidp.cvtools.poly2mask:5 of
msgid "it is reversed with numpy index order"
msgstr "它与 numpy 索引顺序相反"

#: easyidp.cvtools.poly2mask:7 easyidp.cvtools.poly2mask:13 of
msgid "(horizontal, vertical) = (width, height)"
msgstr "(水平, 垂直) = (宽度, 高度)"

#: easyidp.cvtools.poly2mask:9 of
msgid ""
".. caution::     The xy is reversed with numpy index order      "
"(horizontal, vertical) = (width, height)"
msgstr ""
".. 注意:: xy 与 numpy 索引顺序相反 (水平, 垂直) = (宽度, 高度)"

#: easyidp.cvtools.poly2mask:11 of
msgid "The xy is reversed with numpy index order"
msgstr "xy 与 numpy 索引顺序相反"

#: easyidp.cvtools.poly2mask:15 of
msgid ""
"| \"skimage\" or \"shapely\"; the \"pillow\" has been deprecated; | "
"skimage - ``skimage.draw.polygon2mask``, the default method; | pillow is "
"slight different than \"skimage\", deprecated; | shapely is almost the "
"same with \"skiamge\", but effiency is very slow, not recommended."
msgstr ""
"| \"skimage\" 或 \"shapely\"; \"pillow\" 已被弃用; | "
"skimage - ``skimage.draw.polygon2mask``，默认方法; | pillow 与 \"skimage\" 略有不同，已弃用; | "
"shapely 与 \"skimage\" 几乎相同，但效率非常慢，不推荐使用。"

#: easyidp.cvtools.poly2mask of
msgid "\"skimage\" or \"shapely\"; the \"pillow\" has been deprecated;"
msgstr "\"skimage\" 或 \"shapely\"; \"pillow\" 已被弃用;"

#: easyidp.cvtools.poly2mask of
msgid "skimage - ``skimage.draw.polygon2mask``, the default method;"
msgstr "skimage - ``skimage.draw.polygon2mask``，默认方法;"

#: easyidp.cvtools.poly2mask of
msgid "pillow is slight different than \"skimage\", deprecated;"
msgstr "pillow 与 \"skimage\" 略有不同，已弃用;"

#: easyidp.cvtools.poly2mask of
msgid ""
"shapely is almost the same with \"skiamge\", but effiency is very slow, "
"not recommended."
msgstr ""
"shapely 与 \"skimage\" 几乎相同，但效率非常慢，不推荐使用。"

#: easyidp.cvtools.poly2mask:21 of
msgid "**mask** -- the generated binary mask"
msgstr "**mask** -- 生成的二进制掩膜"


#: easyidp.cvtools.poly2mask easyidp.cvtools.rgb2gray
#: easyidp.data.user_data_dir easyidp.geotiff.GeoTiff.crop_polygon
#: easyidp.geotiff.GeoTiff.crop_rectangle easyidp.geotiff.GeoTiff.crop_rois
#: easyidp.geotiff.GeoTiff.geo2pixel easyidp.geotiff.GeoTiff.has_data
#: easyidp.geotiff.GeoTiff.pixel2geo easyidp.geotiff.GeoTiff.point_query
#: easyidp.geotiff.geo2pixel easyidp.geotiff.get_header
#: easyidp.geotiff.get_imarray easyidp.geotiff.pixel2geo
#: easyidp.geotiff.point_query easyidp.geotiff.tifffile_crop
#: easyidp.geotools.convert_proj3d easyidp.geotools.is_single_point
#: easyidp.jsonfile.read_json easyidp.metashape.Metashape.back2raw_crs
#: easyidp.metashape.Metashape.get_photo_position
#: easyidp.metashape.Metashape.sort_img_by_distance
#: easyidp.metashape.apply_transform_matrix easyidp.metashape.read_chunk_zip
#: easyidp.metashape.read_project_zip easyidp.pix4d.Pix4D.back2raw_crs
#: easyidp.pix4d.Pix4D.get_photo_position
#: easyidp.pix4d.Pix4D.sort_img_by_distance
#: easyidp.pix4d.parse_p4d_param_folder easyidp.pix4d.parse_p4d_project
#: easyidp.pix4d.read_cam_ssk easyidp.pix4d.read_campos_geo
#: easyidp.pix4d.read_ccp easyidp.pix4d.read_cicp easyidp.pix4d.read_pmat
#: easyidp.pix4d.read_xyz easyidp.pointcloud.PointCloud.crop_point_cloud
#: easyidp.pointcloud.PointCloud.crop_rois
#: easyidp.pointcloud.PointCloud.has_colors
#: easyidp.pointcloud.PointCloud.has_normals
#: easyidp.pointcloud.PointCloud.has_points easyidp.pointcloud.read_las
#: easyidp.pointcloud.read_laz easyidp.pointcloud.read_ply
#: easyidp.reconstruct.Calibration.calibrate
#: easyidp.reconstruct.Sensor.in_img_boundary
#: easyidp.reconstruct.sort_img_by_distance easyidp.roi.ROI.back2raw
#: easyidp.roi.ROI.crop easyidp.roi.ROI.is_geo easyidp.shp.read_proj of
msgid "返回类型"
msgstr ""

#: easyidp.cvtools.poly2mask:25 easyidp.cvtools.rgb2gray:10
#: easyidp.data.show_data_dir:4 easyidp.data.user_data_dir:10
#: easyidp.geotiff.GeoTiff.polygon_math:11 easyidp.geotiff.geo2pixel:15
#: easyidp.geotiff.tifffile_crop:39 easyidp.geotools.convert_proj3d:16
#: easyidp.metashape.read_chunk_zip:17 easyidp.metashape.read_project_zip:12
#: easyidp.pix4d.parse_p4d_project:35 easyidp.pix4d.read_campos_geo:18
#: easyidp.pix4d.read_ccp:26 easyidp.pix4d.read_cicp:15
#: easyidp.pointcloud.write_las:51 easyidp.pointcloud.write_laz:51
#: easyidp.pointcloud.write_ply:51 easyidp.roi.ROI.open:34
#: easyidp.roi.ROI.read_geojson:55 easyidp.roi.ROI.read_shp:61 of
msgid "备注"
msgstr ""

#: easyidp.cvtools.poly2mask:26 of
msgid "This code is inspired from [1]_ ."
msgstr "此代码受 [1]_ 启发。"

#: easyidp.cvtools.poly2mask:28 of
msgid ""
"And for the poly_coord, if using **shapely** engine, it will following "
"this logic for int and float:"
msgstr ""
"对于 poly_coord，如果使用 **shapely** 引擎，它将遵循以下整数和浮点数的逻辑："

#: easyidp.cvtools.poly2mask:30 of
msgid "If dtype is int -> view coord as pixel index number"
msgstr "如果数据类型是 int -> 将坐标视为像素索引号"

#: easyidp.cvtools.poly2mask:31 of
msgid "Will + 0.5 to coords (pixel center) as judge point"
msgstr "将 + 0.5 到坐标（像素中心）作为判断点"

#: easyidp.cvtools.poly2mask:33 of
msgid "if dtype is float -> view coords as real coord"
msgstr "如果数据类型是 float -> 将坐标视为真实坐标"

#: easyidp.cvtools.poly2mask:33 of
msgid "(0,0) will be the left upper corner of pixel square"
msgstr "(0,0) 将是像素方块的左上角"

#: easyidp.cvtools.poly2mask:35 easyidp.cvtools.rgb2gray:13
#: easyidp.data.show_data_dir:7 easyidp.data.url_checker:8
#: easyidp.data.user_data_dir:23 easyidp.geotiff.tifffile_crop:44
#: easyidp.pix4d.parse_p4d_param_folder:49 easyidp.pointcloud.write_ply:78
#: easyidp.reconstruct.Calibration.calibrate:18 of
msgid "引用"
msgstr "引用"

#: easyidp.cvtools.poly2mask:37 of
msgid ""
"https://stackoverflow.com/questions/62280398/checking-if-a-point-is-"
"contained-in-a-polygon-multipolygon-for-many-points"
msgstr ""
"https://stackoverflow.com/questions/62280398/checking-if-a-point-is-"
"contained-in-a-polygon-multipolygon-for-many-points"

#: ../../python_api/autodoc/easyidp.cvtools.rgb2gray.rst:2
msgid "easyidp.cvtools.rgb2gray"
msgstr "easyidp.cvtools.rgb2gray"

#: ../../python_api/cvtools.rst:20:<autosummary>:1 easyidp.cvtools.rgb2gray:1
#: of
msgid "Transform the RGB image to gray image"
msgstr "将 RGB 图像转换为灰度图像"

#: easyidp.cvtools.rgb2gray:3 of
msgid "The RGB ndarray image need to be converted"
msgstr "需要转换的 RGB ndarray 图像"

#: easyidp.cvtools.rgb2gray:6 of
msgid "**gray** -- The output 2D ndarray after convension"
msgstr "**gray** -- 转换后的输出 2D ndarray"

#: easyidp.cvtools.rgb2gray:11 of
msgid "Using the same formular that matplotlib did [1]_ for the transformation."
msgstr "使用与 matplotlib 相同的公式进行转换 [1]_ 。"

#: easyidp.cvtools.rgb2gray:15 of
msgid ""
"https://stackoverflow.com/questions/12201577/how-can-i-convert-an-rgb-"
"image-into-grayscale-in-python"
msgstr ""
"https://stackoverflow.com/questions/12201577/how-can-i-convert-an-rgb-"
"image-into-grayscale-in-python"

#: ../../python_api/autodoc/easyidp.data.EasyidpDataSet.rst:2
msgid "easyidp.data.EasyidpDataSet"
msgstr "easyidp.data.EasyidpDataSet"

#: ../../python_api/data.rst:74:<autosummary>:1 easyidp.data.EasyidpDataSet:1
#: of
msgid "The base class for Dataset"
msgstr "数据集的基类"


#: easyidp.data.EasyidpDataSet.__init__:1
#: easyidp.data.EasyidpDataSet.load_data:1:<autosummary>:1 of
msgid "The dataset has the following properties (almost in string type)"
msgstr "数据集有着如下的内容(几乎都为字符串)"

#: easyidp.data.EasyidpDataSet.__init__:3 of
msgid "name"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:4 of
msgid "The dataset name"
msgstr "数据集名字"

#: easyidp.data.EasyidpDataSet.__init__:5 of
msgid "gdrive_url"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:6 of
#, fuzzy
msgid "The google drive download urls"
msgstr "可用的下载链接"

#: easyidp.data.EasyidpDataSet.__init__:7 of
msgid "size"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:8 of
msgid "Ths size of zipped file"
msgstr "压缩文件大小"

#: easyidp.data.EasyidpDataSet.__init__:9 of
msgid "data_dir"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:10 of
msgid "The final dataset directory"
msgstr "最终的数据集路径"

#: easyidp.data.EasyidpDataSet.__init__:11 of
msgid "zip_file"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:12 of
msgid "The *temporary* downloaded zip file path (won't be used in)"
msgstr "临时下载的压缩文件路径(不会被使用到)"

#: easyidp.data.EasyidpDataSet.__init__:13 of
msgid "shp"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:14 of
msgid "The path to plot ROI shapefile (\\*.shp)"
msgstr "兴趣区域(ROI)的shapefile(\\*.shp)文件路径"

#: easyidp.data.EasyidpDataSet.__init__:16 of
msgid "photo"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:16 of
msgid "The folder path to the raw photos"
msgstr "原始照片的文件夹路径"

#: easyidp.data.EasyidpDataSet.__init__:18 of
msgid "pix4d.proj"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:19 of
msgid "The pix4d project folder"
msgstr "Pix4d项目文件夹路径"

#: easyidp.data.EasyidpDataSet.__init__:20 of
msgid "pix4d.param"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:21 of
msgid "The parameter folder of pix4d porject"
msgstr "Pix4D项目的参数文件夹路径"

#: easyidp.data.EasyidpDataSet.__init__:22 of
msgid "pix4d.dom"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:23
#: easyidp.data.EasyidpDataSet.__init__:34 of
msgid "The generated DOM path of plot map"
msgstr "生成的样地DOM地图"

#: easyidp.data.EasyidpDataSet.__init__:24 of
msgid "pix4d.dsm"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:25
#: easyidp.data.EasyidpDataSet.__init__:36 of
msgid "The generated DSM path of plot map"
msgstr "生成的样地DSM地图"

#: easyidp.data.EasyidpDataSet.__init__:27 of
msgid "pix4d.pcd"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:27
#: easyidp.data.EasyidpDataSet.__init__:38 of
msgid "The generated pointcloud path of plot map"
msgstr "生成的样地点云路径"

#: easyidp.data.EasyidpDataSet.__init__:29 of
msgid "metashape.proj"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:30 of
msgid "The metashape project file"
msgstr "Metashape项目文件路径"

#: easyidp.data.EasyidpDataSet.__init__:31 of
msgid "metashape.param"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:32 of
msgid "The parameter folder of metashape porject"
msgstr "Metashape项目的参数文件夹路径"

#: easyidp.data.EasyidpDataSet.__init__:33 of
msgid "metashape.dom"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:35 of
msgid "metashape.dsm"
msgstr ""

#: easyidp.data.EasyidpDataSet.__init__:37 of
msgid "metashape.pcd"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.EasyidpDataSet.rst:13
#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:13
#: ../../python_api/autodoc/easyidp.data.Lotus.rst:13
#: ../../python_api/autodoc/easyidp.data.TestData.rst:13
#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:13
#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:13
#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:13
#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:13
#: ../../python_api/autodoc/easyidp.reconstruct.Calibration.rst:13
#: ../../python_api/autodoc/easyidp.reconstruct.ChunkTransform.rst:13
#: ../../python_api/autodoc/easyidp.reconstruct.Photo.rst:13
#: ../../python_api/autodoc/easyidp.reconstruct.Recons.rst:13
#: ../../python_api/autodoc/easyidp.reconstruct.Sensor.rst:13
#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:13
msgid "Methods"
msgstr ""

#: easyidp.data.EasyidpDataSet.load_data:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <easyidp.data.EasyidpDataSet.__init__>`\\ \\(\\[name\\,"
" gdrive\\_url\\, size\\]\\)"
msgstr ""

#: easyidp.data.EasyidpDataSet.load_data:1:<autosummary>:1 of
msgid ":py:obj:`load_data <easyidp.data.EasyidpDataSet.load_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:24:<autosummary>:1
#: ../../python_api/autodoc/easyidp.data.Lotus.rst:24:<autosummary>:1
#: ../../python_api/autodoc/easyidp.data.TestData.rst:24:<autosummary>:1
#: easyidp.data.EasyidpDataSet.load_data:1
#: easyidp.data.EasyidpDataSet.load_data:1:<autosummary>:1 of
msgid "Download dataset from Google Drive to user AppData folder"
msgstr "从谷歌云盘中下载数据集到AppData文件夹"

#: easyidp.data.EasyidpDataSet.load_data:1:<autosummary>:1 of
msgid ":py:obj:`reload_data <easyidp.data.EasyidpDataSet.reload_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:24:<autosummary>:1
#: ../../python_api/autodoc/easyidp.data.Lotus.rst:24:<autosummary>:1
#: ../../python_api/autodoc/easyidp.data.TestData.rst:24:<autosummary>:1
#: easyidp.data.EasyidpDataSet.load_data:1:<autosummary>:1
#: easyidp.data.EasyidpDataSet.reload_data:1 of
msgid "remove local data and redownload again"
msgstr "删除本地数据并重新下载"

#: easyidp.data.EasyidpDataSet.load_data:1:<autosummary>:1 of
msgid ":py:obj:`remove_data <easyidp.data.EasyidpDataSet.remove_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:24:<autosummary>:1
#: ../../python_api/autodoc/easyidp.data.Lotus.rst:24:<autosummary>:1
#: ../../python_api/autodoc/easyidp.data.TestData.rst:24:<autosummary>:1
#: easyidp.data.EasyidpDataSet.load_data:1:<autosummary>:1
#: easyidp.data.EasyidpDataSet.remove_data:1 of
msgid "remove local cached data file"
msgstr "删除本地缓存的数据文件"

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:2
msgid "easyidp.data.ForestBirds"
msgstr ""

#: ../../python_api/data.rst:17:<autosummary>:1 easyidp.data.ForestBirds:1 of
msgid ""
"The dataset for forest ecology survey, provided by the University of "
"Florida."
msgstr "由佛罗里达大学提供的森林生态调查数据集。"

#: easyidp.data.ForestBirds:-1 of
msgid "2022_florida_forestbird.png"
msgstr ""

#: easyidp.data.ForestBirds:7 of
msgid "**Author**: Prof. Ben Weinstein, The University of Florida."
msgstr "**作者**：佛罗里达大学 Ben Weinstein 教授。"

#: easyidp.data.ForestBirds:8 of
#, fuzzy
msgid "**Location** : Florida, US"
msgstr "**作物** : 荷花"

#: easyidp.data.ForestBirds:9 of
#, fuzzy
msgid "**Flight date** : March 24, 2022"
msgstr "**飞行日期** : 2017年5月31日"

#: easyidp.data.ForestBirds:10 of
#, fuzzy
msgid "**UAV model** : DJI FC6540"
msgstr "**无人机型号** : 大疆悟1"

#: easyidp.data.ForestBirds:11 of
#, fuzzy
msgid "**Flight height** : ?? m"
msgstr "**飞行高度** : 30米"

#: easyidp.data.ForestBirds:12 of
#, fuzzy
msgid "**Image number** :93"
msgstr "**图片数量** :142张"

#: easyidp.data.ForestBirds:13 of
#, fuzzy
msgid "**Image size** : 6016 x 4008"
msgstr "**图片尺寸** : 4608 x 3456(像素)"

#: easyidp.data.ForestBirds:14 of
#, fuzzy
msgid "**Software** : Metashape"
msgstr "**处理软件** : Pix4D, Metashape"

#: easyidp.data.ForestBirds:15 easyidp.data.Lotus:15 of
msgid "**Outputs** : DOM, DSM, PCD"
msgstr "**输出** : DOM, DSM, PCD"

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:24:<autosummary>:1
#: ../../python_api/autodoc/easyidp.data.Lotus.rst:24:<autosummary>:1
#: ../../python_api/autodoc/easyidp.data.TestData.rst:24:<autosummary>:1
#: easyidp.data.ForestBirds.__init__:1 easyidp.data.Lotus.__init__:1
#: easyidp.data.TestData.__init__:1 of
msgid "Containts the following arguments, you can access by:"
msgstr "包含以下参数，您可以通过以下方式访问："

#: easyidp.data.ForestBirds.__init__:9 easyidp.data.Lotus.__init__:9 of
msgid "``.photo`` : the folder containts raw images"
msgstr ""

#: easyidp.data.ForestBirds.__init__:10 easyidp.data.Lotus.__init__:10 of
#, fuzzy
msgid "``.shp`` : the plot roi shapefile"
msgstr "兴趣区域(ROI)的shapefile(\\*.shp)文件路径"

#: easyidp.data.ForestBirds.__init__:11 easyidp.data.Lotus.__init__:16 of
#, fuzzy
msgid "``.metashape.project`` : the metashape project file"
msgstr "Metashape项目文件路径"

#: easyidp.data.ForestBirds.__init__:12 easyidp.data.Lotus.__init__:17 of
#, fuzzy
msgid "``.metashape.param`` : the metashape project folder"
msgstr "Metashape项目文件路径"

#: easyidp.data.ForestBirds.__init__:13 easyidp.data.Lotus.__init__:18 of
msgid "``.metashape.dom`` : the metashape produced orthomosaic"
msgstr ""

#: easyidp.data.ForestBirds.__init__:14 easyidp.data.Lotus.__init__:20 of
msgid "``.metashape.dsm`` : the metashape produced digial surface model"
msgstr ""

#: easyidp.data.ForestBirds.__init__:16 easyidp.data.Lotus.__init__:22
#: easyidp.data.TestData.__init__:95 of
msgid ":obj:`EasyidpDataSet`"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:24:<autosummary>:1
msgid ":py:obj:`__init__ <easyidp.data.ForestBirds.__init__>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:24:<autosummary>:1
msgid ":py:obj:`load_data <easyidp.data.ForestBirds.load_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:24:<autosummary>:1
msgid ":py:obj:`reload_data <easyidp.data.ForestBirds.reload_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:24:<autosummary>:1
msgid ":py:obj:`remove_data <easyidp.data.ForestBirds.remove_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:26
#: ../../python_api/autodoc/easyidp.data.Lotus.rst:26
#: ../../python_api/autodoc/easyidp.data.TestData.rst:26
#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:32
#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:32
#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:32
#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:33
#: ../../python_api/autodoc/easyidp.reconstruct.Calibration.rst:24
#: ../../python_api/autodoc/easyidp.reconstruct.ChunkTransform.rst:23
#: ../../python_api/autodoc/easyidp.reconstruct.Photo.rst:23
#: ../../python_api/autodoc/easyidp.reconstruct.Recons.rst:23
#: ../../python_api/autodoc/easyidp.reconstruct.Sensor.rst:24
#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:29
msgid "Attributes"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:31:<autosummary>:1
msgid ":py:obj:`gdrive_url <easyidp.data.ForestBirds.gdrive_url>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:31:<autosummary>:1
msgid ":py:obj:`name <easyidp.data.ForestBirds.name>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.ForestBirds.rst:31:<autosummary>:1
msgid ":py:obj:`size <easyidp.data.ForestBirds.size>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.Lotus.rst:2
msgid "easyidp.data.Lotus"
msgstr ""

#: ../../python_api/data.rst:17:<autosummary>:1 easyidp.data.Lotus:1 of
msgid "The dataset for lotus plot in Tanashi, Tokyo."
msgstr "东京田无的荷花数据集。"

#: easyidp.data.Lotus:-1 of
msgid "2017_tanashi_lotus.png"
msgstr ""

#: easyidp.data.Lotus:7 of
msgid "**Crop** : lotus"
msgstr "**作物** : 荷花"

#: easyidp.data.Lotus:8 of
msgid "**Location** : Tanashi, Nishi-Tokyo, Japan"
msgstr "**地点** : 日本西东京市田无"

#: easyidp.data.Lotus:9 of
msgid "**Flight date** : May 31, 2017"
msgstr "**飞行日期** : 2017年5月31日"

#: easyidp.data.Lotus:10 of
msgid "**UAV model** : DJI Inspire 1"
msgstr "**无人机型号** : 大疆悟1"

#: easyidp.data.Lotus:11 of
msgid "**Flight height** : 30m"
msgstr "**飞行高度** : 30米"

#: easyidp.data.Lotus:12 of
msgid "**Image number** :142"
msgstr "**图片数量** :142张"

#: easyidp.data.Lotus:13 of
msgid "**Image size** : 4608 x 3456"
msgstr "**图片尺寸** : 4608 x 3456(像素)"

#: easyidp.data.Lotus:14 of
msgid "**Software** : Pix4D, Metashape"
msgstr "**处理软件** : Pix4D, Metashape"

#: easyidp.data.Lotus.__init__:11 of
#, fuzzy
msgid "``.pix4d.project`` : the pix4d project folder"
msgstr "Pix4d项目文件夹路径"

#: easyidp.data.Lotus.__init__:12 of
#, fuzzy
msgid "``.pix4d.param`` : the pix4d project parameter folder"
msgstr "Pix4d项目文件夹路径"

#: easyidp.data.Lotus.__init__:13 of
msgid "``.pix4d.dom`` : the pix4d produced orthomosaic"
msgstr ""

#: easyidp.data.Lotus.__init__:14 of
msgid "``.pix4d.dsm`` : the pix4d produced digial surface del"
msgstr ""

#: easyidp.data.Lotus.__init__:15 of
msgid "``.pix4d.pcd`` : the pix4d produced point cloud"
msgstr ""

#: easyidp.data.Lotus.__init__:19 of
msgid "``.metashape.pcd`` : the metashape produced point cloud"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.Lotus.rst:24:<autosummary>:1
msgid ":py:obj:`__init__ <easyidp.data.Lotus.__init__>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.Lotus.rst:24:<autosummary>:1
msgid ":py:obj:`load_data <easyidp.data.Lotus.load_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.Lotus.rst:24:<autosummary>:1
msgid ":py:obj:`reload_data <easyidp.data.Lotus.reload_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.Lotus.rst:24:<autosummary>:1
msgid ":py:obj:`remove_data <easyidp.data.Lotus.remove_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.Lotus.rst:31:<autosummary>:1
msgid ":py:obj:`gdrive_url <easyidp.data.Lotus.gdrive_url>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.Lotus.rst:31:<autosummary>:1
msgid ":py:obj:`name <easyidp.data.Lotus.name>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.Lotus.rst:31:<autosummary>:1
msgid ":py:obj:`size <easyidp.data.Lotus.size>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.TestData.rst:2
msgid "easyidp.data.TestData"
msgstr ""

#: ../../python_api/data.rst:74:<autosummary>:1 easyidp.data.TestData:1 of
msgid "The data for developer and package testing."
msgstr ""

#: easyidp.data.TestData.__init__:3 of
msgid "**json test module**"
msgstr ""

#: easyidp.data.TestData.__init__:5 of
msgid "``.json.for_read_json``"
msgstr ""

#: easyidp.data.TestData.__init__:6 of
msgid "``.json.labelme_demo``"
msgstr ""

#: easyidp.data.TestData.__init__:7 of
msgid "``.json.labelme_warn``"
msgstr ""

#: easyidp.data.TestData.__init__:8 of
msgid "``.json.labelme_err``"
msgstr ""

#: easyidp.data.TestData.__init__:10 of
msgid "**shp test module**"
msgstr ""

#: easyidp.data.TestData.__init__:12 of
msgid "``.shp.lotus_shp``"
msgstr ""

#: easyidp.data.TestData.__init__:13 of
msgid "``.shp.lotus_prj``"
msgstr ""

#: easyidp.data.TestData.__init__:14 of
msgid "``.shp.complex_shp``"
msgstr ""

#: easyidp.data.TestData.__init__:15 of
msgid "``.shp.complex_prj``"
msgstr ""

#: easyidp.data.TestData.__init__:16 of
msgid "``.shp.lonlat_shp``"
msgstr ""

#: easyidp.data.TestData.__init__:17 of
msgid "``.shp.utm53n_shp``"
msgstr ""

#: easyidp.data.TestData.__init__:18 of
msgid "``.shp.utm53n_prj``"
msgstr ""

#: easyidp.data.TestData.__init__:19 of
msgid "``.shp.rice_shp``"
msgstr ""

#: easyidp.data.TestData.__init__:20 of
msgid "``.shp.rice_prj``"
msgstr ""

#: easyidp.data.TestData.__init__:21 of
msgid "``.shp.roi_shp``"
msgstr ""

#: easyidp.data.TestData.__init__:22 of
msgid "``.shp.roi_prj``"
msgstr ""

#: easyidp.data.TestData.__init__:23 of
msgid "``.shp.testutm_shp``"
msgstr ""

#: easyidp.data.TestData.__init__:24 of
msgid "``.shp.testutm_prj``"
msgstr ""

#: easyidp.data.TestData.__init__:26 of
msgid "**pcd test module**"
msgstr ""

#: easyidp.data.TestData.__init__:28 of
msgid "``.pcd.lotus_las``"
msgstr ""

#: easyidp.data.TestData.__init__:29 of
msgid "``.pcd.lotus_laz``"
msgstr ""

#: easyidp.data.TestData.__init__:30 of
msgid "``.pcd.lotus_pcd``"
msgstr ""

#: easyidp.data.TestData.__init__:31 of
msgid "``.pcd.lotus_las13``"
msgstr ""

#: easyidp.data.TestData.__init__:32 of
msgid "``.pcd.lotus_laz13``"
msgstr ""

#: easyidp.data.TestData.__init__:33 of
msgid "``.pcd.lotus_ply_asc``"
msgstr ""

#: easyidp.data.TestData.__init__:34 of
msgid "``.pcd.lotus_ply_bin``"
msgstr ""

#: easyidp.data.TestData.__init__:35 of
msgid "``.pcd.maize_las``"
msgstr ""

#: easyidp.data.TestData.__init__:36 of
msgid "``.pcd.maize_laz``"
msgstr ""

#: easyidp.data.TestData.__init__:37 of
msgid "``.pcd.maize_ply``"
msgstr ""

#: easyidp.data.TestData.__init__:39 of
msgid "**roi test module**"
msgstr ""

#: easyidp.data.TestData.__init__:41 of
msgid "``.roi.dxf``"
msgstr ""

#: easyidp.data.TestData.__init__:42 of
msgid "``.roi.lxyz_txt``"
msgstr ""

#: easyidp.data.TestData.__init__:43 of
msgid "``.roi.xyz_txt``"
msgstr ""

#: easyidp.data.TestData.__init__:45 of
msgid "**geotiff test module**"
msgstr ""

#: easyidp.data.TestData.__init__:47 of
msgid "``.tiff.soyweed_part``"
msgstr ""

#: easyidp.data.TestData.__init__:48 of
msgid "``.tiff.out``"
msgstr ""

#: easyidp.data.TestData.__init__:50 of
msgid "**metashape test module**"
msgstr ""

#: easyidp.data.TestData.__init__:52 of
msgid "``.metashape.goya_psx``"
msgstr ""

#: easyidp.data.TestData.__init__:53 of
msgid "``.metashape.goya_param``"
msgstr ""

#: easyidp.data.TestData.__init__:54 of
msgid "``.metashape.lotus_psx``"
msgstr ""

#: easyidp.data.TestData.__init__:55 of
msgid "``.metashape.lotus_param``"
msgstr ""

#: easyidp.data.TestData.__init__:56 of
msgid "``.metashape.lotus_dsm``"
msgstr ""

#: easyidp.data.TestData.__init__:57 of
msgid "``.metashape.wheat_psx``"
msgstr ""

#: easyidp.data.TestData.__init__:58 of
msgid "``.metashape.wheat_param``"
msgstr ""

#: easyidp.data.TestData.__init__:59 of
msgid "``.metashape.multichunk_psx``"
msgstr ""

#: easyidp.data.TestData.__init__:60 of
msgid "``.metashape.multichunk_param``"
msgstr ""

#: easyidp.data.TestData.__init__:61 of
msgid "``.metashape.two_calib``"
msgstr ""

#: easyidp.data.TestData.__init__:62 of
msgid "``.metashape.multi_spectral``"
msgstr ""

#: easyidp.data.TestData.__init__:65 of
msgid "**pix4d test module**"
msgstr ""

#: easyidp.data.TestData.__init__:67 of
msgid "``.pix4d.lotus_folder``"
msgstr ""

#: easyidp.data.TestData.__init__:68 of
msgid "``.pix4d.lotus_param``"
msgstr ""

#: easyidp.data.TestData.__init__:69 of
msgid "``.pix4d.lotus_photos``"
msgstr ""

#: easyidp.data.TestData.__init__:70 of
msgid "``.pix4d.lotus_dom``"
msgstr ""

#: easyidp.data.TestData.__init__:71 of
msgid "``.pix4d.lotus_dsm``"
msgstr ""

#: easyidp.data.TestData.__init__:72 of
msgid "``.pix4d.lotus_pcd``"
msgstr ""

#: easyidp.data.TestData.__init__:73 of
msgid "``.pix4d.lotus_dom_part``"
msgstr ""

#: easyidp.data.TestData.__init__:74 of
msgid "``.pix4d.lotus_dsm_part``"
msgstr ""

#: easyidp.data.TestData.__init__:75 of
msgid "``.pix4d.lotus_pcd_part``"
msgstr ""

#: easyidp.data.TestData.__init__:76 of
msgid "``.pix4d.maize_folder``"
msgstr ""

#: easyidp.data.TestData.__init__:77 of
msgid "``.pix4d.maize_dom``"
msgstr ""

#: easyidp.data.TestData.__init__:78 of
msgid "``.pix4d.maize_dsm``"
msgstr ""

#: easyidp.data.TestData.__init__:79 of
msgid "``.pix4d.maize_noparam``"
msgstr ""

#: easyidp.data.TestData.__init__:80 of
msgid "``.pix4d.maize_empty``"
msgstr ""

#: easyidp.data.TestData.__init__:81 of
msgid "``.pix4d.maize_noout``"
msgstr ""

#: easyidp.data.TestData.__init__:83 of
msgid "**cvtools test module**"
msgstr ""

#: easyidp.data.TestData.__init__:85 of
msgid "``.cv.out``"
msgstr ""

#: easyidp.data.TestData.__init__:87 of
msgid "**visualize test module**"
msgstr ""

#: easyidp.data.TestData.__init__:89 of
msgid "``.vis.out``"
msgstr ""

#: easyidp.data.TestData.__init__:92 of
msgid "The folder for saving temporary outputs, by default \"./tests/out\""
msgstr "用于保存临时输出的文件夹，默认是 \"./tests/out\""

#: ../../python_api/autodoc/easyidp.data.TestData.rst:24:<autosummary>:1
msgid ""
":py:obj:`__init__ <easyidp.data.TestData.__init__>`\\ "
"\\(\\[test\\_out\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.TestData.rst:24:<autosummary>:1
msgid ":py:obj:`load_data <easyidp.data.TestData.load_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.TestData.rst:24:<autosummary>:1
msgid ":py:obj:`reload_data <easyidp.data.TestData.reload_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.TestData.rst:24:<autosummary>:1
msgid ":py:obj:`remove_data <easyidp.data.TestData.remove_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.TestData.rst:31:<autosummary>:1
msgid ":py:obj:`gdrive_url <easyidp.data.TestData.gdrive_url>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.TestData.rst:31:<autosummary>:1
msgid ":py:obj:`name <easyidp.data.TestData.name>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.TestData.rst:31:<autosummary>:1
msgid ":py:obj:`size <easyidp.data.TestData.size>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.download_all.rst:2
msgid "easyidp.data.download\\_all"
msgstr ""

#: ../../python_api/data.rst:86:<autosummary>:1 easyidp.data.download_all:1 of
msgid "download all datasets"
msgstr "下载所有数据集"

#: ../../python_api/autodoc/easyidp.data.show_data_dir.rst:2
msgid "easyidp.data.show\\_data\\_dir"
msgstr ""

#: ../../python_api/data.rst:86:<autosummary>:1 easyidp.data.show_data_dir:1 of
msgid "open the cached data files in cross-platform system default viewer."
msgstr "在跨平台系统默认查看器中打开缓存的数据文件。"

#: easyidp.data.show_data_dir:5 of
msgid "It modified from this [1]_ webpage."
msgstr "它是从这个 [1]_ 网页修改的。"

#: easyidp.data.show_data_dir:9 of
msgid ""
"Python: Opening a folder in Explorer/Nautilus/Finder "
"https://stackoverflow.com/questions/6631299/python-opening-a-folder-in-"
"explorer-nautilus-finder"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.url_checker.rst:2
msgid "easyidp.data.url\\_checker"
msgstr ""

#: ../../python_api/data.rst:86:<autosummary>:1 easyidp.data.url_checker:1 of
msgid "Check if download url is accessable or not."
msgstr "检查下载链接是否可访问。"

#: easyidp.data.url_checker:3 of
msgid "Modified from this [1]_ link."
msgstr "从这个 [1]_ 链接修改。"

#: easyidp.data.url_checker:5 of
msgid "The url need to be checked"
msgstr "需要检查的链接"

#: easyidp.data.url_checker:10 of
msgid "https://pytutorial.com/check-url-is-reachable"
msgstr ""

#: ../../python_api/autodoc/easyidp.data.user_data_dir.rst:2
msgid "easyidp.data.user\\_data\\_dir"
msgstr ""

#: ../../python_api/data.rst:86:<autosummary>:1 easyidp.data.user_data_dir:1 of
msgid "Get OS specific data directory path for EasyIDP."
msgstr "获取 EasyIDP 的操作系统特定数据目录路径。"

#: easyidp.data.user_data_dir:3 of
msgid "file to be fetched from the data dir"
msgstr "要从数据目录中获取的文件"

#: easyidp.data.user_data_dir:6 of
msgid "full path to the user-specific data dir"
msgstr "用户特定数据目录的完整路径"

#: easyidp.data.user_data_dir:11 of
msgid "Typical user data directories are:"
msgstr "典型的用户数据目录是："

#: easyidp.data.user_data_dir:19 of
msgid ""
"For Unix, we follow the XDG spec and support ``$XDG_DATA_HOME`` if "
"defined."
msgstr "对于 Unix，我们遵循 XDG 规范并支持已定义的 ``$XDG_DATA_HOME``。"

#: easyidp.data.user_data_dir:21 of
msgid "Referenced from stackoverflow [1]_ then get github [2]_ ."
msgstr "参考自 stackoverflow [1]_ 然后获取 github [2]_ 。"

#: easyidp.data.user_data_dir:25 of
msgid ""
"Python: Getting AppData folder in a cross-platform way "
"https://stackoverflow.com/questions/19078969/python-getting-appdata-"
"folder-in-a-cross-platform-way"
msgstr ""

#: easyidp.data.user_data_dir:26 of
msgid ""
"SwagLyrics-For-Spotify/swaglyrics/__init__.py "
"https://github.com/SwagLyrics/SwagLyrics-For-"
"Spotify/blob/master/swaglyrics/__init__.py#L8-L32"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:2
msgid "easyidp.geotiff.GeoTiff"
msgstr ""

#: ../../python_api/geotiff.rst:17:<autosummary>:1 easyidp.geotiff.GeoTiff:1 of
msgid ""
"A GeoTiff class, consisted by header information and file path to raw "
"file."
msgstr "一个 GeoTiff 类，由头信息和原始文件路径组成。"

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: easyidp.geotiff.GeoTiff.__init__:1 of
#, fuzzy
msgid "The method to initialize the GeoTiff class"
msgstr "Geotiff文件的路径"

#: easyidp.geotiff.GeoTiff.__init__:3 of
#, fuzzy
msgid "the path to geotiff file, by default \"\""
msgstr "Geotiff文件的路径"

#: easyidp.geotiff.GeoTiff.__init__:7 easyidp.geotiff.GeoTiff.crop_polygon:14
#: easyidp.geotiff.GeoTiff.crop_rectangle:34
#: easyidp.geotiff.GeoTiff.crop_rois:15 easyidp.geotiff.GeoTiff.geo2pixel:9
#: easyidp.geotiff.GeoTiff.has_data:6 easyidp.geotiff.GeoTiff.pixel2geo:9
#: easyidp.geotiff.GeoTiff.point_query:12
#: easyidp.geotiff.GeoTiff.polygon_math:25
#: easyidp.geotiff.GeoTiff.read_geotiff:7 easyidp.geotiff.geo2pixel:28
#: easyidp.geotiff.get_header:10 easyidp.geotiff.get_imarray:10
#: easyidp.geotiff.pixel2geo:11 easyidp.geotiff.point_query:25
#: easyidp.geotiff.save_geotiff:14 easyidp.geotiff.tifffile_crop:49
#: easyidp.geotools.convert_proj:13 easyidp.geotools.convert_proj3d:46
#: easyidp.geotools.is_single_point:10 easyidp.jsonfile.dict2json:14
#: easyidp.jsonfile.read_geojson:21 easyidp.jsonfile.read_json:9
#: easyidp.jsonfile.show_geojson_fields:7
#: easyidp.metashape.Metashape.__init__:13
#: easyidp.metashape.Metashape.back2raw:18
#: easyidp.metashape.Metashape.back2raw_crs:19
#: easyidp.metashape.Metashape.get_photo_position:14
#: easyidp.metashape.Metashape.open_chunk:9
#: easyidp.metashape.Metashape.open_project:9
#: easyidp.metashape.Metashape.show_roi_on_img:25
#: easyidp.metashape.Metashape.sort_img_by_distance:19
#: easyidp.metashape.read_chunk_zip:60 easyidp.metashape.read_project_zip:38
#: easyidp.pix4d.Pix4D.__init__:12 easyidp.pix4d.Pix4D.back2raw:22
#: easyidp.pix4d.Pix4D.back2raw_crs:23
#: easyidp.pix4d.Pix4D.get_photo_position:14 easyidp.pix4d.Pix4D.load_dom:7
#: easyidp.pix4d.Pix4D.load_dsm:7 easyidp.pix4d.Pix4D.load_pcd:25
#: easyidp.pix4d.Pix4D.open_project:12 easyidp.pix4d.Pix4D.show_roi_on_img:25
#: easyidp.pix4d.Pix4D.sort_img_by_distance:19
#: easyidp.pix4d.parse_p4d_param_folder:23 easyidp.pix4d.parse_p4d_project:40
#: easyidp.pix4d.read_cam_ssk:51 easyidp.pix4d.read_campos_geo:31
#: easyidp.pix4d.read_ccp:53 easyidp.pix4d.read_cicp:35
#: easyidp.pix4d.read_pmat:30 easyidp.pix4d.read_xyz:18
#: easyidp.pointcloud.PointCloud.__init__:17
#: easyidp.pointcloud.PointCloud.crop_point_cloud:9
#: easyidp.pointcloud.PointCloud.crop_rois:14
#: easyidp.pointcloud.PointCloud.offset:8
#: easyidp.pointcloud.PointCloud.read_point_cloud:11
#: easyidp.pointcloud.PointCloud.update_offset_value:7
#: easyidp.pointcloud.PointCloud.write_point_cloud:7
#: easyidp.pointcloud.read_las:10 easyidp.pointcloud.read_laz:10
#: easyidp.pointcloud.read_ply:10 easyidp.pointcloud.write_las:17
#: easyidp.pointcloud.write_laz:17 easyidp.pointcloud.write_ply:17
#: easyidp.reconstruct.save_back2raw_json_and_png:9 easyidp.roi.ROI.__init__:7
#: easyidp.roi.ROI.back2raw:61 easyidp.roi.ROI.change_crs:7
#: easyidp.roi.ROI.crop:14 easyidp.roi.ROI.get_z_from_dsm:51
#: easyidp.roi.ROI.open:7 easyidp.roi.ROI.read_geojson:11
#: easyidp.roi.ROI.read_labelme_json:7 easyidp.roi.ROI.read_shp:17
#: easyidp.shp.read_proj:9 easyidp.shp.read_shp:27
#: easyidp.shp.show_shp_fields:9 easyidp.visualize.draw_backward_one_roi:24
#: easyidp.visualize.draw_polygon_on_img:25 of
msgid "示例"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`__init__ <easyidp.geotiff.GeoTiff.__init__>`\\ "
"\\(\\[tif\\_path\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`crop_polygon <easyidp.geotiff.GeoTiff.crop_polygon>`\\ "
"\\(polygon\\_hv\\[\\, is\\_geo\\, save\\_path\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: easyidp.geotiff.GeoTiff.crop_polygon:1 of
msgid "Crop a given polygon from geotiff"
msgstr "从 GeoTIFF 中裁剪给定的多边形"

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`crop_rectangle <easyidp.geotiff.GeoTiff.crop_rectangle>`\\ "
"\\(left\\, top\\, w\\, h\\[\\, is\\_geo\\, ...\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: easyidp.geotiff.GeoTiff.crop_rectangle:1 of
msgid "Extract a rectangle regeion crop from a GeoTIFF image file."
msgstr "从 GeoTIFF 图像文件中提取矩形区域裁剪。"

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`crop_rois <easyidp.geotiff.GeoTiff.crop_rois>`\\ \\(roi\\[\\, "
"is\\_geo\\, save\\_folder\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
#: easyidp.geotiff.GeoTiff.crop_rois:1 easyidp.roi.ROI.crop:1 of
msgid ""
"Crop several ROIs from the geotiff by given <ROI> object with several "
"polygons and polygon names"
msgstr "通过给定的 <ROI> 对象，从 GeoTIFF 中裁剪多个具有多边形和多边形名称的 ROI"

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`geo2pixel <easyidp.geotiff.GeoTiff.geo2pixel>`\\ "
"\\(polygon\\_hv\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: ../../python_api/geotiff.rst:36:<autosummary>:1
#: easyidp.geotiff.GeoTiff.geo2pixel:1 easyidp.geotiff.GeoTiff.pixel2geo:1
#: easyidp.geotiff.pixel2geo:1 of
msgid ""
"Convert geotiff pixel coordinate (horizontal, vertical) to point cloud "
"xyz coordinate (x, y, z)"
msgstr "将 GeoTIFF 像素坐标（水平，垂直）转换为点云 xyz 坐标（x, y, z）"

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ":py:obj:`has_data <easyidp.geotiff.GeoTiff.has_data>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: easyidp.geotiff.GeoTiff.has_data:1 of
msgid "Return True if current objects has geotiff infomation"
msgstr "如果含有Geotiff信息，则返回True"

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`pixel2geo <easyidp.geotiff.GeoTiff.pixel2geo>`\\ "
"\$polygon\\_hv\$"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`point_query <easyidp.geotiff.GeoTiff.point_query>`\\ "
"\$points\\_hv\\[\\, is\\_geo\\]\$"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: ../../python_api/geotiff.rst:36:<autosummary>:1
#: easyidp.geotiff.GeoTiff.point_query:1 easyidp.geotiff.point_query:1 of
msgid "Get the pixel value of given point(s)"
msgstr "获取给定点的像素值"

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`polygon_math <easyidp.geotiff.GeoTiff.polygon_math>`\\ "
"\$polygon\\_hv\\[\\, is\\_geo\\, kernel\\]\$"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: easyidp.geotiff.GeoTiff.polygon_math:1 of
msgid "Calculate the valus inside given polygon"
msgstr "计算给定多边形内的值"

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
msgid ""
":py:obj:`read_geotiff <easyidp.geotiff.GeoTiff.read_geotiff>`\\ "
"\$tif\\_path\$"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.GeoTiff.rst:30:<autosummary>:1
#: easyidp.geotiff.GeoTiff.read_geotiff:1 of
msgid "Open and get the meta information (header) from geotiff"
msgstr "打开并获取 GeoTIFF 的元信息（头文件）"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`crs <easyidp.geotiff.GeoTiff.crs>`\\"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.crs:1 of
msgid ""
"A quick access to ``self.header['crs']``, please access the ``header`` "
"dict to change value"
msgstr "快速访问 ``self.header['crs']``，请通过 ``header`` 字典更改值"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`dim <easyidp.geotiff.GeoTiff.dim>`\\"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.dim:1 of
msgid ""
"A quick access to ``self.header['dim']``, please access the ``header`` "
"dict to change value"
msgstr "快速访问 ``self.header['dim']``，请通过 ``header`` 字典更改值"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`height <easyidp.geotiff.GeoTiff.height>`\\"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.height:1 of
msgid ""
"A quick access to ``self.header['height']``, please access the ``header``"
" dict to change value"
msgstr "快速访问 ``self.header['height']``，请通过 ``header`` 字典更改值"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`nodata <easyidp.geotiff.GeoTiff.nodata>`\\"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.nodata:1 of
msgid ""
"A quick access to ``self.header['nodata']``, please access the ``header``"
" dict to change value"
msgstr "快速访问 ``self.header['nodata']``，请通过 ``header`` 字典更改值"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`scale <easyidp.geotiff.GeoTiff.scale>`\\"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.scale:1 of
msgid ""
"A quick access to ``self.header['scale']``, please access the ``header`` "
"dict to change value"
msgstr "快速访问 ``self.header['scale']``，请通过 ``header`` 字典更改值"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`tie_point <easyidp.geotiff.GeoTiff.tie_point>`\\"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.tie_point:1 of
msgid ""
"A quick access to ``self.header['tie_point']``, please access the "
"``header`` dict to change value"
msgstr "快速访问 ``self.header['tie_point']``，请通过 ``header`` 字典更改值"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`width <easyidp.geotiff.GeoTiff.width>`\\"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.width:1 of
msgid ""
"A quick access to ``self.header['width']``, please access the ``header`` "
"dict to change value"
msgstr "快速访问 ``self.header['width']``，请通过 ``header`` 字典更改值"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`file_path <easyidp.geotiff.GeoTiff.file_path>`\\"
msgstr ""

#: ../../docstring easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.file_path:1 of
#, fuzzy
msgid "The file path of current GeoTiff"
msgstr "当前 GeoTIFF 文件的路径"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`header <easyidp.geotiff.GeoTiff.header>`\\"
msgstr ""

#: ../../docstring easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.header:1 of
msgid "The Geotiff meta infomation"
msgstr "GeoTIFF 的元信息"

#: easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1 of
msgid ":py:obj:`imarray <easyidp.geotiff.GeoTiff.imarray>`\\"
msgstr ""

#: ../../docstring easyidp.geotiff.GeoTiff.crop_polygon:1:<autosummary>:1
#: easyidp.geotiff.GeoTiff.imarray:1 of
#, fuzzy
msgid "The numpy ndarray of GeoTiff images"
msgstr "GeoTIFF 图像的 numpy ndarray"

#: easyidp.geotiff.GeoTiff.crop_polygon:3
#: easyidp.geotiff.GeoTiff.polygon_math:3 of
msgid "(horizontal, vertical) points"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:5
#: easyidp.geotiff.GeoTiff.crop_rectangle:25
#: easyidp.geotiff.GeoTiff.crop_rois:6 easyidp.geotiff.GeoTiff.polygon_math:5
#: easyidp.pointcloud.PointCloud.crop_rois:6 easyidp.roi.ROI.crop:5 of
msgid ""
"whether the given polygon is pixel coords on imarray or geo coords "
"(default)"
msgstr "给定的多边形是 imarray 上的像素坐标还是地理坐标（默认）"

#: easyidp.geotiff.GeoTiff.crop_polygon:7 of
msgid "if given, will save the cropped as \\*.tif file to path, by default None"
msgstr "如果指定，将裁剪结果保存为 \\*.tif 文件，默认不保存"

#: easyidp.geotiff.GeoTiff.crop_polygon:10 of
msgid "The cropped numpy pixels imarray"
msgstr "裁剪后的 numpy 像素数组"

#: easyidp.geotiff.GeoTiff.crop_polygon:15 easyidp.geotiff.GeoTiff.crop_rois:16
#: easyidp.geotiff.GeoTiff.geo2pixel:10 easyidp.geotiff.GeoTiff.pixel2geo:10
#: easyidp.geotiff.GeoTiff.polygon_math:26 easyidp.geotiff.save_geotiff:15
#: easyidp.pointcloud.write_las:18 easyidp.pointcloud.write_laz:18
#: easyidp.pointcloud.write_ply:18 of
msgid "Prepare data:"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:36 easyidp.geotiff.GeoTiff.crop_rois:46
#: easyidp.geotiff.GeoTiff.geo2pixel:28 easyidp.geotiff.GeoTiff.pixel2geo:29
#: easyidp.geotiff.GeoTiff.polygon_math:44 easyidp.jsonfile.read_json:17
#: easyidp.pointcloud.PointCloud.write_point_cloud:34
#: easyidp.pointcloud.write_las:44 easyidp.pointcloud.write_laz:44
#: easyidp.pointcloud.write_ply:44
#: easyidp.reconstruct.save_back2raw_json_and_png:24 of
msgid "Use this function:"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_polygon:44 of
msgid "If you want to save the previous as new GeoTiff:"
msgstr "如果你想将之前的结果保存为新的 GeoTIFF："

#: easyidp.geotiff.GeoTiff.crop_rectangle:17 of
msgid "Coordinates of"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:19 of
msgid "Coordinates of the top left corner of the desired crop."
msgstr "所需裁剪区域左上角的坐标。"

#: easyidp.geotiff.GeoTiff.crop_rectangle:21 easyidp.geotiff.tifffile_crop:30
#: of
msgid "Desired crop height."
msgstr "所需裁剪高度。"

#: easyidp.geotiff.GeoTiff.crop_rectangle:23 easyidp.geotiff.tifffile_crop:32
#: of
msgid "Desired crop width."
msgstr "所需裁剪宽度。"

#: easyidp.geotiff.GeoTiff.crop_rectangle:27 of
msgid "if given, will save the cropped as \\*.tif file to path"
msgstr "如果指定，将裁剪结果保存为 \\*.tif 文件"

#: easyidp.geotiff.GeoTiff.crop_rectangle:30 of
msgid "Extracted crop."
msgstr "提取的裁剪区域。"

#: easyidp.geotiff.GeoTiff.crop_rectangle:46 easyidp.geotiff.tifffile_crop:58
#: of
msgid "It is not recommended to use without specifying parameters like this:"
msgstr "不建议在不指定参数的情况下使用："

#: easyidp.geotiff.GeoTiff.crop_rectangle:48 easyidp.geotiff.tifffile_crop:60
#: of
msgid "``crop_rectiange(434, 918, 320, 321)``"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rectangle:50 of
msgid "It is hard to know the exactly order"
msgstr "很难知道确切的顺序"

#: easyidp.geotiff.GeoTiff.crop_rectangle:54 of
msgid ""
"subfunction :func:`easyidp.geotiff.tifffile_crop` has the order ``(top, "
"left, h, w)`` which is too heavy to change it."
msgstr "子函数 :func:`easyidp.geotiff.tifffile_crop` 的顺序是 ``(top, left, h, w)``，改起来太麻烦。"

#: easyidp.geotiff.GeoTiff.crop_rectangle:56 of
msgid ":obj:`easyidp.geotiff.tifffile_crop`"
msgstr ""

#: easyidp.geotiff.GeoTiff.crop_rois:3 of
msgid ""
"the <ROI> object created by easyidp.ROI(), or dictionary with multiple "
"polygons. If you just need crop single polygon with ndarray coordinates, "
"please use GeoTiff.crop_polygon() instead."
msgstr "由 easyidp.ROI() 创建的 <ROI> 对象，或包含多个多边形的字典。如果只需要裁剪具有 ndarray 坐标的单个多边形，请使用 GeoTiff.crop_polygon()。"

#: easyidp.geotiff.GeoTiff.crop_rois:8 of
msgid ""
"the folder to save cropped images, use ROI indices as file_names, by "
"default \"\", means not save."
msgstr "保存裁剪图像的文件夹，使用 ROI 索引作为文件名，默认 \"\"，表示不保存。"

#: easyidp.geotiff.GeoTiff.crop_rois:11 easyidp.roi.ROI.crop:10 of
msgid "The dictionary with key=id and value=ndarray data"
msgstr "键=ID，值=ndarray 数据的字典"

#: easyidp.geotiff.GeoTiff.crop_rois:56 of
msgid "If you want automatically save geotiff results to specific folder:"
msgstr "如果你想自动将 GeoTIFF 结果保存到特定文件夹："

#: easyidp.geotiff.GeoTiff.geo2pixel:3 easyidp.geotiff.GeoTiff.pixel2geo:3
#: easyidp.geotiff.geo2pixel:3 easyidp.geotiff.pixel2geo:3 of
msgid "[horizontal, vertical] points"
msgstr ""

#: easyidp.geotiff.GeoTiff.geo2pixel:39 of
msgid ":obj:`easyidp.geotiff.geo2pixel`"
msgstr ""

#: easyidp.geotiff.GeoTiff.pixel2geo:40 of
msgid ":obj:`easyidp.geotiff.pixel2geo`"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:3 of
msgid "| The coordinates of qurey points, in order (horizontal, vertical)"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query of
msgid "The coordinates of qurey points, in order (horizontal, vertical)"
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:5 of
msgid ""
"| The given polygon is geo coords ( ``True`` , default) or pixel coords ("
" ``False`` ) on imarray."
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query of
msgid ""
"The given polygon is geo coords ( ``True`` , default) or pixel coords ( "
"``False`` ) on imarray."
msgstr ""

#: easyidp.geotiff.GeoTiff.point_query:8 of
msgid "the obtained pixel value (RGB or height)"
msgstr "获得的像素值（RGB 或高度）"

#: easyidp.geotiff.GeoTiff.point_query:13 of
msgid "Prequirements"
msgstr "前提条件"

#: easyidp.geotiff.GeoTiff.point_query:20 of
msgid "Query one point by tuple"
msgstr "通过元组查询一个点"

#: easyidp.geotiff.GeoTiff.point_query:29 of
msgid "Query one point by list"
msgstr "通过列表查询一个点"

#: easyidp.geotiff.GeoTiff.point_query:38 of
msgid "Query several points by list"
msgstr "通过列表查询多个点"

#: easyidp.geotiff.GeoTiff.point_query:49 of
msgid "Query several points by numpy"
msgstr "通过 numpy 查询多个点"

#: easyidp.geotiff.GeoTiff.point_query:60 of
msgid ":obj:`easyidp.geotiff.point_query`"
msgstr ""

#: easyidp.geotiff.GeoTiff.polygon_math:7 of
msgid ""
"The method to calculate polygon summary, options are: [\"mean\", \"min\","
" \"max\", \"pmin5\", \"pmin10\", \"pmax5\", \"pmax10\"], please check "
"notes section for more details."
msgstr "计算多边形摘要的方法，选项包括：[\"mean\", \"min\", \"max\", \"pmin5\", \"pmin10\", \"pmax5\", \"pmax10\"]，详细信息请查看备注部分。"

#: easyidp.geotiff.GeoTiff.polygon_math:12 of
msgid "Option details for ``kernel`` parameter:"
msgstr "``kernel`` 参数的选项详情："

#: easyidp.geotiff.GeoTiff.polygon_math:14 of
msgid "\"mean\": the mean value inside polygon"
msgstr "\"mean\": 多边形内部的平均值"

#: easyidp.geotiff.GeoTiff.polygon_math:15 of
msgid "\"min\": the minimum value inside polygon"
msgstr "\"min\": 多边形内部的最小值"

#: easyidp.geotiff.GeoTiff.polygon_math:16 of
msgid "\"max\": the maximum value inside polygon"
msgstr "\"max\": 多边形内部的最大值"

#: easyidp.geotiff.GeoTiff.polygon_math:17 of
msgid "\"pmin5\": 5th [percentile mean]_ inside polygon"
msgstr "\"pmin5\": 多边形内部的第 5 个百分位数均值"

#: easyidp.geotiff.GeoTiff.polygon_math:18 of
msgid "\"pmin10\": 10th [percentile mean]_ inside polygon"
msgstr "\"pmin10\": 多边形内部的第 10 个百分位数均值"

#: easyidp.geotiff.GeoTiff.polygon_math:19 of
msgid "\"pmax5\": 95th [percentile mean]_ inside polygon"
msgstr "\"pmax5\": 多边形内部的第 95 个百分位数均值"

#: easyidp.geotiff.GeoTiff.polygon_math:20 of
msgid "\"pmax10\": 90th [percentile mean]_ inside polygon"
msgstr "\"pmax10\": 多边形内部的第 90 个百分位数均值"

#: easyidp.geotiff.GeoTiff.polygon_math:56 of
msgid ""
"This function is initially designed for doing some simple calculations "
"one band (layer) geotiff."
msgstr "此功能最初设计用于对单波段（层）GeoTIFF 进行一些简单的计算。"

#: easyidp.geotiff.GeoTiff.polygon_math:58 of
msgid ""
"If you applying this function on RGB color geotiff, it will return the "
"calculated results of each layer"
msgstr "如果将此功能应用于 RGB 彩色 GeoTIFF，它将返回每一层的计算结果"

#: easyidp.geotiff.GeoTiff.polygon_math:65 of
msgid "The four values are RGBA four color channels."
msgstr "这四个值是 RGBA 四个颜色通道。"

#: easyidp.geotiff.GeoTiff.read_geotiff:3 easyidp.geotiff.get_imarray:3 of
msgid "the path to geotiff file"
msgstr "GeoTIFF 文件的路径"

#: easyidp.geotiff.GeoTiff.read_geotiff:8 of
msgid "Though this function can be used by:"
msgstr ""

#: easyidp.geotiff.GeoTiff.read_geotiff:17 of
msgid ""
"It is highly recommended to specify the geotiff path when initializing "
"the geotiff object:"
msgstr "强烈建议在初始化 GeoTIFF 对象时指定 GeoTIFF 路径："

#: ../../python_api/autodoc/easyidp.geotiff.geo2pixel.rst:2
msgid "easyidp.geotiff.geo2pixel"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1 easyidp.geotiff.geo2pixel:1
#: of
msgid ""
"Convert point cloud xyz coordinate to geotiff pixel coordinate "
"(horizontal, vertical)"
msgstr "将点云 xyz 坐标转换为 GeoTIFF 像素坐标（水平，垂直）"

#: easyidp.geotiff.geo2pixel:5 easyidp.geotiff.pixel2geo:5
#: easyidp.geotiff.point_query easyidp.geotiff.save_geotiff:3 of
msgid "the geotiff head dictionary from get_header()"
msgstr ""

#: easyidp.geotiff.geo2pixel:7 of
msgid ""
"if false: will get float coordinates -> (23.5, 27.8) if true: will get "
"int pixel index -> (23, 27)"
msgstr "如果为 false：将获得浮点坐标 -> (23.5, 27.8) 如果为 true：将获得整数像素索引 -> (23, 27)"

#: easyidp.geotiff.geo2pixel:11 of
msgid "pixel position of these points (horizontal, vertical)"
msgstr "这些点的像素位置（水平，垂直）"

#: easyidp.geotiff.geo2pixel:16 of
msgid ""
"Please note: gis UTM coordinate, horizontal is x axis, vertical is y "
"axis, origin at left upper."
msgstr "请注意：GIS UTM 坐标，水平是 x 轴，垂直是 y 轴，原点在左上角。"

#: easyidp.geotiff.geo2pixel:18 of
msgid "To crop image ndarray:"
msgstr ""

#: easyidp.geotiff.geo2pixel:20 of
msgid "the first columns is vertical pixel (along height),"
msgstr "第一列是垂直像素（沿高度），"

#: easyidp.geotiff.geo2pixel:21 of
msgid "the second columns is horizontal pixel number (along width),"
msgstr "第二列是水平像素数（沿宽度），"

#: easyidp.geotiff.geo2pixel:22 of
msgid "the third columns is 3 or 4 bands (RGB, alpha),"
msgstr "第三列是 3 或 4 个波段（RGB，alpha），"

#: easyidp.geotiff.geo2pixel:23 of
msgid "the x and y is reversed compared with gis coordinates."
msgstr "x 和 y 与 GIS 坐标相比是反向的。"

#: easyidp.geotiff.geo2pixel:25 of
msgid ""
"This function has already do this reverse, so that you can use the output"
" directly."
msgstr "此功能已完成此反向操作，因此您可以直接使用输出。"

#: easyidp.geotiff.geo2pixel:51 of
msgid ":func:`easyidp.GeoTiff.geo2pixel <easyidp.geotiff.GeoTiff.geo2pixel>`"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.get_header.rst:2
msgid "easyidp.geotiff.get\\_header"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1 easyidp.geotiff.get_header:1
#: of
msgid "Read the necessary meta infomation from TIFF file"
msgstr "从 GeoTIFF 文件中读取必要的元信息"

#: easyidp.geotiff.get_header:3 of
msgid "the path to the geotiff file"
msgstr "GeoTIFF 文件的路径"

#: easyidp.geotiff.get_header:6 of
msgid "**header** -- the container of acquired meta info"
msgstr "**header** -- 获取的元信息的容器"

#: ../../python_api/autodoc/easyidp.geotiff.get_imarray.rst:2
msgid "easyidp.geotiff.get\\_imarray"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
#: easyidp.geotiff.get_imarray:1 of
msgid ""
"Read full map data as numpy array (time and RAM costy, not recommended, "
"often requires ``4 x file_size`` of RAM)"
msgstr "将完整地图数据读取为 numpy 数组（耗时且占用大量内存，不推荐，通常需要 ``4 x 文件大小`` 的内存）"

#: easyidp.geotiff.get_imarray:6 of
msgid "**data** -- the obtained image data"
msgstr "**data** -- 获取的图像数据"

#: ../../python_api/autodoc/easyidp.geotiff.pixel2geo.rst:2
msgid "easyidp.geotiff.pixel2geo"
msgstr ""

#: easyidp.geotiff.pixel2geo:31 of
msgid ":func:`easyidp.GeoTiff.pixel2geo <easyidp.geotiff.GeoTiff.pixel2geo>`"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.point_query.rst:2
msgid "easyidp.geotiff.point\\_query"
msgstr ""

#: easyidp.geotiff.point_query:3 easyidp.geotiff.tifffile_crop:20 of
msgid "TIFF image file directory (IFD) from which the crop must be extracted."
msgstr "必须从中提取裁剪的 TIFF 图像文件目录 (IFD)。"

#: easyidp.geotiff.point_query:5 of
msgid ""
"| 1. one point tuple |     e.g. (34.57, 45.62) | 2. one point list |     "
"e.g. [34.57, 45.62] | 3. points lists |     e.g. [[34.57, 45.62],[35.57, "
"46.62]] | 4. 2d numpy array |     e.g. np.array([[34.57, 45.62],[35.57, "
"46.62]])"
msgstr ""

#: easyidp.geotiff.point_query of
msgid "1. one point tuple"
msgstr "1. 一个点的元组tuple"

#: easyidp.geotiff.point_query of
msgid "e.g. (34.57, 45.62)"
msgstr ""

#: easyidp.geotiff.point_query of
msgid "2. one point list"
msgstr "2. 一个点的列表list"

#: easyidp.geotiff.point_query of
msgid "e.g. [34.57, 45.62]"
msgstr ""

#: easyidp.geotiff.point_query of
msgid "3. points lists"
msgstr "3. 多点列表lists"

#: easyidp.geotiff.point_query of
msgid "e.g. [[34.57, 45.62],[35.57, 46.62]]"
msgstr ""

#: easyidp.geotiff.point_query of
msgid "4. 2d numpy array"
msgstr "4. 二维numpy数组"

#: easyidp.geotiff.point_query of
msgid "e.g. np.array([[34.57, 45.62],[35.57, 46.62]])"
msgstr ""

#: easyidp.geotiff.point_query:14 of
msgid ""
"| the geotiff head dictionary from get_header() | if specified, will view"
" the `points_hv` as geo position |     e.g. [longtitude, latitude] | if "
"not specified, will view as pixel index |     e.g. [1038, 567] -> pixel "
"id"
msgstr ""

#: easyidp.geotiff.point_query of
msgid "if specified, will view the `points_hv` as geo position"
msgstr "如果指定，将 `points_hv` 视为地理位置"

#: easyidp.geotiff.point_query of
msgid "e.g. [longtitude, latitude]"
msgstr "例如：[经度，纬度]"

#: easyidp.geotiff.point_query of
msgid "if not specified, will view as pixel index"
msgstr "如果未指定，将视为像素索引"

#: easyidp.geotiff.point_query of
msgid "e.g. [1038, 567] -> pixel id"
msgstr "例如：[1038，567] -> 像素 ID"

#: easyidp.geotiff.point_query:21 of
msgid "**values** -- the obtained pixel value (RGB or height)"
msgstr "**values** -- 获取的像素值（RGB 或高度）"

#: easyidp.geotiff.point_query:54 of
msgid ":func:`easyidp.GeoTiff.point_query <easyidp.geotiff.GeoTiff.point_query>`"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.save_geotiff.rst:2
msgid "easyidp.geotiff.save\\_geotiff"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
#: easyidp.geotiff.save_geotiff:1 of
msgid "Save cropped region to geotiff file"
msgstr "保存裁剪区域为 GeoTIFF 文件"

#: easyidp.geotiff.save_geotiff:5 of
msgid "(m, n, d) image ndarray cropped from `crop_polygon`"
msgstr "(m, n, d) 图像 ndarray，从 `crop_polygon` 裁剪"

#: easyidp.geotiff.save_geotiff:7 of
msgid "| the pixel position of image top left cornder, | the order is (left, top)"
msgstr "| 图像左上角的像素位置，| 顺序为 (left, top)"

#: easyidp.geotiff.save_geotiff of
msgid "the pixel position of image top left cornder,"
msgstr "图像左上角的像素位置，"

#: easyidp.geotiff.save_geotiff of
msgid "the order is (left, top)"
msgstr "顺序为 (left, top)"

#: easyidp.geotiff.save_geotiff:10 of
msgid "the save to geotiff file path"
msgstr "GeoTIFF 文件的保存路径"

#: easyidp.geotiff.save_geotiff:25 of
msgid "If want to move each 20 pixels of this geotiff to right and bottom"
msgstr "如果想将这个 GeoTIFF 的每个像素向右和向下移动 20 个像素"

#: easyidp.geotiff.save_geotiff:33 of
msgid "Then using the QGIS to compare between input and output:"
msgstr "然后使用 QGIS 比较输入和输出："

#: easyidp.geotiff.save_geotiff:-1 of
msgid "save_geotiff_offset.png"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotiff.tifffile_crop.rst:2
msgid "easyidp.geotiff.tifffile\\_crop"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
#: easyidp.geotiff.tifffile_crop:1 of
msgid "Extract a crop from a TIFF image file directory (IFD) by partial loading."
msgstr "通过部分加载从 TIFF 图像文件目录 (IFD) 中提取裁剪区域。"

#: easyidp.geotiff.tifffile_crop:3 of
msgid "Only the tiles englobing the crop area are loaded and not the whole page."
msgstr "仅加载包含裁剪区域的图块，而不是整个页面。"

#: easyidp.geotiff.tifffile_crop:5 of
msgid "This is usefull for large geotiff that unableto load into RAM."
msgstr "这对于无法加载到内存中的大型 GeoTIFF 很有用。"

#: easyidp.geotiff.tifffile_crop:22 easyidp.geotiff.tifffile_crop:26 of
msgid ""
"Coordinates of the top left corner of the desired crop. top = i0 = "
"height_st left = j0 = w_st"
msgstr "所需裁剪区域左上角的坐标。top = i0 = height_st，left = j0 = w_st"

#: easyidp.geotiff.tifffile_crop:35 of
msgid "**out** -- Extracted crop."
msgstr "**out** -- 提取的裁剪区域。"

#: easyidp.geotiff.tifffile_crop:40 of
msgid "Modified from [1]_ ,"
msgstr "修改自 [1]_ ，"

#: easyidp.geotiff.tifffile_crop:42 of
msgid ""
"In EasyIDP v1.0, the function is ``caas_lite.get_crop(page, i0, j0, h, "
"w)``"
msgstr ""
"在 EasyIDP v1.0 中，该函数是 ``caas_lite.get_crop(page, i0, j0, h, w)``"

#: easyidp.geotiff.tifffile_crop:46 of
msgid ""
"https://gist.github.com/rfezzani/b4b8852c5a48a901c1e94e09feb34743#file-"
"get_crop-py-L60"
msgstr ""

#: easyidp.geotiff.tifffile_crop:62 of
msgid "It is hard to know the parameter order immediately."
msgstr "很难立即知道参数的顺序。"

#: easyidp.geotiff.tifffile_crop:64 of
msgid ""
":func:`easyidp.GeoTiff.crop_rectangle "
"<easyidp.geotiff.GeoTiff.crop_rectangle>`"
msgstr ""

#: ../../python_api/autodoc/easyidp.geotools.convert_proj.rst:2
msgid "easyidp.geotools.convert\\_proj"
msgstr ""

#: ../../python_api/geotools.rst:19:<autosummary>:1
#: easyidp.geotools.convert_proj:1 of
msgid "Provide the geo coordinate transfrom based on pyproj package"
msgstr "基于 pyproj 包提供地理坐标转换"

#: easyidp.geotools.convert_proj:3 of
msgid "the output of read_shp() function"
msgstr "read_shp() 函数的输出"

#: easyidp.geotools.convert_proj:5 of
msgid "the hidden output of read_shp(..., return_proj=True)"
msgstr "read_shp(..., return_proj=True) 的隐藏输出"

#: easyidp.geotools.convert_proj:7 of
msgid ""
"| Examples: | ``crs_target = pyproj.CRS.from_epsg(4326)`` | ``crs_target "
"= r'path/to/{shp_name}.prj'``"
msgstr ""

#: easyidp.geotools.convert_proj of
msgid "Examples:"
msgstr "例子："

#: easyidp.geotools.convert_proj of
msgid "``crs_target = pyproj.CRS.from_epsg(4326)``"
msgstr ""

#: easyidp.geotools.convert_proj of
msgid "``crs_target = r'path/to/{shp_name}.prj'``"
msgstr ""

#: easyidp.geotools.convert_proj:14 easyidp.geotools.convert_proj3d:47
#: easyidp.metashape.Metashape.back2raw:19
#: easyidp.metashape.Metashape.get_photo_position:15
#: easyidp.metashape.Metashape.open_chunk:10
#: easyidp.metashape.read_chunk_zip:61 easyidp.metashape.read_project_zip:39
#: easyidp.pix4d.Pix4D.back2raw:23 easyidp.pix4d.Pix4D.get_photo_position:15
#: easyidp.pix4d.parse_p4d_param_folder:24 easyidp.pix4d.parse_p4d_project:41
#: easyidp.pix4d.read_cam_ssk:52 easyidp.pix4d.read_campos_geo:32
#: easyidp.pix4d.read_ccp:54 easyidp.pix4d.read_cicp:36
#: easyidp.pix4d.read_pmat:31 easyidp.pix4d.read_xyz:19
#: easyidp.reconstruct.save_back2raw_json_and_png:10
#: easyidp.visualize.draw_polygon_on_img:26 of
msgid "Data prepare"
msgstr "数据准备"

#: easyidp.geotools.convert_proj:27 of
msgid ""
"Then do the transformation from lon-lat coordainte to WGS 84 / UTM zone "
"54N (CRS: EPSG:32654)"
msgstr "然后将经纬度坐标转换为 WGS 84 / UTM 第 54N 区（CRS: EPSG:32654）"

#: ../../python_api/autodoc/easyidp.geotools.convert_proj3d.rst:2
msgid "easyidp.geotools.convert\\_proj3d"
msgstr ""

#: ../../python_api/geotools.rst:19:<autosummary>:1
#: easyidp.geotools.convert_proj3d:1 of
msgid ""
"Transform a point or points from one CRS to another CRS, by "
"pyproj.CRS.Transformer function"
msgstr "通过 pyproj.CRS.Transformer 函数将一个或多个点从一个 CRS 转换为另一个 CRS"

#: easyidp.geotools.convert_proj3d:3 of
msgid "the nx3 3D coordinate points"
msgstr "nx3 的三维坐标点"

#: easyidp.geotools.convert_proj3d:5 of
#, fuzzy
msgid "the CRS of points_np"
msgstr "points_np 的 CRS"

#: easyidp.geotools.convert_proj3d:7 of
msgid "the CRS of target"
msgstr "目标的 CRS"

#: easyidp.geotools.convert_proj3d:9 of
msgid "The format of points_np; True: x, y, z; False: lon, lat, alt"
msgstr "points_np 的格式；True：x, y, z；False：经度，纬度，高度"

#: easyidp.geotools.convert_proj3d:17 of
msgid "``point_np`` and ``fmt`` parameters"
msgstr ""

#: easyidp.geotools.convert_proj3d:21 easyidp.geotools.convert_proj3d:30 of
msgid "points_np in this format:"
msgstr ""

#: easyidp.geotools.convert_proj3d:40 of
msgid ""
"pyproj.CRS order: (lat, lon, alt) points order in EasyIDP are commonly "
"(lon, lat, alt)"
msgstr "pyproj.CRS 顺序：（纬度，经度，高度），EasyIDP 中的点顺序通常是（经度，纬度，高度）"

#: easyidp.geotools.convert_proj3d:43 of
msgid "But if is xyz format, no need to change order"
msgstr "但如果是 xyz 格式，则无需更改顺序"

#: easyidp.geotools.convert_proj3d:56 of
msgid "The geodetic 3D coordinate"
msgstr "大地三维坐标"

#: easyidp.geotools.convert_proj3d:63 of
msgid ""
"And the same point in 3D geocentric coordaintes, order in columns=['lon',"
" 'lat', 'alt']"
msgstr "相同的点在三维地心坐标中的顺序为 columns=['lon', 'lat', 'alt']"

#: easyidp.geotools.convert_proj3d:70 of
msgid "Then do the transformation:"
msgstr "然后进行转换："

#: ../../python_api/autodoc/easyidp.geotools.is_single_point.rst:2
msgid "easyidp.geotools.is\\_single\\_point"
msgstr ""

#: ../../python_api/geotools.rst:19:<autosummary>:1
#: easyidp.geotools.is_single_point:1 of
msgid "format one point coordinate ``[x,y,z]`` to ``[[x, y, z]]``"
msgstr "将一个点坐标 ``[x,y,z]`` 格式化为 ``[[x, y, z]]``"

#: easyidp.geotools.is_single_point:3 of
msgid "the ndarray point coordiantes"
msgstr "ndarray 点坐标"

#: easyidp.geotools.is_single_point:6 of
msgid "the converted coordinate, whether is single point"
msgstr "转换后的坐标，是否为单点"

#: ../../python_api/autodoc/easyidp.jsonfile.dict2json.rst:2
msgid "easyidp.jsonfile.dict2json"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1 easyidp.jsonfile.dict2json:1 of
msgid "Save dict object to the same structure json file"
msgstr "将字典对象保存为相同结构的 JSON 文件"

#: easyidp.jsonfile.dict2json:3 easyidp.jsonfile.save_json:3
#: easyidp.jsonfile.write_json:3 of
msgid "the dict object want to save as json file"
msgstr "要保存为 JSON 文件的字典对象"

#: easyidp.jsonfile.dict2json:5 easyidp.jsonfile.save_json:5
#: easyidp.jsonfile.write_json:5 of
msgid ""
"the path including json file name to save the json file e.g. "
"``D:/xxx/xxxx/save.json``"
msgstr "保存 JSON 文件的路径，包括文件名，例如 ``D:/xxx/xxxx/save.json``"

#: easyidp.jsonfile.dict2json:8 easyidp.jsonfile.save_json:8
#: easyidp.jsonfile.write_json:8 of
msgid "whether save \"readable\" json with indent, default 0 without indent"
msgstr "是否以缩进保存“可读”JSON，默认 0 无缩进"

#: easyidp.jsonfile.dict2json:10 easyidp.jsonfile.save_json:10
#: easyidp.jsonfile.write_json:10 of
msgid "the encoding type of output file"
msgstr "输出文件的编码类型"

#: easyidp.jsonfile.dict2json:23 of
msgid "Dict without indient:"
msgstr "无缩进的字典："

#: easyidp.jsonfile.dict2json:30 of
msgid "Dict with 4 space as indient:"
msgstr "使用 4 个空格缩进的字典："

#: easyidp.jsonfile.dict2json:41 of
msgid ":obj:`easyidp.jsonfile.write_json`, :obj:`easyidp.jsonfile.save_json`"
msgstr ""

#: ../../python_api/autodoc/easyidp.jsonfile.read_geojson.rst:2
msgid "easyidp.jsonfile.read\\_geojson"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1 easyidp.jsonfile.read_geojson:1
#: of
msgid "Read geojson file to python dict"
msgstr "将 geojson 文件读取为 Python 字典"

#: easyidp.jsonfile.read_geojson:3 of
#, fuzzy
msgid "The path to geojson file"
msgstr "Geojson 文件的路径"

#: easyidp.jsonfile.read_geojson:5 easyidp.roi.ROI.read_geojson:5
#: easyidp.roi.ROI.read_shp:9 easyidp.shp.read_shp:9 of
msgid ""
"by default None, the id or name of shp file fields as output dictionary "
"keys"
msgstr "默认值为 None，shp 文件字段的 ID 或名称作为输出字典的键"

#: easyidp.jsonfile.read_geojson:7 easyidp.roi.ROI.read_geojson:7
#: easyidp.roi.ROI.read_shp:11 easyidp.shp.read_shp:11 of
msgid "by default False, whether add column name to roi key."
msgstr "默认值为 False，是否将列名添加到 roi 键。"

#: easyidp.jsonfile.read_geojson:9 easyidp.shp.read_shp:15 of
msgid ""
"by default False, if given as true, will return extra pyproj.CRS object "
"of current shp file."
msgstr "默认值为 False，如果设置为 true，将返回当前 shp 文件的额外 pyproj.CRS 对象。"

#: easyidp.jsonfile.read_geojson:12 easyidp.shp.read_shp:18 of
msgid ""
"* *dict,* -- the dictionary with read numpy polygon coordinates    .. "
"code-block:: python        {'id1': np.array([[x1,y1],[x2,y2],...]),"
"        'id2': np.array([[x1,y1],[x2,y2],...]),...} * *pyproj.CRS, "
"optional* -- once set return_proj=True"
msgstr ""

#: easyidp.jsonfile.read_geojson:12 easyidp.shp.read_shp:18 of
msgid "*dict,* -- the dictionary with read numpy polygon coordinates"
msgstr "*dict,* -- 包含读取的 numpy 多边形坐标的字典"

#: easyidp.jsonfile.read_geojson:18 easyidp.shp.read_shp:24 of
msgid "*pyproj.CRS, optional* -- once set return_proj=True"
msgstr "*pyproj.CRS, 可选* -- 一旦设置 return_proj=True"

#: easyidp.jsonfile.read_geojson:22 of
#, fuzzy
msgid "The example geojons file has the following columns:"
msgstr "EasyIDP含有下面的几个模块"

#: easyidp.jsonfile.read_geojson:36 easyidp.jsonfile.read_json:10
#: easyidp.pointcloud.PointCloud.crop_point_cloud:10
#: easyidp.pointcloud.PointCloud.crop_rois:15
#: easyidp.pointcloud.PointCloud.read_point_cloud:12
#: easyidp.pointcloud.PointCloud.write_point_cloud:8
#: easyidp.roi.ROI.back2raw:62 easyidp.roi.ROI.crop:15
#: easyidp.roi.ROI.get_z_from_dsm:52 easyidp.visualize.draw_backward_one_roi:25
#: of
msgid "Data prepare:"
msgstr "数据准备："

#: easyidp.jsonfile.read_geojson:44 of
msgid "Use this function to read geojson:"
msgstr "使用此函数读取 geojson："

#: easyidp.jsonfile.read_geojson:58 of
msgid ""
"The ``196`` in previous code is the row 196, not the ``FID``=196. To use "
"the FID as result key, Please use ``name_field`` introduced below"
msgstr ""
"前面代码中的 ``196`` 是第 196 行，不是 ``FID``=196。要使用 FID 作为结果键，请使用下面介绍的 ``name_field``"

#: easyidp.jsonfile.read_geojson:61 of
msgid ""
"If want use other attributes as result keys, for example, the first "
"column ``FID`` as the key:"
msgstr ""
"如果想使用其他属性作为结果键，例如，将第一列 ``FID`` 作为键："

#: easyidp.jsonfile.read_geojson:75 of
msgid ""
"You can also combine multiple columns as the key values, by passing a "
"list to ``name_field``:"
msgstr ""
"您还可以通过传递一个列表给 ``name_field`` 来组合多个列作为键值："

#: easyidp.jsonfile.read_geojson:85 easyidp.shp.read_shp:92 of
msgid "And you can also add column_names to id by ``include_title=True`` :"
msgstr ""
"您还可以通过设置 ``include_title=True`` 将列名添加到 id："

#: easyidp.jsonfile.read_geojson:95 of
msgid ":obj:`easyidp.jsonfile.show_geojson_fields`, :obj:`easyidp.shp.read_shp`"
msgstr ""

#: ../../python_api/autodoc/easyidp.jsonfile.read_json.rst:2
msgid "easyidp.jsonfile.read\\_json"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1 easyidp.jsonfile.read_json:1 of
msgid "Read json file to python dict."
msgstr "将 JSON 文件读取为 Python 字典。"

#: easyidp.jsonfile.read_json:3 of
msgid "The path to json file"
msgstr "JSON 文件的路径"

#: ../../python_api/autodoc/easyidp.jsonfile.save_json.rst:2
msgid "easyidp.jsonfile.save\\_json"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1 easyidp.jsonfile.save_json:1
#: easyidp.jsonfile.write_json:1 of
msgid ""
"Save dict to the same structure json file, a function wrapper for "
":func:`dict2json`"
msgstr ""
"将字典保存为相同结构的 JSON 文件，是 :func:`dict2json` 的函数包装器"

#: easyidp.jsonfile.save_json:13 easyidp.jsonfile.write_json:13 of
msgid ":obj:`easyidp.jsonfile.dict2json`"
msgstr ""

#: ../../python_api/autodoc/easyidp.jsonfile.show_geojson_fields.rst:2
msgid "easyidp.jsonfile.show\\_geojson\\_fields"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1
#: easyidp.jsonfile.show_geojson_fields:1 of
msgid ""
"Show geojson properties data, for better setting ``name_field`` of "
":py:obj:`read_geojson <easyidp.roi.ROI.read_geojson>`"
msgstr ""
"显示 geojson 属性数据，以便更好地设置 :py:obj:`read_geojson <easyidp.roi.ROI.read_geojson>` 的 ``name_field``"

#: easyidp.jsonfile.show_geojson_fields:3 easyidp.roi.ROI.read_geojson:3 of
#, fuzzy
msgid "the file path of \\*.geojson"
msgstr "Geojson 文件的路径"

#: easyidp.jsonfile.show_geojson_fields:24 of
msgid ":obj:`easyidp.shp.show_shp_fields`"
msgstr ""

#: ../../python_api/autodoc/easyidp.jsonfile.write_json.rst:2
msgid "easyidp.jsonfile.write\\_json"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:2
msgid "easyidp.metashape.Metashape"
msgstr ""

#: ../../python_api/metashape.rst:18:<autosummary>:1
#: easyidp.metashape.Metashape:1 of
msgid "the object for each chunk in Metashape 3D reconstruction project"
msgstr "Metashape 3D 重建项目中每个块的对象"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: easyidp.metashape.Metashape.__init__:1 of
msgid "The method to initialize the Metashape class"
msgstr "初始化 Metashape 类的方法"

#: easyidp.metashape.Metashape.__init__:3 of
msgid ""
"The metashape project file to open, like \"xxxx.psx\",, by default None, "
"means create an empty class"
msgstr ""
"要打开的 metashape 项目文件，例如 \"xxxx.psx\"，默认值为 None，表示创建一个空类"

#: easyidp.metashape.Metashape.__init__:5
#: easyidp.metashape.Metashape.open_project:5 of
msgid ""
"The chunk id or name(label) want to open, by default None, open the first"
" chunk."
msgstr ""
"要打开的块 ID 或名称（标签），默认值为 None，打开第一个块。"

#: easyidp.metashape.Metashape.__init__:7 easyidp.pix4d.Pix4D.__init__:5
#: easyidp.pix4d.Pix4D.open_project:5 of
msgid "the original UAV image folder, by default None"
msgstr "原始无人机图像文件夹，默认值为 None"

#: easyidp.metashape.Metashape.__init__:9
#: easyidp.metashape.Metashape.change_photo_folder:10 of
msgid ""
"Ignore the missing photos when set to False, suitable for testing project"
" with just a few images, to avoid the FileNotFoundError"
msgstr ""
"设置为 False 时忽略丢失的照片，适用于仅有少量图像的测试项目，以避免 FileNotFoundError"

#: easyidp.metashape.Metashape.__init__:19 of
#, fuzzy
msgid "Then open the demo Metashape project:"
msgstr "然后打开示例 Metashape 项目"

#: easyidp.metashape.Metashape.__init__:30 of
msgid "Or you can create an empty class and then open project:"
msgstr "或者您可以创建一个空类，然后打开项目："

#: easyidp.metashape.Metashape.__init__:44 of
msgid ""
"One metashape project may have several chunks, and each "
"``easyidp.Metashape`` project could only handle with only one chunk at "
"once."
msgstr ""
"一个 Metashape 项目可能有多个块，每个 ``easyidp.Metashape`` 项目一次只能处理一个块。"

#: easyidp.metashape.Metashape.__init__:46 of
msgid "The arrow before ID shows which chunk has been opened"
msgstr "ID 前的箭头显示哪个块已被打开"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`__init__ <easyidp.metashape.Metashape.__init__>`\\ "
"\\(\\[project\\_path\\, chunk\\_id\\, ...\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`back2raw <easyidp.metashape.Metashape.back2raw>`\\ \\(roi\\[\\, "
"save\\_folder\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
#: easyidp.metashape.Metashape.back2raw:1 easyidp.pix4d.Pix4D.back2raw:1
#: easyidp.roi.ROI.back2raw:1 of
msgid "Projects several GIS coordintates ROIs (polygons) to all images"
msgstr "将多个 GIS 坐标 ROI（多边形）投影到所有图像上"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`back2raw_crs <easyidp.metashape.Metashape.back2raw_crs>`\\ "
"\\(points\\_xyz\\[\\, ignore\\, log\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: easyidp.metashape.Metashape.back2raw_crs:1 of
msgid "Projs one GIS coordintates ROI (polygon) to all images"
msgstr "将一个 GIS 坐标 ROI（多边形）投影到所有图像上"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`change_photo_folder "
"<easyidp.metashape.Metashape.change_photo_folder>`\\ "
"\\(raw\\_img\\_folder\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: easyidp.metashape.Metashape.change_photo_folder:1 of
#, fuzzy
msgid "Change the folder path of raw images"
msgstr "更改原始图像的文件夹路径"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`get_photo_position "
"<easyidp.metashape.Metashape.get_photo_position>`\\ \\(\\[to\\_crs\\, "
"refresh\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: easyidp.metashape.Metashape.get_photo_position:1
#: easyidp.pix4d.Pix4D.get_photo_position:1 of
msgid "Get all photos' center geo position (on given CRS)"
msgstr "获取所有照片的中心地理位置（在给定的 CRS 上）"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`open_chunk <easyidp.metashape.Metashape.open_chunk>`\\ "
"\\(chunk\\_id\\[\\, project\\_path\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: easyidp.metashape.Metashape.open_chunk:1 of
msgid "switch to the other chunk, or chunk in a new project"
msgstr "切换到其他块，或新项目中的块"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`open_project <easyidp.metashape.Metashape.open_project>`\\ "
"\\(project\\_path\\[\\, chunk\\_id\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: easyidp.metashape.Metashape.open_project:1
#: easyidp.pix4d.Pix4D.open_project:1 of
msgid "Open a new 3D reconstructin project to overwritting current project."
msgstr "打开一个新的 3D 重建项目以覆盖当前项目。"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`show_photo_folder "
"<easyidp.metashape.Metashape.show_photo_folder>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: easyidp.metashape.Metashape.show_photo_folder:1 of
msgid "A function to check the original photo path"
msgstr "检查原始照片路径的功能"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`show_roi_on_img <easyidp.metashape.Metashape.show_roi_on_img>`\\"
" \\(img\\_dict\\, roi\\_name\\[\\, img\\_name\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: easyidp.metashape.Metashape.show_roi_on_img:1
#: easyidp.pix4d.Pix4D.show_roi_on_img:1 of
msgid ""
"Visualize the specific backward projection results for given roi on the "
"given image."
msgstr "在给定图像上可视化给定 ROI 的特定反向投影结果。"

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
msgid ""
":py:obj:`sort_img_by_distance "
"<easyidp.metashape.Metashape.sort_img_by_distance>`\\ "
"\\(img\\_dict\\_all\\, roi\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.metashape.Metashape.rst:30:<autosummary>:1
#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: ../../python_api/reconstruct.rst:110:<autosummary>:1
#: easyidp.metashape.Metashape.sort_img_by_distance:1
#: easyidp.pix4d.Pix4D.sort_img_by_distance:1
#: easyidp.reconstruct.sort_img_by_distance:1 of
msgid ""
"Advanced wrapper of sorting back2raw img_dict results by distance from "
"photo to roi"
msgstr "按照片到 ROI 的距离排序 back2raw img_dict 结果的高级包装器"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`crs <easyidp.metashape.Metashape.crs>`\\"
msgstr ""

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1
#: easyidp.reconstruct.Recons.crs:1
#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ""
"the geographic coordinates (often the same as the export DOM and DSM),  "
"``<class 'pyproj.crs.crs.CRS'>``"
msgstr ""

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`dom <easyidp.metashape.Metashape.dom>`\\"
msgstr ""

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1
#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1
#: easyidp.reconstruct.Recons.dom:1 of
msgid ""
"The output digitial orthomosaic map (DOM), :class:`easyidp.GeoTiff "
"<easyidp.geotiff.GeoTiff>`"
msgstr "输出的数字正射影像图 (DOM)，:class:`easyidp.GeoTiff <easyidp.geotiff.GeoTiff>`"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`dsm <easyidp.metashape.Metashape.dsm>`\\"
msgstr ""

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1
#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1
#: easyidp.reconstruct.Recons.dsm:1 of
msgid ""
"The output digitial surface map (DSM), :class:`easyidp.GeoTiff "
"<easyidp.geotiff.GeoTiff>`"
msgstr "输出的数字表面模型 (DSM)，:class:`easyidp.GeoTiff <easyidp.geotiff.GeoTiff>`"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`pcd <easyidp.metashape.Metashape.pcd>`\\"
msgstr ""

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1
#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1
#: easyidp.reconstruct.Recons.pcd:1 of
msgid ""
"The output point cloud, :class:`easyidp.PointCloud "
"<easyidp.pointcloud.PointCloud>`"
msgstr "输出的点云，:class:`easyidp.PointCloud <easyidp.pointcloud.PointCloud>`"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`project_folder <easyidp.metashape.Metashape.project_folder>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.project_folder:1 of
#, fuzzy
msgid "the folder contains the metashape project (.psx) files"
msgstr "包含Metashape项目 (.psx) 文件的文件夹"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`project_name <easyidp.metashape.Metashape.project_name>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.project_name:1 of
#, fuzzy
msgid "the metashape project (file) name."
msgstr "Metashape项目（文件）名称。"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`chunk_id <easyidp.metashape.Metashape.chunk_id>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.chunk_id:1 of
msgid ""
"the chunk that be picked as for easyidp (this class, only deal with one "
"chunk in metashape project)"
msgstr "被选为easyidp的块（本类只处理Metashape项目中的一个块）"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`raw_img_folder <easyidp.metashape.Metashape.raw_img_folder>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.raw_img_folder:1 of
#, fuzzy
msgid "the folder that contains the origial images"
msgstr "包含原始图像的文件夹"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`label <easyidp.metashape.Metashape.label>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.label:1
#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 easyidp.pix4d.Pix4D.label:1
#: of
msgid "project / chunk name"
msgstr "项目 / 块名称"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`meta <easyidp.metashape.Metashape.meta>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.meta:1
#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 easyidp.pix4d.Pix4D.meta:1 of
msgid "project meta information"
msgstr "项目元信息"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`enabled <easyidp.metashape.Metashape.enabled>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.enabled:1
#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 easyidp.pix4d.Pix4D.enabled:1
#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1
#: easyidp.reconstruct.Recons.enabled:1 of
msgid ""
"whether this project is activated, (often for Metashape), ``<class "
"'bool'>``"
msgstr "该项目是否被激活，（通常用于Metashape），``<class 'bool'>``"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`sensors <easyidp.metashape.Metashape.sensors>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.sensors:1
#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1
#: easyidp.reconstruct.Recons.sensors:1 of
msgid ""
"the container for all sensors in this project (camera model), ``<class "
"'easyidp.Container'>``, a dict-like object consisted by :py:class:`Sensor"
" <easyidp.reconstruct.Sensor>`"
msgstr ""
msgstr "该项目中所有传感器的容器（相机模型），``<class 'easyidp.Container'>``，由 :py:class:`Sensor <easyidp.reconstruct.Sensor>` 组成的类字典对象"

#: easyidp.metashape.Metashape.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`photos <easyidp.metashape.Metashape.photos>`\\"
msgstr ""

#: ../../docstring easyidp.metashape.Metashape.back2raw:1:<autosummary>:1
#: easyidp.metashape.Metashape.photos:1
#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1
#: easyidp.reconstruct.Recons.photos:1 of
msgid ""
"the container for all photos used in this project (images), ``<class "
"'easyidp.Container'>``, a dict-like object consisted by :py:class:`Photo "
"<easyidp.reconstruct.Photo>`"
msgstr "该项目中所有照片的容器（图像），``<class 'easyidp.Container'>``，由 :py:class:`Photo <easyidp.reconstruct.Photo>` 组成的类字典对象"

#: easyidp.metashape.Metashape.back2raw:3 easyidp.pix4d.Pix4D.back2raw:3
#: easyidp.roi.ROI.back2raw:3 of
msgid "the <ROI> object created by easyidp.ROI() or dictionary"
msgstr "由easyidp.ROI()或字典创建的<ROI>对象"

#: easyidp.metashape.Metashape.back2raw:5
#: easyidp.metashape.Metashape.sort_img_by_distance:12
#: easyidp.pix4d.Pix4D.sort_img_by_distance:12
#: easyidp.reconstruct.sort_img_by_distance:14 of
msgid ""
"the folder to save json files and parts of ROI on raw images, by default "
"None"
msgstr "保存json文件和原始图像上ROI部分的文件夹，默认值为None"

#: easyidp.metashape.Metashape.back2raw:7
#: easyidp.metashape.Metashape.back2raw_crs:5 easyidp.pix4d.Pix4D.back2raw:11
#: easyidp.pix4d.Pix4D.back2raw_crs:9 easyidp.roi.ROI.back2raw:11 of
msgid ""
"Whether tolerate small parts outside image, check "
":func:`easyidp.reconstruct.Sensor.in_img_boundary` for more details.  - "
"``None``: strickly in image area; - ``x``: only y (vertical) in image "
"area, x can outside image; - ``y``: only x (horizontal) in image area, y "
"can outside image."
msgstr "是否容忍图像外的小部分，详见 :func:`easyidp.reconstruct.Sensor.in_img_boundary`。  - ``None``：严格在图像区域内； - ``x``：仅y（垂直）在图像区域内，x可以在图像外； - ``y``：仅x（水平）在图像区域内，y可以在图像外。"

#: easyidp.metashape.Metashape.back2raw:7
#: easyidp.metashape.Metashape.back2raw_crs:5 easyidp.pix4d.Pix4D.back2raw:11
#: easyidp.pix4d.Pix4D.back2raw_crs:9 easyidp.roi.ROI.back2raw:11 of
msgid ""
"Whether tolerate small parts outside image, check "
":func:`easyidp.reconstruct.Sensor.in_img_boundary` for more details."
msgstr "是否容忍图像外的小部分，详见:func:`easyidp.reconstruct.Sensor.in_img_boundary`。"

#: easyidp.metashape.Metashape.back2raw:10
#: easyidp.metashape.Metashape.back2raw_crs:8 easyidp.pix4d.Pix4D.back2raw:14
#: easyidp.pix4d.Pix4D.back2raw_crs:12
#: easyidp.reconstruct.Sensor.in_img_boundary:7 easyidp.roi.ROI.back2raw:13 of
msgid "``None``: strickly in image area;"
msgstr "``None``：严格在图像区域内；"

#: easyidp.metashape.Metashape.back2raw:11
#: easyidp.metashape.Metashape.back2raw_crs:9 easyidp.pix4d.Pix4D.back2raw:15
#: easyidp.pix4d.Pix4D.back2raw_crs:13
#: easyidp.reconstruct.Sensor.in_img_boundary:8 easyidp.roi.ROI.back2raw:14 of
msgid "``x``: only y (vertical) in image area, x can outside image;"
msgstr "``x``：仅y（垂直）在图像区域内，x可以在图像外；"

#: easyidp.metashape.Metashape.back2raw:12
#: easyidp.metashape.Metashape.back2raw_crs:10 easyidp.pix4d.Pix4D.back2raw:16
#: easyidp.pix4d.Pix4D.back2raw_crs:14
#: easyidp.reconstruct.Sensor.in_img_boundary:9 easyidp.roi.ROI.back2raw:15 of
msgid "``y``: only x (horizontal) in image area, y can outside image."
msgstr "``y``：仅x（水平）在图像区域内，y可以在图像外。"

#: easyidp.metashape.Metashape.back2raw:14
#: easyidp.metashape.Metashape.back2raw_crs:12 easyidp.pix4d.Pix4D.back2raw:18
#: easyidp.pix4d.Pix4D.back2raw_crs:16
#: easyidp.reconstruct.Sensor.in_img_boundary:24 easyidp.roi.ROI.back2raw:17 of
msgid "whether print log for debugging, by default False"
msgstr "是否打印日志以进行调试，默认值为False"

#: easyidp.metashape.Metashape.back2raw:36 easyidp.pix4d.Pix4D.back2raw:42 of
msgid "Then using this function to do backward projection:"
msgstr "然后使用此函数进行反向投影："

#: easyidp.metashape.Metashape.back2raw_crs:3
#: easyidp.pix4d.Pix4D.back2raw_crs:3 of
msgid "The 3D coordinates of polygon vertexm, in CRS coordinates"
msgstr "多边形顶点的3D坐标，CRS坐标"

#: easyidp.metashape.Metashape.back2raw_crs:15 of
msgid "a dictionary that key = img_name and values= pixel coordinate"
msgstr "一个字典，键=图像名称，值=像素坐标"

#: easyidp.metashape.Metashape.back2raw_crs:20
#: easyidp.pix4d.Pix4D.back2raw_crs:24 of
msgid "Data preparation"
msgstr "数据准备"

#: easyidp.metashape.Metashape.back2raw_crs:38 of
msgid ""
"..caution:: specifying the CRS of metashape project (``ms.crs = "
"dsm.crs``) is required before doing backward projection calculation"
msgstr "..注意:: 在进行反向投影计算之前，需要指定Metashape项目的CRS（``ms.crs = dsm.crs``）"

#: easyidp.metashape.Metashape.back2raw_crs:40
#: easyidp.pix4d.Pix4D.back2raw_crs:44 of
msgid ""
"Then use this function to find the previous ROI positions on the raw "
"images:"
msgstr "然后使用此函数在原始图像上找到先前的ROI位置："

#: easyidp.metashape.Metashape.change_photo_folder:3 of
msgid ""
"The new folder path contains raw image folder.  If type == `str` :     "
"replace the root string directly. if type == `dict` : (not implemented)"
"     e.g. {'path/to/flight1/': 'new/path/to/flight1', }"
msgstr "包含原始图像文件夹的新文件夹路径。如果类型== `str`：直接替换根字符串。如果类型== `dict`：（未实现）例如：{'path/to/flight1/': 'new/path/to/flight1', }"

#: easyidp.metashape.Metashape.change_photo_folder:3 of
msgid "The new folder path contains raw image folder."
msgstr "包含原始图像文件夹的新文件夹路径。"

#: easyidp.metashape.Metashape.change_photo_folder:5 of
msgid "If type == `str` :"
msgstr "如果类型== `str`："

#: easyidp.metashape.Metashape.change_photo_folder:6 of
msgid "replace the root string directly."
msgstr "直接替换根字符串。"

#: easyidp.metashape.Metashape.change_photo_folder:7 of
msgid "if type == `dict`"
msgstr "如果类型== `dict`"

#: easyidp.metashape.Metashape.change_photo_folder:-1 of
msgid "(not implemented)"
msgstr "（未实现）"

#: easyidp.metashape.Metashape.change_photo_folder:8 of
msgid "e.g. {'path/to/flight1/': 'new/path/to/flight1', }"
msgstr "例如：{'path/to/flight1/': 'new/path/to/flight1', }"

#: easyidp.metashape.Metashape.get_photo_position:3
#: easyidp.pix4d.Pix4D.get_photo_position:3 of
msgid "Transformed to another geo coordinate, by default None, the project.crs"
msgstr "转换为另一个地理坐标，默认值为None，即项目的CRS"

#: easyidp.metashape.Metashape.get_photo_position:5
#: easyidp.pix4d.Pix4D.get_photo_position:5 of
msgid ""
"- ``False`` : Use cached results (if have), by default - ``True`` : "
"recalculate the photo position"
msgstr "- ``False``：使用缓存的结果（如果有），默认值 - ``True``：重新计算照片位置"

#: easyidp.metashape.Metashape.get_photo_position:6
#: easyidp.pix4d.Pix4D.get_photo_position:6 of
msgid "``False`` : Use cached results (if have), by default"
msgstr "``False``：使用缓存的结果（如果有），默认值"

#: easyidp.metashape.Metashape.get_photo_position:7
#: easyidp.pix4d.Pix4D.get_photo_position:7 of
msgid "``True`` : recalculate the photo position"
msgstr "``True``：重新计算照片位置"

#: easyidp.metashape.Metashape.get_photo_position:10
#: easyidp.pix4d.Pix4D.get_photo_position:10 of
msgid "The dictionary contains \"photo.label\": [x, y, z] coordinates"
msgstr "字典包含\"photo.label\"：[x, y, z]坐标"

#: easyidp.metashape.Metashape.get_photo_position:27
#: easyidp.pix4d.Pix4D.get_photo_position:24 of
msgid "Then use this function to get the photo position in 3D world:"
msgstr "然后使用此函数获取照片在3D世界中的位置："

#: easyidp.metashape.Metashape.get_photo_position:38 of
msgid ""
"by default, if not specifying the CRS of metashape project, it will "
"return in default CRS (epsg: 4326) -> (lon, lat, height), if need turn to"
" the same coordinate like DOM/DSM, please specify the CRS first"
msgstr "默认情况下，如果未指定metashape项目的CRS，它将以默认CRS（epsg: 4326）返回 -> (经度, 纬度, 高度)，如果需要转换为与DOM/DSM相同的坐标，请先指定CRS"

#: easyidp.metashape.Metashape.open_chunk:3 of
msgid "The chunk id or name(label) want to open"
msgstr "要打开的块ID或名称（标签）"

#: easyidp.metashape.Metashape.open_chunk:5 of
msgid ""
"The new metashape project file to open, like \"xxxx.psx\",, by default "
"None, means swtich inside current metashape project"
msgstr "要打开的新Metashape项目文件，如“xxxx.psx”，默认值为None，表示在当前Metashape项目内切换"

#: easyidp.metashape.Metashape.open_chunk:27 of
msgid "Then switch from chunk 1 to chunk 4, by id or by label:"
msgstr "然后通过ID或标签从块1切换到块4："

#: easyidp.metashape.Metashape.open_project:3 of
msgid ""
"The pix4d project file to open, like \"xxxx.psx\", or \"xxxx\" without "
"suffix."
msgstr "要打开的pix4d项目文件，如“xxxx.psx”，或不带后缀的“xxxx”。"

#: easyidp.metashape.Metashape.show_roi_on_img:3
#: easyidp.pix4d.Pix4D.show_roi_on_img:3 of
msgid "The backward results from back2raw()"
msgstr "来自back2raw()的反向结果"

#: easyidp.metashape.Metashape.show_roi_on_img:5
#: easyidp.pix4d.Pix4D.show_roi_on_img:5 of
msgid "The roi name to show"
msgstr "要显示的ROI名称"

#: easyidp.metashape.Metashape.show_roi_on_img:7 of
msgid "the image file name, by default None, plotting all available images"
msgstr "图像文件名，默认值为None，绘制所有可用图像"

#: easyidp.metashape.Metashape.show_roi_on_img:9
#: easyidp.pix4d.Pix4D.show_roi_on_img:9
#: easyidp.visualize.draw_polygon_on_img:9 of
msgid ""
"the corrected 2D polygon pixel coordiante on the image (if have), by "
"default None"
msgstr "图像上校正的2D多边形像素坐标（如果有），默认值为None"

#: easyidp.metashape.Metashape.show_roi_on_img:11
#: easyidp.pix4d.Pix4D.show_roi_on_img:11 of
msgid ""
"The image title displayed on the top, by default None -> ``ROI [roi_name]"
" on [img_name]``"
msgstr "显示在顶部的图像标题，默认值为None -> ``ROI [roi_name] on [img_name]``"

#: easyidp.metashape.Metashape.show_roi_on_img:13
#: easyidp.pix4d.Pix4D.show_roi_on_img:13
#: easyidp.visualize.draw_backward_one_roi:12
#: easyidp.visualize.draw_polygon_on_img:13 of
msgid "file path to save the output figure, by default None"
msgstr "保存输出图形的文件路径，默认值为None"

#: easyidp.metashape.Metashape.show_roi_on_img:15
#: easyidp.pix4d.Pix4D.show_roi_on_img:15
#: easyidp.visualize.draw_backward_one_roi:14
#: easyidp.visualize.draw_polygon_on_img:15 of
msgid ""
"whether display (in jupyter notebook) or popup (in command line) the "
"figure, by default False"
msgstr "是否显示（在jupyter notebook中）或弹出（在命令行中）图形，默认值为False"

#: easyidp.metashape.Metashape.show_roi_on_img:17
#: easyidp.pix4d.Pix4D.show_roi_on_img:17
#: easyidp.visualize.draw_backward_one_roi:16
#: easyidp.visualize.draw_polygon_on_img:17 of
msgid "the polygon line color, by default 'red'"
msgstr "多边形线条颜色，默认值为'红色'"

#: easyidp.metashape.Metashape.show_roi_on_img:19
#: easyidp.pix4d.Pix4D.show_roi_on_img:19
#: easyidp.visualize.draw_backward_one_roi:18
#: easyidp.visualize.draw_polygon_on_img:19 of
msgid "the polygon transparency, by default 0.5"
msgstr "多边形透明度，默认值为0.5"

#: easyidp.metashape.Metashape.show_roi_on_img:21
#: easyidp.pix4d.Pix4D.show_roi_on_img:21
#: easyidp.visualize.draw_backward_one_roi:20
#: easyidp.visualize.draw_polygon_on_img:21 of
msgid "the dpi of produced figure, by default 72"
msgstr "生成图形的dpi，默认值为72"

#: easyidp.metashape.Metashape.show_roi_on_img:30
#: easyidp.pix4d.Pix4D.show_roi_on_img:30 of
msgid "Check the \"N1W1\" ROI on image \"DJI_0479.JPG\":"
msgstr "检查图像\"DJI_0479.JPG\"上的\"N1W1\" ROI："

#: easyidp.metashape.Metashape.show_roi_on_img:36
#: easyidp.pix4d.Pix4D.show_roi_on_img:36 of
msgid "Check the \"N1W1\" ROI on all available images:"
msgstr "检查所有可用图像上的\"N1W1\" ROI："

#: easyidp.metashape.Metashape.show_roi_on_img:40
#: easyidp.pix4d.Pix4D.show_roi_on_img:40 of
msgid ""
"For more details, please check in :ref:`this example <show-one-roi-on-"
"img-demo>`"
msgstr "有关更多详细信息，请参见 :ref:`此示例 <show-one-roi-on-img-demo>`"

#: easyidp.metashape.Metashape.show_roi_on_img:42
#: easyidp.pix4d.Pix4D.show_roi_on_img:42 of
msgid ""
":obj:`easyidp.visualize.draw_polygon_on_img`, "
":obj:`easyidp.visualize.draw_backward_one_roi`"
msgstr ""

#: easyidp.metashape.Metashape.sort_img_by_distance:3
#: easyidp.pix4d.Pix4D.sort_img_by_distance:3
#: easyidp.reconstruct.sort_img_by_distance:5 of
msgid ""
"All output dict of roi.back2raw(...) e.g. img_dict = roi.back2raw(...) ->"
" img_dict"
msgstr "roi.back2raw(...)的所有输出字典，例如 img_dict = roi.back2raw(...) -> img_dict"

#: easyidp.metashape.Metashape.sort_img_by_distance:6
#: easyidp.pix4d.Pix4D.sort_img_by_distance:6
#: easyidp.reconstruct.sort_img_by_distance:8 of
msgid "Your roi variable"
msgstr "您的ROI变量"

#: easyidp.metashape.Metashape.sort_img_by_distance:8
#: easyidp.pix4d.Pix4D.sort_img_by_distance:8
#: easyidp.reconstruct.sort_img_by_distance:10 of
msgid "Keep the closest {x} images"
msgstr "保留最近的{x}张图像"

#: easyidp.metashape.Metashape.sort_img_by_distance:10
#: easyidp.pix4d.Pix4D.sort_img_by_distance:10
#: easyidp.reconstruct.sort_img_by_distance:12 of
msgid "Keep the images closer than this distance to ROI."
msgstr "保留距离ROI比此距离更近的图像。"

#: easyidp.metashape.Metashape.sort_img_by_distance:15
#: easyidp.pix4d.Pix4D.sort_img_by_distance:15 of
msgid "the same structure as output of roi.back2raw(...)"
msgstr "与roi.back2raw(...)的输出结构相同"

#: easyidp.metashape.Metashape.sort_img_by_distance:20
#: easyidp.pix4d.Pix4D.sort_img_by_distance:20 of
msgid "In the previous :func:`back2raw` results :"
msgstr "在之前的 :func:`back2raw` 结果中："

#: easyidp.metashape.Metashape.sort_img_by_distance:40
#: easyidp.pix4d.Pix4D.sort_img_by_distance:40 of
msgid ""
"The image are in chaos order, in most application cases, probable only "
"1-3 closest images (to ROI in real world) are required, so this function "
"is provided to sort/filter out."
msgstr "图像顺序混乱，在大多数应用情况下，可能只需要1-3张最接近（现实世界中的ROI）的图像，因此提供了此函数进行排序/过滤。"

#: easyidp.metashape.Metashape.sort_img_by_distance:43
#: easyidp.pix4d.Pix4D.sort_img_by_distance:43 of
msgid ""
"In the following example, it filtered 3 images whose distance from camera"
" to ROI in real world smaller than 10m:"
msgstr "在以下示例中，它过滤了3张相机到现实世界中的ROI距离小于10米的图像："

#: easyidp.metashape.Metashape.sort_img_by_distance:92
#: easyidp.pix4d.Pix4D.sort_img_by_distance:92 of
msgid "Or pick the closest one image:"
msgstr "或选择最近的一张图像："

#: easyidp.metashape.Metashape.sort_img_by_distance:119
#: easyidp.pix4d.Pix4D.sort_img_by_distance:119 of
msgid ""
"You can use ``list(dict.keys())[0]`` to get the image name automatically "
"to iterate each plot:"
msgstr "您可以使用``list(dict.keys())[0]``自动获取图像名称以迭代每个绘图："

#: ../../python_api/autodoc/easyidp.metashape.apply_transform_matrix.rst:2
msgid "easyidp.metashape.apply\\_transform\\_matrix"
msgstr ""

#: easyidp.metashape.apply_transform_matrix:1 of
msgid ""
"Transforms a point or points in homogeneous coordinates. equal to "
"Metashape.Matrix.mulp() or Metashape.Matrix.mulv()"
msgstr "在齐次坐标中变换一个或多个点。等同于Metashape.Matrix.mulp()或Metashape.Matrix.mulv()"

#: easyidp.metashape.apply_transform_matrix:4 of
msgid "4x4 transform numpy array"
msgstr "4x4变换numpy数组"

#: easyidp.metashape.apply_transform_matrix:6 of
msgid ""
"For example:  .. code-block:: python      # 1x3 single point     >>> "
"np.array([1,2,3])        x  y  z     0  1  2  3      # nx3 points     >>>"
" np.array([[1,2,3], [4,5,6], ...])        x  y  z     0  1  2  3     1  4"
"  5  6     ..."
msgstr ""

#: easyidp.metashape.apply_transform_matrix:6 of
msgid "For example:"
msgstr "例如："

#: easyidp.metashape.apply_transform_matrix:23 of
msgid ""
"**out** -- same size as input points_np:  .. code-block:: text         x"
"  y  z     0  1  2  3     1  4  5  6"
msgstr ""

#: easyidp.metashape.apply_transform_matrix:23 of
msgid "**out** -- same size as input points_np:"
msgstr "**输出** -- 与输入points_np大小相同："

#: ../../python_api/autodoc/easyidp.metashape.read_chunk_zip.rst:2
msgid "easyidp.metashape.read\\_chunk\\_zip"
msgstr ""

#: ../../python_api/metashape.rst:34:<autosummary>:1
#: easyidp.metashape.read_chunk_zip:1 of
msgid "parse xml in the given ``chunk.zip`` file."
msgstr "解析给定``chunk.zip``文件中的XML。"

#: easyidp.metashape.read_chunk_zip:7 of
msgid "the chunk id start from 0 of chunk.zip"
msgstr "chunk.zip中块ID从0开始"

#: easyidp.metashape.read_chunk_zip:9 of
msgid "return None if chunk enabled is False in metashape project"
msgstr "如果metashape项目中的块未启用，则返回None"

#: easyidp.metashape.read_chunk_zip:11 of
msgid "Only parse chunk.label, by default False"
msgstr "仅解析chunk.label，默认值为False"

#: easyidp.metashape.read_chunk_zip:18 easyidp.metashape.read_project_zip:13 of
msgid ""
"If one project path look likes: ``/root/to/metashape/test_proj.psx``, "
"then the input parameter should be:"
msgstr "如果一个项目路径看起来像：``/root/to/metashape/test_proj.psx``，那么输入参数应该是："

#: easyidp.metashape.read_chunk_zip:21 easyidp.metashape.read_project_zip:16 of
msgid "``project_folder = \"/root/to/metashape/\"``"
msgstr ""

#: easyidp.metashape.read_chunk_zip:22 easyidp.metashape.read_project_zip:17 of
msgid "``project_name = \"test_proj\"``"
msgstr ""

#: easyidp.metashape.read_chunk_zip:24 of
msgid "Example for xml_str:"
msgstr "xml_str示例："

#: easyidp.metashape.read_chunk_zip:72 of
msgid "Then parse the chunk:"
msgstr "然后解析块："

#: ../../python_api/autodoc/easyidp.metashape.read_project_zip.rst:2
msgid "easyidp.metashape.read\\_project\\_zip"
msgstr ""

#: ../../python_api/metashape.rst:34:<autosummary>:1
#: easyidp.metashape.read_project_zip:1 of
msgid "parse xml in the ``project.zip`` file, and get the chunk id and path"
msgstr "解析``project.zip``文件中的XML，并获取块ID和路径"

#: easyidp.metashape.read_project_zip:8 of
msgid "**project_dict** -- key = chunk_id, value = chunk_path"
msgstr "**project_dict** -- 键=块ID，值=块路径"

#: easyidp.metashape.read_project_zip:19 of
msgid "And obtained xml_str example:"
msgstr "并获得xml_str示例："

#: easyidp.metashape.read_project_zip:50 of
msgid "Then use this function to"
msgstr "然后使用此函数"

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:2
msgid "easyidp.pix4d.Pix4D"
msgstr ""

#: ../../python_api/pix4d.rst:17:<autosummary>:1 easyidp.pix4d.Pix4D:1 of
msgid "A Pix4D class, contains information of 3D reconstruction."
msgstr "一个Pix4D类，包含3D重建的信息。"

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: easyidp.pix4d.Pix4D.__init__:1 of
msgid "The method to initialize the Pix4D class"
msgstr "初始化Pix4D类的方法"

#: easyidp.pix4d.Pix4D.__init__:3 of
msgid ""
"The pix4d project file to open, like \"xxxx.p4d\", by default None, means"
" create an empty class"
msgstr "要打开的pix4d项目文件，如“xxxx.p4d”，默认值为None，表示创建一个空类"

#: easyidp.pix4d.Pix4D.__init__:7 easyidp.pix4d.Pix4D.open_project:7 of
msgid ""
"the folder of pix4d project parameters, just in case user changed the "
"default folder structure (``...\\project_name\\1_initial\\params\\``), by"
" default None"
msgstr "pix4d项目参数的文件夹，以防用户更改了默认文件夹结构（``...\\project_name\\1_initial\\params\\``），默认值为None"

#: easyidp.pix4d.Pix4D.__init__:18 of
msgid "Then open the demo pix4d project:"
msgstr "然后打开演示pix4d项目："

#: easyidp.pix4d.Pix4D.__init__:24 of
msgid ""
"Or manual specify parameters if the project folder structure has been "
"changed."
msgstr "或者，如果项目文件夹结构已更改，请手动指定参数。"

#: easyidp.pix4d.Pix4D.__init__:34 of
msgid "Or you can create an empty project, and the open a given path:"
msgstr "或者您可以创建一个空项目，然后打开给定路径："

#: easyidp.pix4d.Pix4D.__init__:47 of
msgid ""
"In previous case, the manager reorganized the project structure and "
"outputs of ``test_data.pix4d.lotus_folder``"
msgstr "在之前的情况下，经理重新组织了``test_data.pix4d.lotus_folder``的项目结构和输出"

#: easyidp.pix4d.Pix4D.__init__:49 of
msgid ""
"(e.g., moved the ``\\project_name\\1_initial\\params\\`` to "
"``\\project_name\\params\\``, as well as other outputs, the following "
"folder is no more a standard pix4d project)"
msgstr "（例如，将``\\project_name\\1_initial\\params\\``移动到``\\project_name\\params\\``，以及其他输出，以下文件夹不再是标准的pix4d项目）"

#: easyidp.pix4d.Pix4D.__init__:65 of
msgid ""
"The default loading doesn't work, because it is not a standard pix4d "
"project:"
msgstr "默认加载不起作用，因为它不是标准的pix4d项目："

#: easyidp.pix4d.Pix4D.__init__:81 of
msgid "In this case, must manual specfiy the ``param_folder``"
msgstr "在这种情况下，必须手动指定 ``param_folder`` "

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ""
":py:obj:`__init__ <easyidp.pix4d.Pix4D.__init__>`\\ "
"\\(\\[project\\_path\\, raw\\_img\\_folder\\, ...\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ""
":py:obj:`back2raw <easyidp.pix4d.Pix4D.back2raw>`\\ \\(roi\\[\\, "
"save\\_folder\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ""
":py:obj:`back2raw_crs <easyidp.pix4d.Pix4D.back2raw_crs>`\\ "
"\\(points\\_xyz\\[\\, distort\\_correct\\, ...\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: easyidp.pix4d.Pix4D.back2raw_crs:1 of
msgid "Projects one GIS coordintates ROI (polygon) to all images"
msgstr "将一个GIS坐标ROI（多边形）投影到所有图像"

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ""
":py:obj:`get_photo_position <easyidp.pix4d.Pix4D.get_photo_position>`\\ "
"\\(\\[to\\_crs\\, refresh\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ":py:obj:`load_dom <easyidp.pix4d.Pix4D.load_dom>`\\ \\(geotiff\\_path\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: easyidp.pix4d.Pix4D.load_dom:1 of
msgid "Manual load the DOM file generated by this Pix4D project"
msgstr "手动加载此Pix4D项目生成的DOM文件"

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ":py:obj:`load_dsm <easyidp.pix4d.Pix4D.load_dsm>`\\ \\(geotiff\\_path\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: easyidp.pix4d.Pix4D.load_dsm:1 of
msgid "Manual load the DSM file generated by this Pix4D project"
msgstr "手动加载此Pix4D项目生成的DSM文件"

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ":py:obj:`load_pcd <easyidp.pix4d.Pix4D.load_pcd>`\\ \\(pcd\\_path\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
#: easyidp.pix4d.Pix4D.load_pcd:1 of
msgid "Manual load the point cloud file generated by this Pix4D project"
msgstr "手动加载此Pix4D项目生成的点云文件"

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ""
":py:obj:`open_project <easyidp.pix4d.Pix4D.open_project>`\\ "
"\\(project\\_path\\[\\, raw\\_img\\_folder\\, ...\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ""
":py:obj:`show_roi_on_img <easyidp.pix4d.Pix4D.show_roi_on_img>`\\ "
"\\(img\\_dict\\, roi\\_name\\[\\, img\\_name\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.Pix4D.rst:30:<autosummary>:1
msgid ""
":py:obj:`sort_img_by_distance "
"<easyidp.pix4d.Pix4D.sort_img_by_distance>`\\ \\(img\\_dict\\_all\\, "
"roi\\[\\, ...\\]\\)"
msgstr ""

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`crs <easyidp.pix4d.Pix4D.crs>`\\"
msgstr ""

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`dom <easyidp.pix4d.Pix4D.dom>`\\"
msgstr ""

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`dsm <easyidp.pix4d.Pix4D.dsm>`\\"
msgstr ""

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`pcd <easyidp.pix4d.Pix4D.pcd>`\\"
msgstr ""

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`software <easyidp.pix4d.Pix4D.software>`\\"
msgstr ""

#: ../../docstring easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1
#: easyidp.pix4d.Pix4D.software:1 of
msgid ""
"the 3D reconstruction project software, in ['pix4d', 'metashape'], "
"``<class 'str'>``"
msgstr "3D重建项目软件，在['pix4d', 'metashape']中，``<class 'str'>``"

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`offset_np <easyidp.pix4d.Pix4D.offset_np>`\\"
msgstr ""

#: ../../docstring easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1
#: easyidp.pix4d.Pix4D.offset_np:1 of
#, fuzzy
msgid "pix4d point cloud offset"
msgstr "pix4d点云偏移"

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`label <easyidp.pix4d.Pix4D.label>`\\"
msgstr ""

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`meta <easyidp.pix4d.Pix4D.meta>`\\"
msgstr ""

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`enabled <easyidp.pix4d.Pix4D.enabled>`\\"
msgstr ""

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`sensors <easyidp.pix4d.Pix4D.sensors>`\\"
msgstr ""

#: ../../docstring easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1
#: easyidp.pix4d.Pix4D.sensors:1 of
msgid ""
"the container for all sensors in this project (camera model), ``<class "
"'easyidp.Container'>``"
msgstr "该项目中所有传感器的容器（相机模型），``<class 'easyidp.Container'>``"

#: easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`photos <easyidp.pix4d.Pix4D.photos>`\\"
msgstr ""

#: ../../docstring easyidp.pix4d.Pix4D.back2raw:1:<autosummary>:1
#: easyidp.pix4d.Pix4D.photos:1 of
msgid ""
"the container for all photos used in this project (images), ``<class "
"'easyidp.Container'>``"
msgstr "该项目中所有照片的容器（图像），``<class 'easyidp.Container'>``"

#: easyidp.pix4d.Pix4D.back2raw:5 easyidp.roi.ROI.back2raw:5 of
msgid ""
"the folder to save projected preview images and json files, by default "
"\"\""
msgstr "用于保存投影预览图像和json文件的文件夹，默认值为\"\""

#: easyidp.pix4d.Pix4D.back2raw:7 easyidp.pix4d.Pix4D.back2raw_crs:5 of
msgid ""
"Whether do distortion correction, by default True (back to raw image); If"
" back to software corrected images without len distortion, set it to "
"True. Pix4D support do this operation, seems metashape not supported yet."
msgstr "是否进行畸变校正，默认值为True（返回原始图像）；如果返回没有镜头畸变的软件校正图像，请将其设置为True。Pix4D支持此操作，Metashape似乎尚不支持。"

#: easyidp.pix4d.Pix4D.back2raw_crs:19 of
msgid "a dictionary like ``{img_name: pixel coordinate, ... }``"
msgstr "一个类似``{img_name: pixel coordinate, ... }``的字典"

#: easyidp.pix4d.Pix4D.load_dom:3 of
#, fuzzy
msgid "The path to DOM file"
msgstr "DOM文件的路径"

#: easyidp.pix4d.Pix4D.load_dsm:3 of
#, fuzzy
msgid "The path to DSM file"
msgstr "DSM文件的路径"

#: easyidp.pix4d.Pix4D.load_pcd:3 of
#, fuzzy
msgid "The path to point cloud file"
msgstr "点云文件的路径"

#: easyidp.pix4d.Pix4D.load_pcd:8 of
msgid ""
"The pix4d produced point cloud is offsetted (xyz-offset). This function "
"already handle adding offset back to point cloud. If you need manual "
"specify ``idp.PointCloud()`` by yourself, please do:"
msgstr "pix4d生成的点云是偏移的（xyz-offset）。此函数已经处理了将偏移添加回点云。如果您需要手动指定 ``idp.PointCloud()`` ，请执行以下操作："

#: easyidp.pix4d.Pix4D.open_project:3 of
msgid ""
"The pix4d project file to open, like \"xxxx.p4d\", or \"xxxx\" without "
"suffix"
msgstr "要打开的pix4d项目文件，如“xxxx.p4d”，或不带后缀的“xxxx”"

#: easyidp.pix4d.Pix4D.open_project:18 of
msgid "Then using this function to open a new project:"
msgstr "然后使用此函数打开一个新项目："

#: easyidp.pix4d.Pix4D.show_roi_on_img:7 of
msgid "the image file name. by default None, plotting all available images"
msgstr "图像文件名，默认值为None，绘制所有可用图像"

#: easyidp.pix4d.Pix4D.sort_img_by_distance:130 of
msgid ":obj:`easyidp.reconstruct.sort_img_by_distance`"
msgstr ""

#: ../../python_api/autodoc/easyidp.pix4d.parse_p4d_param_folder.rst:2
msgid "easyidp.pix4d.parse\\_p4d\\_param\\_folder"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
#: easyidp.pix4d.parse_p4d_param_folder:1 of
msgid ""
"Get full file path of parameter folder "
"(``...\\project_name\\1_initial\\params.``) of Pix4D project."
msgstr "获取Pix4D项目参数文件夹（``...\\project_name\\1_initial\\params.``）的完整文件路径。"

#: easyidp.pix4d.parse_p4d_param_folder:3 of
#, fuzzy
msgid "The param folder path of pix4d project."
msgstr "Pix4D项目的参数文件夹路径"

#: easyidp.pix4d.parse_p4d_param_folder:6 of
msgid ""
"The dictionary contains pix4d params, ``keys=[\"project_name\", \"xyz\", "
"\"pmat\", \"cicp\", \"ccp\", \"campos\", \"ssk\", \"crs\"]``"
msgstr "字典包含pix4d参数，``keys=[\"project_name\", \"xyz\", \"pmat\", \"cicp\", \"ccp\", \"campos\", \"ssk\", \"crs\"]``"

#: easyidp.pix4d.parse_p4d_param_folder:11 of
#, fuzzy
msgid "We use the following parameters [1]_:"
msgstr "我们使用以下参数 [1]_:"

#: easyidp.pix4d.parse_p4d_param_folder:13 of
msgid "``project_name`` : the project name"
msgstr "``project_name``：项目名称"

#: easyidp.pix4d.parse_p4d_param_folder:14 of
msgid ""
"``xyz``: the full file path of ``*_offset.xyz``, contains the point cloud"
" offset values"
msgstr "``xyz``：``*_offset.xyz`` 的完整文件路径，包含点云偏移值"

#: easyidp.pix4d.parse_p4d_param_folder:15 of
msgid ""
"``pmat``: the full file path of ``*_pmatrix.txt`` file, contains the "
"compressed internal and external camera parameters."
msgstr "``pmat``：``*_pmatrix.txt`` 文件的完整文件路径，包含压缩的内部和外部相机参数。"

#: easyidp.pix4d.parse_p4d_param_folder:16 of
msgid ""
"``cicp``: the full file path of "
"``*_pix4d_calibrated_internal_camera_parameters.cam``, it contains "
"information about the optimized (computed) internal camera parameters."
msgstr "``cicp``：``*_pix4d_calibrated_internal_camera_parameters.cam`` 的完整文件路径，包含优化（计算）的内部相机参数信息。"

#: easyidp.pix4d.parse_p4d_param_folder:17 of
msgid ""
"``ccp``: the full file path of ``*_calibrated_camera_parameters.txt``, it"
" contains the information of each calibrated camera."
msgstr "``ccp``：``*_calibrated_camera_parameters.txt`` 的完整文件路径，包含每个校准相机的信息。"

#: easyidp.pix4d.parse_p4d_param_folder:18 of
msgid ""
"``campos``: the full file path of ``*_calibrated_images_position.txt``, "
"the position information of each calibrated camera."
msgstr "``campos``：``*_calibrated_images_position.txt`` 的完整文件路径，每个校准相机的位置信息。"

#: easyidp.pix4d.parse_p4d_param_folder:19 of
msgid ""
"``ssk``: the full file path of ``*_camera.ssk``, it contains information "
"about the camera parameters."
msgstr "``ssk``：``*_camera.ssk`` 的完整文件路径，包含相机参数信息。"

#: easyidp.pix4d.parse_p4d_param_folder:20 of
msgid ""
"``crs`` : the full file path of ``*_wkt.prj``, it contains the projection"
" of the output coordinate system in the projection format."
msgstr "``crs``：``*_wkt.prj`` 的完整文件路径，包含投影格式的输出坐标系的投影。"

#: easyidp.pix4d.parse_p4d_param_folder:34 easyidp.pix4d.read_cam_ssk:65
#: easyidp.pix4d.read_campos_geo:45 easyidp.pix4d.read_ccp:67
#: easyidp.pix4d.read_cicp:49 easyidp.pix4d.read_pmat:41
#: easyidp.pix4d.read_xyz:32 of
msgid "Then use this function:"
msgstr "然后使用此函数："

#: easyidp.pix4d.parse_p4d_param_folder:51 of
msgid ""
"What does the Output Params Folder contain? https://support.pix4d.com/hc"
"/en-us/articles/202977149-What-does-the-Output-Params-Folder-contain"
msgstr "输出参数文件夹包含什么？https://support.pix4d.com/hc/en-us/articles/202977149-What-does-the-Output-Params-Folder-contain"

#: ../../python_api/autodoc/easyidp.pix4d.parse_p4d_project.rst:2
msgid "easyidp.pix4d.parse\\_p4d\\_project"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
#: easyidp.pix4d.parse_p4d_project:1 of
msgid ""
"A fuction to automatically analyze related subfiles in pix4d project "
"folder"
msgstr "一个函数，用于自动分析pix4d项目文件夹中的相关子文件"

#: easyidp.pix4d.parse_p4d_project:3 of
msgid ""
"the path to pix4d project file, that folder should contains the following"
" sub-folder:  .. code-block:: text      \\project_path     |--- "
"1_initial\\     |--- 2_densification\\     |___ 3_dsm_ortho\\"
msgstr ""

#: easyidp.pix4d.parse_p4d_project:3 of
msgid ""
"the path to pix4d project file, that folder should contains the following"
" sub-folder:"
msgstr "pix4d项目文件的路径，该文件夹应包含以下子文件夹："

#: easyidp.pix4d.parse_p4d_project:18 of
msgid "param_folder: str, default None"
msgstr "param_folder：str，默认值为None"

#: easyidp.pix4d.parse_p4d_project of
msgid "if not given, it will parse as a standard pix4d project, and trying"
msgstr "如果未给出，它将作为标准pix4d项目进行解析，并尝试"

#: easyidp.pix4d.parse_p4d_project of
msgid "to get the project name from ``1_initial/param`` folder"
msgstr "从``1_initial/param``文件夹获取项目名称"

#: easyidp.pix4d.parse_p4d_project of
msgid "if it is not a standard pix4d project (re-orgainzed folder), need manual"
msgstr "如果它不是标准的pix4d项目（重新组织的文件夹），需要手动"

#: easyidp.pix4d.parse_p4d_project of
msgid "specify the path to param folder, in order to parse project_name"
msgstr "指定param文件夹的路径，以解析project_name"

#: easyidp.pix4d.parse_p4d_project of
msgid "for later usage."
msgstr "以供后续使用。"

#: easyidp.pix4d.parse_p4d_project:20 of
msgid ""
"**p4d** -- a python dictionary that contains the path to each file.  .. "
"code-block:: python      {         \"project_name\": the prefix of whole "
"project file.         \"param\": the folder of parameters         "
"\"pcd\": the point cloud file         \"dom\": the digital orthomosaic "
"file         \"dsm\": the digital surface model file         "
"\"undist_raw\": the undistorted images corrected by the pix4d software "
"(when original image unable to find)     }"
msgstr ""

#: easyidp.pix4d.parse_p4d_project:20 of
msgid "**p4d** -- a python dictionary that contains the path to each file."
msgstr "**p4d** -- 一个包含每个文件路径的python字典。"

#: easyidp.pix4d.parse_p4d_project:36 of
msgid ""
"Project_name can be extracted from parameter folder prefix in easyidp "
"2.0, no need manual specify. To find the outputs, it will pick the first "
"file that fits the expected file format."
msgstr "项目名称可以从easyidp 2.0中的参数文件夹前缀中提取，无需手动指定。要查找输出，它将选择第一个符合预期文件格式的文件。"

#: easyidp.pix4d.parse_p4d_project:52 of
msgid "Then use this function to parse given pix4d:"
msgstr "然后使用此函数解析给定的pix4d："

#: ../../python_api/autodoc/easyidp.pix4d.read_cam_ssk.rst:2
msgid "easyidp.pix4d.read\\_cam\\_ssk"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1 easyidp.pix4d.read_cam_ssk:1
#: of
msgid "Get the camera model name, for :class:`easyidp.reconstruct.Sensor` object"
msgstr "获取相机型号，用于 :class:`easyidp.reconstruct.Sensor` 对象"

#: easyidp.pix4d.read_cam_ssk:6 of
msgid ""
".. code-block:: python      ssk_info =     {         \"label\":"
"                  str         \"type\":                   str, e.g. frame"
" / fisheye ...         \"pixel_size\":             [h, w]         "
"\"pixel_size_unit\":        \"mm\"         \"image_size_in_pixels\":   [h"
" ,w]         \"orientation\":            1   # guess 0 -> w, h?         "
"\"photo_center_in_pixels\": [h, w]     }"
msgstr ""

#: easyidp.pix4d.read_cam_ssk:24 of
msgid "SSK file contents:"
msgstr "SSK文件内容："

#: ../../python_api/autodoc/easyidp.pix4d.read_campos_geo.rst:2
msgid "easyidp.pix4d.read\\_campos\\_geo"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
#: easyidp.pix4d.read_campos_geo:1 of
msgid ""
"Read ``*_calibrated_images_position.txt`` for "
":class:`easyidp.reconstruct.Photo.position` (geo_location)"
msgstr "读取``*_calibrated_images_position.txt``以获取 :class:`easyidp.reconstruct.Photo.position` （地理位置）"

#: easyidp.pix4d.read_campos_geo:3 easyidp.pix4d.read_ccp:3
#: easyidp.pix4d.read_cicp:3 of
msgid "file path"
msgstr "文件路径"

#: easyidp.pix4d.read_campos_geo:6 of
msgid ""
".. code-block:: python      campos_dict = {         \"Image1.JPG\": "
"np.array([x, y ,z]),         \"Image2.JPG\": ...         ...     }"
msgstr ""

#: easyidp.pix4d.read_campos_geo:19 of
msgid "this file contains the geo position of each camera, and looks like:"
msgstr "此文件包含每个相机的地理位置，看起来像："

#: ../../python_api/autodoc/easyidp.pix4d.read_ccp.rst:2
msgid "easyidp.pix4d.read\\_ccp"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1 easyidp.pix4d.read_ccp:1 of
msgid ""
"Read ``*_calibrated_camera_parameters.txt`` for "
":class:`easyidp.reconstruct.Photo` object"
msgstr "读取``*_calibrated_camera_parameters.txt``以获取 :class:`easyidp.reconstruct.Photo` 对象"

#: easyidp.pix4d.read_ccp:6 of
msgid ""
".. code-block:: python      img_configs = {         'w': 4608,         "
"'h': 3456,         'Image1.JPG': {             'cam_matrix':  "
"array([[...]]),             'rad_distort': array([ 0.03833474, ...]),"
"             'tan_distort': array([0.00240852, ...]),             "
"'cam_pos':     array([ 21.54872207, ...]),             'cam_rot':     "
"array([[ 0.78389904, ...]])},          'Image2.JPG':             {...}"
"         }"
msgstr ""

#: easyidp.pix4d.read_ccp:27 of
msgid "It is the camera position info in local coordinate, the file looks like:"
msgstr "这是本地坐标中的相机位置信息，文件看起来像："

#: ../../python_api/autodoc/easyidp.pix4d.read_cicp.rst:2
msgid "easyidp.pix4d.read\\_cicp"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1 easyidp.pix4d.read_cicp:1 of
msgid ""
"Read ``*_pix4d_calibrated_internal_camera_parameters.cam`` for "
":class:`easyidp.reconstruct.Sensor` object"
msgstr "读取``*_pix4d_calibrated_internal_camera_parameters.cam``以获取 :class:`easyidp.reconstruct.Sensor` 对象"

#: easyidp.pix4d.read_cicp:6 of
msgid ""
".. code-block:: python      cicp_dict.keys() =         ['F', 'Px', 'Py', "
"'K1', 'K2', 'K3', 'T1', 'T2', 'w_mm', 'h_mm']"
msgstr ""

#: easyidp.pix4d.read_cicp:16 of
msgid "It is the info about sensor, the file looks like:"
msgstr "这是关于传感器的信息，文件看起来像："

#: ../../python_api/autodoc/easyidp.pix4d.read_pmat.rst:2
msgid "easyidp.pix4d.read\\_pmat"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1 easyidp.pix4d.read_pmat:1 of
msgid "read pix4d file ``*_pmatrix.txt``"
msgstr "读取pix4d文件``*_pmatrix.txt``"

#: easyidp.pix4d.read_pmat:3 of
#, fuzzy
msgid "the path of pmatrix file.type"
msgstr "pmatrix文件的路径"

#: easyidp.pix4d.read_pmat:6 of
msgid ""
".. code-block:: python      pmat_dict = {         \"DJI_0000.JPG\": "
"nparray(3x4),         ... ,         \"DJI_9999.JPG\": nparray(3x4)     }"
msgstr ""

#: easyidp.pix4d.read_pmat:19 of
msgid "The pmatrix.txt file looks like:"
msgstr "pmatrix.txt文件看起来像："

#: ../../python_api/autodoc/easyidp.pix4d.read_xyz.rst:2
msgid "easyidp.pix4d.read\\_xyz"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1 easyidp.pix4d.read_xyz:1 of
msgid "read pix4d file ``*_offset.xyz``"
msgstr "读取pix4d文件``*_offset.xyz``"

#: easyidp.pix4d.read_xyz:3 of
#, fuzzy
msgid "the path to target offset.xyz file"
msgstr "目标offset.xyz文件的路径"

#: easyidp.pix4d.read_xyz:6 of
msgid "**x, y, z**"
msgstr ""

#: easyidp.pix4d.read_xyz:11 of
msgid "The offset.xyz file looks like:"
msgstr "offset.xyz文件看起来像："

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:2
msgid "easyidp.pointcloud.PointCloud"
msgstr ""

#: ../../python_api/pointcloud.rst:17:<autosummary>:1
#: easyidp.pointcloud.PointCloud:1 of
msgid ""
"EasyIDP defined PointCloud class, consists by point coordinates, and "
"optionally point colors and point normals."
msgstr "EasyIDP定义的PointCloud类，由点坐标以及可选的点颜色和点法线组成。"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.__init__:1 of
msgid "The method to initialize the PointCloud class"
msgstr "初始化PointCloud类的方法"

#: easyidp.pointcloud.PointCloud.__init__:3 of
msgid ""
"The point cloud file path for loading/reading, by default \"\", means "
"create an empty point cloud class"
msgstr "用于加载/读取的点云文件路径，默认值为\"\"，表示创建一个空的点云类"

#: easyidp.pointcloud.PointCloud.__init__:5 of
msgid ""
"This parameter is used to specify your own offsets rather than the "
"automatically calculated one.  .. note::      When the point cloud xyz "
"value is too large, need to deduct duplicate values (minus offsets) to "
"save the memory cost and increase the precision.  .. caution::      For "
"some Pix4D produced pointcloud, the point cloud itself has been offseted,"
" need manually add the offset value back."
msgstr "此参数用于指定您自己的偏移量，而不是自动计算的偏移量。  .. 注意::      当点云xyz值过大时，需要扣除重复值（减去偏移量）以节省内存成本并提高精度。  .. 警告::      对于某些Pix4D生成的点云，点云本身已被偏移，需要手动添加偏移值。"

#: easyidp.pointcloud.PointCloud.__init__:5 of
msgid ""
"This parameter is used to specify your own offsets rather than the "
"automatically calculated one."
msgstr "此参数用于指定您自己的偏移量，而不是自动计算的偏移量。"

#: easyidp.pointcloud.PointCloud.__init__:9 of
msgid ""
"When the point cloud xyz value is too large, need to deduct duplicate "
"values (minus offsets) to save the memory cost and increase the "
"precision."
msgstr "当点云xyz值过大时，需要扣除重复值（减去偏移量）以节省内存成本并提高精度。"

#: easyidp.pointcloud.PointCloud.__init__:13 of
msgid ""
"For some Pix4D produced pointcloud, the point cloud itself has been "
"offseted, need manually add the offset value back."
msgstr "对于某些Pix4D生成的点云，点云本身已被偏移，需要手动添加偏移值。"

#: easyidp.pointcloud.PointCloud.__init__:18 of
msgid "**Prepare**"
msgstr "**准备**"

#: easyidp.pointcloud.PointCloud.__init__:20 of
msgid "Cancel the numpy scientific counting method display:"
msgstr "取消numpy科学计数法显示："

#: easyidp.pointcloud.PointCloud.__init__:27 of
msgid "Package loading:"
msgstr "包加载："

#: easyidp.pointcloud.PointCloud.__init__:34 of
msgid "**Read large xyz point cloud**"
msgstr "**读取大型xyz点云**"

#: easyidp.pointcloud.PointCloud.__init__:36 of
msgid "Most point cloud use the CRS (GPS) coordianate as xyz values directly."
msgstr "大多数点云直接使用CRS（GPS）坐标作为xyz值。"

#: easyidp.pointcloud.PointCloud.__init__:50 of
msgid ""
"If store these values directly, will cost a lot of memeory with precision"
" loss. But with offsets, the data can be stored more neatly in the "
"EasyIDP:"
msgstr "如果直接存储这些值，将会消耗大量内存并且精度会降低。但通过偏移，这些数据可以更整齐地存储在EasyIDP中："

#: easyidp.pointcloud.PointCloud.__init__:65 of
msgid "**Manually specify offset**"
msgstr "**手动指定偏移量**"

#: easyidp.pointcloud.PointCloud.__init__:67 of
msgid ""
"The previous offset is calculated automatically by EasyIDP, you can also "
"manually specify the offset values:"
msgstr "之前的偏移量由EasyIDP自动计算，您也可以手动指定偏移量："

#: easyidp.pointcloud.PointCloud.__init__:83 of
msgid ""
"Though the inner stored values changed, it does not affect the final "
"point valus:"
msgstr "尽管内部存储的值发生了变化，但这不会影响最终的点值："

#: easyidp.pointcloud.PointCloud.__init__:96 of
msgid "**Read Pix4D offseted point cloud and add offset back**"
msgstr "**读取Pix4D偏移的点云并添加偏移值回去**"

#: easyidp.pointcloud.PointCloud.__init__:98 of
msgid "If you read the Pix4D produced point cloud directly:"
msgstr "如果您直接读取Pix4D生成的点云："

#: easyidp.pointcloud.PointCloud.__init__:113 of
msgid ""
"Here the xyz seems not the correct one, when we check the Pix4D project "
"``{name}_offset.xyz`` file in the param folders, we can find the offset "
"values stored by Pix4D."
msgstr "这里的xyz值似乎不正确，当我们检查param文件夹中的Pix4D项目``{name}_offset.xyz``文件时，我们可以找到Pix4D存储的偏移值。"

#: easyidp.pointcloud.PointCloud.__init__:121 of
msgid ""
"This often requires user manually add that offset back to point cloud. "
"But EasyIDP supports dealing with such situation easily:"
msgstr "这通常需要用户手动将偏移值添加回点云。但EasyIDP支持轻松处理这种情况："

#: easyidp.pointcloud.PointCloud.__init__:139 of
msgid ""
"You can also obtain the ``p4d_offset_np`` by :class:`easyidp.Pix4D "
"<easyidp.pix4d.Pix4D>` object:"
msgstr "您还可以通过 :class:`easyidp.Pix4D <easyidp.pix4d.Pix4D>` 对象获取 ``p4d_offset_np`` ："

#: easyidp.pointcloud.PointCloud.__init__:149 of
msgid "And feed it to the previous function:"
msgstr "并将其传递给前面的函数："

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ""
":py:obj:`__init__ <easyidp.pointcloud.PointCloud.__init__>`\\ "
"\\(\\[pcd\\_path\\, offset\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ":py:obj:`clear <easyidp.pointcloud.PointCloud.clear>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.clear:1 of
msgid "Delete all points and make an empty point cloud"
msgstr "删除所有点并创建一个空的点云"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ""
":py:obj:`crop_point_cloud "
"<easyidp.pointcloud.PointCloud.crop_point_cloud>`\\ \\(polygon\\_xy\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.crop_point_cloud:1 of
msgid "crop the point cloud along z axis"
msgstr "沿着z轴切点云"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ""
":py:obj:`crop_rois <easyidp.pointcloud.PointCloud.crop_rois>`\\ "
"\\(roi\\[\\, save\\_folder\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.crop_rois:1 of
msgid ""
"Crop several ROIs by given <ROI> or dict object with several polygons and"
" polygon names, along z-axis"
msgstr "通过给定的<ROI>或具有多个多边形和多边形名称的字典对象，沿z轴裁剪多个ROI"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ":py:obj:`has_colors <easyidp.pointcloud.PointCloud.has_colors>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_colors:1 of
msgid "Returns True if the point cloud contains point colors."
msgstr "如果点云包含点颜色，则返回True。"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ":py:obj:`has_normals <easyidp.pointcloud.PointCloud.has_normals>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_normals:1 of
msgid "Returns True if the point cloud contains point normals."
msgstr "如果点云包含点法线，则返回True。"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ":py:obj:`has_points <easyidp.pointcloud.PointCloud.has_points>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.has_points:1 of
msgid "Returns True if the point cloud contains points."
msgstr "如果点云包含点，则返回True。"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ""
":py:obj:`read_point_cloud "
"<easyidp.pointcloud.PointCloud.read_point_cloud>`\\ \\(pcd\\_path\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.read_point_cloud:1 of
msgid ""
"Open a new point cloud file to overwritting current file, support ply, "
"laz, and las."
msgstr "打开一个新的点云文件以覆盖当前文件，支持ply、laz和las格式。"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ":py:obj:`save <easyidp.pointcloud.PointCloud.save>`\\ \\(pcd\\_path\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.save:1
#: easyidp.pointcloud.PointCloud.write_point_cloud:1 of
msgid "Save current point cloud to a file, support ply, las, laz format."
msgstr "将当前点云保存到文件，支持ply、las、laz格式。"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ""
":py:obj:`update_offset_value "
"<easyidp.pointcloud.PointCloud.update_offset_value>`\\ \\(off\\_val\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
#: easyidp.pointcloud.PointCloud.update_offset_value:1 of
msgid "Change the offset value without affecting the xyz point values."
msgstr "更改偏移值而不影响xyz点值。"

#: ../../python_api/autodoc/easyidp.pointcloud.PointCloud.rst:31:<autosummary>:1
msgid ""
":py:obj:`write_point_cloud "
"<easyidp.pointcloud.PointCloud.write_point_cloud>`\\ \\(pcd\\_path\\)"
msgstr ""

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1 of
msgid ":py:obj:`offset <easyidp.pointcloud.PointCloud.offset>`\\"
msgstr ""

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1
#: easyidp.pointcloud.PointCloud.offset:1 of
msgid "The offset value of point cloud"
msgstr "点云的偏移值"

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1 of
msgid ":py:obj:`points <easyidp.pointcloud.PointCloud.points>`\\"
msgstr ""

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1
#: easyidp.pointcloud.PointCloud.points:1 of
msgid "The xyz values of point cloud"
msgstr "点云的xyz值"

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1 of
msgid ":py:obj:`file_path <easyidp.pointcloud.PointCloud.file_path>`\\"
msgstr ""

#: ../../docstring easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1
#: easyidp.pointcloud.PointCloud.file_path:1 of
msgid "the file path to the current point cloud file"
msgstr "当前点云文件的文件路径"

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1 of
msgid ":py:obj:`file_ext <easyidp.pointcloud.PointCloud.file_ext>`\\"
msgstr ""

#: ../../docstring easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1
#: easyidp.pointcloud.PointCloud.file_ext:1 of
msgid "the file extension to the current point cloud file"
msgstr "当前点云文件的文件扩展名"

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1 of
msgid ":py:obj:`colors <easyidp.pointcloud.PointCloud.colors>`\\"
msgstr ""

#: ../../docstring easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1
#: easyidp.pointcloud.PointCloud.colors:1 of
msgid "The color (RGB) values of point cloud"
msgstr "点云的颜色（RGB）值"

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1 of
msgid ":py:obj:`normals <easyidp.pointcloud.PointCloud.normals>`\\"
msgstr ""

#: ../../docstring easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1
#: easyidp.pointcloud.PointCloud.normals:1 of
msgid "The normal vector values of point cloud"
msgstr "点云的法向量值"

#: easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1 of
msgid ":py:obj:`shape <easyidp.pointcloud.PointCloud.shape>`\\"
msgstr ""

#: ../../docstring easyidp.pointcloud.PointCloud.clear:1:<autosummary>:1
#: easyidp.pointcloud.PointCloud.shape:1 of
msgid "The size of point cloud (xyz)"
msgstr "点云的大小（xyz）"

#: easyidp.pointcloud.PointCloud.crop_point_cloud:3 of
msgid "the polygon xy coords"
msgstr "多边形的xy坐标"

#: easyidp.pointcloud.PointCloud.crop_point_cloud:25
#: easyidp.pointcloud.PointCloud.crop_rois:56 of
msgid "Run this function:"
msgstr "运行此函数："

#: easyidp.pointcloud.PointCloud.crop_rois:3 of
msgid ""
"| the <ROI> object created by easyidp.ROI() | or dict object with key as "
"roi name and value as coordinates"
msgstr "| 由easyidp.ROI()创建的 <ROI> 对象 | 或者键为roi名称，值为坐标的字典对象"

#: easyidp.pointcloud.PointCloud.crop_rois of
msgid "the <ROI> object created by easyidp.ROI()"
msgstr "由easyidp.ROI()创建的<ROI>对象"

#: easyidp.pointcloud.PointCloud.crop_rois of
msgid "or dict object with key as roi name and value as coordinates"
msgstr "或者键为roi名称，值为坐标的字典对象"

#: easyidp.pointcloud.PointCloud.crop_rois:8 easyidp.roi.ROI.crop:7 of
msgid ""
"the folder to save cropped images, use ROI indices as file_names, by "
"default None, means not save."
msgstr "保存裁剪图像的文件夹，使用ROI索引作为文件名，默认值为None，表示不保存。"

#: easyidp.pointcloud.PointCloud.crop_rois:64 of
msgid "You can also save the output point cloud to given folder by:"
msgstr "您还可以通过以下方式将输出点云保存到给定文件夹："

#: easyidp.pointcloud.PointCloud.crop_rois:70 of
msgid ":obj:`crop_point_cloud`"
msgstr ""

#: easyidp.pointcloud.PointCloud.offset:5 of
msgid ""
"If change this value directly, the xyz value of point cloud will also be "
"changed, just like moving the whole point cloud."
msgstr "如果直接更改此值，点云的xyz值也会更改，就像移动整个点云一样。"

#: easyidp.pointcloud.PointCloud.offset:9
#: easyidp.pointcloud.PointCloud.update_offset_value:8 of
msgid "For example, the point cloud like:"
msgstr "例如，点云像这样："

#: easyidp.pointcloud.PointCloud.offset:29 of
msgid "Change the offset directly:"
msgstr "直接更改偏移量："

#: easyidp.pointcloud.PointCloud.offset:46 of
msgid ""
"If you want to change the offset without affecting the point xyz values, "
"please use :func:`update_offset_value`"
msgstr "如果您想更改偏移量而不影响点xyz值，请使用 :func:`update_offset_value` "

#: easyidp.pointcloud.PointCloud.read_point_cloud:5 of
msgid ""
"This operation will totally clear all data of current point cloud, and "
"reopen a new point cloud."
msgstr "此操作将完全清除当前点云的所有数据，并重新打开一个新的点云。"

#: easyidp.pointcloud.PointCloud.read_point_cloud:7 of
msgid "the path to point cloud file want to open"
msgstr "要打开的点云文件的路径"

#: easyidp.pointcloud.PointCloud.read_point_cloud:30 of
msgid "This operation will totally overwrite the previous point cloud"
msgstr "此操作将完全覆盖之前的点云"

#: easyidp.pointcloud.PointCloud.save:3
#: easyidp.pointcloud.PointCloud.write_point_cloud:3 of
msgid ""
"The file path of saved point cloud, if file extention not given, will use"
" parent point cloud file extention."
msgstr "保存的点云文件的路径，如果未给出文件扩展名，将使用父点云文件扩展名。"

#: easyidp.pointcloud.PointCloud.save:6 of
msgid ":obj:`write_point_cloud`"
msgstr ""

#: easyidp.pointcloud.PointCloud.update_offset_value:3 of
msgid "The offset values want to set"
msgstr "要设置的偏移值"

#: easyidp.pointcloud.PointCloud.update_offset_value:28 of
msgid "Change the offset without affecting the xyz values:"
msgstr "更改偏移量而不影响xyz值："

#: easyidp.pointcloud.PointCloud.update_offset_value:49 of
msgid ""
"If you want to change the offset like moving point cloud (also change the"
" xyz values), please use :func:`offset`"
msgstr "如果您想更改偏移量如同移动点云（也更改xyz值），请使用 :func:`offset` "

#: ../../python_api/autodoc/easyidp.pointcloud.read_las.rst:2
msgid "easyidp.pointcloud.read\\_las"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
#: easyidp.pointcloud.read_las:1 of
msgid "Read the las file, the function wrapper for :func:`read_laz`"
msgstr "读取las文件，函数包装器用于 :func:`read_laz` "

#: easyidp.pointcloud.read_las:3 easyidp.pointcloud.read_laz:3
#: easyidp.pointcloud.read_ply:3 of
msgid "The path to las file"
msgstr "las文件的路径"

#: easyidp.pointcloud.read_las:6 easyidp.pointcloud.read_laz:6
#: easyidp.pointcloud.read_ply:6 of
msgid "points, colors, normals of given point cloud data"
msgstr ""

#: easyidp.pointcloud.read_las:37 easyidp.pointcloud.read_laz:37
#: easyidp.pointcloud.read_ply:37 of
msgid ""
":func:`easyidp.PointCloud.read_point_cloud "
"<easyidp.pointcloud.PointCloud.read_point_cloud>`"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.read_laz.rst:2
msgid "easyidp.pointcloud.read\\_laz"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
#: easyidp.pointcloud.read_laz:1 of
msgid "Read the laz file"
msgstr "读取laz文件"

#: ../../python_api/autodoc/easyidp.pointcloud.read_ply.rst:2
msgid "easyidp.pointcloud.read\\_ply"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
#: easyidp.pointcloud.read_ply:1 of
msgid "Read the ply file"
msgstr "读取ply文件"

#: ../../python_api/autodoc/easyidp.pointcloud.write_las.rst:2
msgid "easyidp.pointcloud.write\\_las"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
#: easyidp.pointcloud.write_las:1 of
msgid "Save point cloud to las format, the function wrapper for :func:`write_laz`"
msgstr "将点云保存为las格式，函数包装器用于 :func:`write_laz`"

#: easyidp.pointcloud.write_las:3 easyidp.pointcloud.write_laz:3
#: easyidp.pointcloud.write_ply:3 of
#, fuzzy
msgid "the output point cloud file."
msgstr "输出的点云文件路径，包括拓展名"

#: easyidp.pointcloud.write_las:5 easyidp.pointcloud.write_laz:5
#: easyidp.pointcloud.write_ply:5 of
msgid "the nx3 numpy ndarray of point XYZ info"
msgstr "点云XYZ信息的numpy ndarray (nx3)"

#: easyidp.pointcloud.write_las:7 easyidp.pointcloud.write_laz:7
#: easyidp.pointcloud.write_ply:7 of
msgid "the nx3 numpy ndarray of point RGB info, dtype=np.uint8"
msgstr "点云RGB信息的numpy ndarray (nx3), 数据类型为np.uint8"

#: easyidp.pointcloud.write_las:9 easyidp.pointcloud.write_laz:9
#: easyidp.pointcloud.write_ply:9 of
msgid "the nx3 numpy ndarray of point normal info, by default None"
msgstr "点云的法向量信息numpy ndarray (nx3)，默认为None"

#: easyidp.pointcloud.write_las:11 easyidp.pointcloud.write_laz:11 of
msgid ""
"The offset value defined in the laz file header, by default np.array([0.,"
" 0., 0.])"
msgstr "在laz文件头中定义的偏移值，默认值为np.array([0., 0., 0.])"

#: easyidp.pointcloud.write_las:13 easyidp.pointcloud.write_laz:13 of
msgid "The decimal for the point value precision, by default 5"
msgstr "点值精度的小数位数，默认值为5"

#: easyidp.pointcloud.write_las:54 easyidp.pointcloud.write_laz:54 of
msgid "The EasyIDP saved the las file with Las version=1.2"
msgstr "EasyIDP保存的las文件版本为1.2"

#: easyidp.pointcloud.write_las:56 easyidp.pointcloud.write_laz:56
#: easyidp.pointcloud.write_ply:84 of
msgid ""
":func:`easyidp.PointCloud.write_point_cloud "
"<easyidp.pointcloud.PointCloud.write_point_cloud>`"
msgstr ""

#: ../../python_api/autodoc/easyidp.pointcloud.write_laz.rst:2
msgid "easyidp.pointcloud.write\\_laz"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
#: easyidp.pointcloud.write_laz:1 of
msgid "Save point cloud to laz format"
msgstr "将点云保存为laz格式"

#: ../../python_api/autodoc/easyidp.pointcloud.write_ply.rst:2
msgid "easyidp.pointcloud.write\\_ply"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
#: easyidp.pointcloud.write_ply:1 of
msgid "Save point cloud to ply format"
msgstr "将点云保存为ply格式"

#: easyidp.pointcloud.write_ply:11 of
msgid ""
"whether save the binary file. True: save BINARY ply file (by default) "
"False: save ASCII ply file."
msgstr "是否保存为二进制文件。True：保存BINARY ply文件（默认）；False：保存ASCII ply文件。"

#: easyidp.pointcloud.write_ply:52 of
msgid "(For developers)"
msgstr ""

#: easyidp.pointcloud.write_ply:54 of
msgid ""
"The ``plyfile`` packages requires to convert the ndarray outputs to numpy"
" structured arrays [1]_ , then save the point cloud structure looks like "
"this:"
msgstr "``plyfile`` 包需要将ndarray输出转换为numpy结构化数组 [1]_ ，然后保存点云结构如下所示："

#: easyidp.pointcloud.write_ply:76 of
msgid ""
"convert ndarray to strucutred array [2]_ and method to merge to "
"structured arrays [3]_"
msgstr "将ndarray转换为结构化数组的方法 [2]_ 和合并结构化数组的方法 [3]_ "

#: easyidp.pointcloud.write_ply:80 of
msgid "https://github.com/dranjan/python-plyfile#creating-a-ply-file"
msgstr ""

#: easyidp.pointcloud.write_ply:81 of
msgid ""
"https://stackoverflow.com/questions/3622850/converting-a-2d-numpy-array-"
"to-a-structured-array"
msgstr ""

#: easyidp.pointcloud.write_ply:82 of
msgid ""
"https://stackoverflow.com/questions/5355744/numpy-joining-structured-"
"arrays"
msgstr ""

#: ../../python_api/autodoc/easyidp.reconstruct.Calibration.rst:2
msgid "easyidp.reconstruct.Calibration"
msgstr ""

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
#: easyidp.reconstruct.Calibration:1 of
msgid "The base class for camera lens distortion calibration"
msgstr "相机镜头畸变校准的基类"

#: ../../python_api/autodoc/easyidp.reconstruct.Calibration.rst:22:<autosummary>:1
msgid ""
":py:obj:`__init__ <easyidp.reconstruct.Calibration.__init__>`\\ "
"\\(\\[sensor\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.reconstruct.Calibration.rst:22:<autosummary>:1
msgid ""
":py:obj:`calibrate <easyidp.reconstruct.Calibration.calibrate>`\\ \\(u\\,"
" v\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.reconstruct.Calibration.rst:22:<autosummary>:1
#: easyidp.reconstruct.Calibration.calibrate:1 of
msgid "Convert undistorted images -> original image pixel coordinate"
msgstr "将未失真图像转换为原始图像像素坐标"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`software <easyidp.reconstruct.Calibration.software>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.software:1 of
msgid ""
"the calibration model from which reconstruction software, in [\"pix4d\", "
"\"metashape\"], ``<class 'str'>``"
msgstr "重建软件的校准模型，在[\"pix4d\", \"metashape\"]中，``<class 'str'>``"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`type <easyidp.reconstruct.Calibration.type>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.type:1 of
msgid ""
"the calibration type, same as the sensor.type, in [frame, fisheye, "
"spherical, rpc], by default 'frame'"
msgstr "校准类型，与sensor.type相同，在[frame, fisheye, spherical, rpc]中，默认值为'frame'"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`sensor <easyidp.reconstruct.Calibration.sensor>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.sensor:1 of
msgid ""
"the object of the camera model (sensor), :py:class:`Sensor "
"<easyidp.reconstruct.Sensor>`"
msgstr "相机模型（传感器）对象，:py:class:`Sensor <easyidp.reconstruct.Sensor>`"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`f <easyidp.reconstruct.Calibration.f>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid "focal length, unit is pixel, for pix4d project, convert mm to pixel."
msgstr "焦距，单位为像素，对于pix4d项目，将毫米转换为像素。"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`cx <easyidp.reconstruct.Calibration.cx>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.cx:1 easyidp.reconstruct.Calibration.cy:1 of
msgid "principle point offset, unit is pixel."
msgstr "主点偏移，单位为像素。"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`cy <easyidp.reconstruct.Calibration.cy>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`b1 <easyidp.reconstruct.Calibration.b1>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1
#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.b2:1 of
msgid ""
"affinity and non-orthogonality (skew) coefficients (in pixels) [metashape"
" use only]"
msgstr "亲和性和非正交性（倾斜）系数（单位：像素）[仅用于metashape]"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`b2 <easyidp.reconstruct.Calibration.b2>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`k1 <easyidp.reconstruct.Calibration.k1>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.k1:1 of
msgid ""
"len distortion coefficient, different between pix4d and metashape, please"
" check below for more details"
msgstr "镜头畸变系数，pix4d和metashape之间不同，请查看下面的详细信息"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`k2 <easyidp.reconstruct.Calibration.k2>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.k2:1 easyidp.reconstruct.Calibration.k3:1
#: easyidp.reconstruct.Calibration.k4:1 of
msgid "len distortion coefficient"
msgstr "镜头畸变系数"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`k3 <easyidp.reconstruct.Calibration.k3>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`k4 <easyidp.reconstruct.Calibration.k4>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`t1 <easyidp.reconstruct.Calibration.t1>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.t1:1 of
msgid "Tangential Lens Distortion Coefficients, for Pix4D."
msgstr "切向镜头畸变系数，适用于Pix4D。"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`t2 <easyidp.reconstruct.Calibration.t2>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.p2:1 easyidp.reconstruct.Calibration.p3:1
#: easyidp.reconstruct.Calibration.p4:1 easyidp.reconstruct.Calibration.t2:1
#: easyidp.reconstruct.Calibration.t3:1 easyidp.reconstruct.Calibration.t4:1 of
msgid "Tangential Lens Distortion Coeffs"
msgstr "切向镜头畸变系数"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`t3 <easyidp.reconstruct.Calibration.t3>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`t4 <easyidp.reconstruct.Calibration.t4>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`p1 <easyidp.reconstruct.Calibration.p1>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.b1:1:<autosummary>:1
#: easyidp.reconstruct.Calibration.p1:1 of
msgid "Tangential Lens Distortion Coefficients, for Metashape."
msgstr "切向镜头畸变系数，适用于Metashape。"

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`p2 <easyidp.reconstruct.Calibration.p2>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`p3 <easyidp.reconstruct.Calibration.p3>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.b1:1:<autosummary>:1 of
msgid ":py:obj:`p4 <easyidp.reconstruct.Calibration.p4>`\\"
msgstr ""

#: easyidp.reconstruct.Calibration.calibrate:3 of
msgid "the x pixel coordinate after R transform"
msgstr "R变换后的x像素坐标"

#: easyidp.reconstruct.Calibration.calibrate:5 of
msgid "the y pixel coordinate after R transform"
msgstr "R变换后的y像素坐标"

#: easyidp.reconstruct.Calibration.calibrate:8 of
msgid "the pixel coordinate on the original image"
msgstr "原始图像上的像素坐标"

#: easyidp.reconstruct.Calibration.calibrate:13 of
msgid "The calculation formular can be references by :"
msgstr "计算公式可参考："

#: easyidp.reconstruct.Calibration.calibrate:15 of
msgid "Pix4D: #2.1.2 section in [1]_ ."
msgstr "Pix4D：[1]_ 中的#2.1.2节。"

#: easyidp.reconstruct.Calibration.calibrate:16 of
msgid "Metashape: Appendix C. Camera models in [2]_ ."
msgstr "Metashape：[2]_ 中的附录C.相机模型。"

#: easyidp.reconstruct.Calibration.calibrate:20 of
msgid ""
"https://support.pix4d.com/hc/en-us/articles/202559089-How-are-the-"
"Internal-and-External-Camera-Parameters-defined"
msgstr ""

#: easyidp.reconstruct.Calibration.calibrate:21 of
msgid "https://www.agisoft.com/pdf/metashape-pro_1_7_en.pdf"
msgstr ""

#: ../../docstring easyidp.reconstruct.Calibration.cx:4 of
msgid ""
"In the older version of metashape, Cx and Cy were given in pixels from "
"the top-left corner of the image. But in the latest release version they "
"are measured as offset from the image center. Reference: "
"`https://www.agisoft.com/forum/index.php?topic=5827.0``"
msgstr ""
"在旧版的metashape中，Cx和Cy是从图像左上角以像素为单位给出的。但在最新的版本中，它们是以图像中心为偏移量来测量的。参考："
"`https://www.agisoft.com/forum/index.php?topic=5827.0``"

#: ../../docstring easyidp.reconstruct.Calibration.f:1 of
msgid ""
"focal length, unit is pixel, for pix4d project, convert mm to pixel. "
"``<class 'float'>``"
msgstr ""
"焦距，单位为像素，对于pix4d项目，将毫米转换为像素。"
"``<class 'float'>``"

#: ../../docstring easyidp.reconstruct.Calibration.k1:3 of
msgid "``pix4d``: Symmetrical Lens Distortion Coeffs"
msgstr "``pix4d``：对称镜头畸变系数"

#: ../../docstring easyidp.reconstruct.Calibration.k1:4 of
msgid "``metashape``: radial distortion coefficients (dimensionless)"
msgstr "``metashape``：径向畸变系数（无量纲）"

#: ../../docstring easyidp.reconstruct.Calibration.p1:5
#: easyidp.reconstruct.Calibration.t1:5 of
msgid "``pix4d``: Tangential Lens Distortion Coeffs, use T"
msgstr "``pix4d``：切向镜头畸变系数，使用T"

#: ../../docstring easyidp.reconstruct.Calibration.p1:6
#: easyidp.reconstruct.Calibration.t1:6 of
msgid "``metashape``: tangential distortion coefficient, use P"
msgstr "``metashape``：切向畸变系数，使用P"

#: ../../python_api/autodoc/easyidp.reconstruct.ChunkTransform.rst:2
msgid "easyidp.reconstruct.ChunkTransform"
msgstr ""

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
#: easyidp.reconstruct.ChunkTransform:1 of
msgid ""
"Similar API wrapper for Metashape Python API ``class "
"Metashape.ChunkTransform``"
msgstr "类似于Metashape Python API ``class Metashape.ChunkTransform`` 的API包装器"

#: ../../python_api/autodoc/easyidp.reconstruct.ChunkTransform.rst:21:<autosummary>:1
msgid ":py:obj:`__init__ <easyidp.reconstruct.ChunkTransform.__init__>`\\ \$\$"
msgstr ""

#: easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1 of
msgid ":py:obj:`matrix <easyidp.reconstruct.ChunkTransform.matrix>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.ChunkTransform.matrix:1
#: easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1 of
msgid "Transformation matrix"
msgstr "变换矩阵"

#: easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1 of
msgid ":py:obj:`rotation <easyidp.reconstruct.ChunkTransform.rotation>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1
#: easyidp.reconstruct.ChunkTransform.rotation:1 of
msgid "Rotation compone"
msgstr "旋转分量"

#: easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1 of
msgid ":py:obj:`translation <easyidp.reconstruct.ChunkTransform.translation>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1
#: easyidp.reconstruct.ChunkTransform.translation:1 of
msgid "Translation compone"
msgstr "平移分量"

#: easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1 of
msgid ":py:obj:`scale <easyidp.reconstruct.ChunkTransform.scale>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1
#: easyidp.reconstruct.ChunkTransform.scale:1 of
msgid "Scale compone"
msgstr "缩放分量"

#: easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1 of
msgid ":py:obj:`matrix_inv <easyidp.reconstruct.ChunkTransform.matrix_inv>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.ChunkTransform.matrix:1:<autosummary>:1
#: easyidp.reconstruct.ChunkTransform.matrix_inv:1 of
msgid "Inverse matrix"
msgstr "逆矩阵"

#: ../../docstring easyidp.reconstruct.ChunkTransform.matrix_inv:5 of
msgid "Inspired from Kunihiro Kodama's Metashape API usage <kkodama@kazusa.or.jp>"
msgstr "受Kunihiro Kodama的Metashape API用法启发 <kkodama@kazusa.or.jp>"

#: ../../docstring easyidp.reconstruct.ChunkTransform.matrix_inv:14 of
msgid ""
"invm.mulp(local_vec) --> transform chunk local coord to world coord (if "
"you handle vec in local coord)"
msgstr "invm.mulp(local_vec) --> 将块的本地坐标转换为世界坐标（如果您处理的是本地坐标中的向量）"

#: ../../docstring easyidp.reconstruct.ChunkTransform.matrix_inv:16 of
msgid ""
"How to calculate from xml data: `Agisoft Forum: Topic: Camera coordinates"
" to world <https://www.agisoft.com/forum/index.php?topic=6176.0>`_"
msgstr "如何从xml数据计算：`Agisoft论坛：主题：相机坐标到世界坐标 <https://www.agisoft.com/forum/index.php?topic=6176.0>`_"

#: ../../python_api/autodoc/easyidp.reconstruct.Photo.rst:2
msgid "easyidp.reconstruct.Photo"
msgstr ""

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
#: easyidp.reconstruct.Photo:1 of
msgid ""
"The base class to store image information used in 3D reconstruction "
"project"
msgstr "用于存储3D重建项目中图像信息的基类"

#: ../../python_api/autodoc/easyidp.reconstruct.Photo.rst:21:<autosummary>:1
msgid ""
":py:obj:`__init__ <easyidp.reconstruct.Photo.__init__>`\\ "
"\$\\[sensor\\]\$"
msgstr ""

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`id <easyidp.reconstruct.Photo.id>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.id:1 of
msgid "The id of current image in reconstruction project, ``<class 'int'>``"
msgstr "当前重建项目中图像的ID，``<class 'int'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`path <easyidp.reconstruct.Photo.path>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.path:1 of
msgid "The image path in local computer, ``<class 'str'>``"
msgstr "本地计算机中的图像路径，``<class 'str'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`label <easyidp.reconstruct.Photo.label>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.label:1 of
msgid "the image name, ``<class 'str'>``"
msgstr "图像名称，``<class 'str'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`sensor_id <easyidp.reconstruct.Photo.sensor_id>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.sensor_id:1 of
msgid "the id of the camera model (sensor), ``<class 'int'>``"
msgstr "相机模型（传感器）的ID，``<class 'int'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`sensor <easyidp.reconstruct.Photo.sensor>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.sensor:1 of
msgid ""
"the object of the camera model (sensor), :class:`easyidp.Sensor "
"<easyidp.reconstruct.Sensor>`"
msgstr "相机模型（传感器）对象，:class:`easyidp.Sensor <easyidp.reconstruct.Sensor>`"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`enabled <easyidp.reconstruct.Photo.enabled>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.enabled:1 of
msgid "whether this image is used in the 3D reconstruction,  ``<class 'bool'>``"
msgstr "此图像是否用于3D重建，``<class 'bool'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`cam_matrix <easyidp.reconstruct.Photo.cam_matrix>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1
#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ""
"the 3x3 camera matrix, the ``K`` in ``K[R t]``, ``<class "
"'numpy.ndarray'>``"
msgstr "3x3相机矩阵，``K[R t]``中的``K``，``<class 'numpy.ndarray'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`location <easyidp.reconstruct.Photo.location>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.location:1 of
msgid ""
"the 3x1 vector of camera location, the ``t`` in ``K[R t]``, ``<class "
"'numpy.ndarray'>``"
msgstr "相机位置的3x1向量，``K[R t]``中的``t``，``<class 'numpy.ndarray'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`rotation <easyidp.reconstruct.Photo.rotation>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.rotation:1 of
msgid ""
"the 3x3 rotation matrix, the ``R`` in ``K[R t]``, ``<class "
"'numpy.ndarray'>``"
msgstr "3x3旋转矩阵，``K[R t]``中的``R``，``<class 'numpy.ndarray'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`transform <easyidp.reconstruct.Photo.transform>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.transform:1 of
msgid ""
"the transform matrix, different between pix4d and metashape project, "
"please check below for more details ``<class 'numpy.ndarray'>``"
msgstr "变换矩阵，pix4d和metashape项目之间不同，请查看下面的详细信息 ``<class 'numpy.ndarray'>``"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`translation <easyidp.reconstruct.Photo.translation>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.translation:1 of
msgid "the 3x1 translation vector, often provided by metashape."
msgstr "3x1平移向量，通常由metashape提供。"

#: easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1 of
msgid ":py:obj:`position <easyidp.reconstruct.Photo.position>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Photo.cam_matrix:1:<autosummary>:1
#: easyidp.reconstruct.Photo.position:1 of
msgid ""
"The 3x1 vector of geo coodinate of image in real world, ``<class "
"'numpy.ndarray'>``"
msgstr "图像在现实世界中的地理坐标的3x1向量，``<class 'numpy.ndarray'>``"

#: ../../docstring easyidp.reconstruct.Photo.transform:3 of
msgid ""
"In ``metashape``: it is the 4x4 matrix describing photo location in the "
"chunk coordinate system -> ``K[R t]``"
msgstr "在``metashape``中：它是描述照片在块坐标系中位置的4x4矩阵 -> ``K[R t]``"

#: ../../docstring easyidp.reconstruct.Photo.transform:4 of
msgid ""
"in ``pix4d``: it is the 3x4 pmatrix. Please check `Pix4D PMatrix "
"documentation <https://support.pix4d.com/hc/en-us/articles/202977149"
"-What-does-the-Output-Params-Folder-contain#label12>` for more details"
msgstr "在``pix4d``中：它是3x4 pmatrix。请查看`Pix4D PMatrix文档 <https://support.pix4d.com/hc/en-us/articles/202977149-What-does-the-Output-Params-Folder-contain#label12>` 获取更多详细信息"

#: ../../python_api/autodoc/easyidp.reconstruct.Recons.rst:2
msgid "easyidp.reconstruct.Recons"
msgstr ""

#: easyidp.reconstruct.Recons:1 of
msgid ""
"The base class for reconstruction project. Used for each individual Pix4D"
" project and each chunk in Metashape project"
msgstr "重建项目的基类。用于每个单独的Pix4D项目和Metashape项目中的每个块"

#: easyidp.reconstruct.Recons:5 of
msgid "Coordinate systems used in the 3D reconstruction."
msgstr "3D重建中使用的坐标系。"

#: easyidp.reconstruct.Recons:7 of
msgid "internal coordinate (local):"
msgstr "内部坐标（本地）："

#: easyidp.reconstruct.Recons:9 of
msgid ""
"the coordinate used in current chunk, often the center of model as "
"initial point"
msgstr "当前块中使用的坐标，通常以模型中心作为初始点"

#: easyidp.reconstruct.Recons:11 of
msgid "geocentric coordinate (world):"
msgstr "地心坐标（世界）："

#: easyidp.reconstruct.Recons:13 of
msgid "use the earth's core as initial point, also called world coordinate"
msgstr "以地心作为初始点，也称为世界坐标"

#: easyidp.reconstruct.Recons:15 of
msgid "geographic coordinate (crs):"
msgstr "地理坐标（crs）："

#: easyidp.reconstruct.Recons:17 of
msgid ""
"coordinate reference system (CRS) to locate geographical entities. Common"
" used:"
msgstr "用于定位地理实体的坐标参考系统（CRS）。常用："

#: easyidp.reconstruct.Recons:19 of
msgid "``WGS84 (EPSG: 4326)``: xyz = longitude, latitude, altitude"
msgstr "``WGS84 (EPSG: 4326)``：xyz = 经度，纬度，高度"

#: easyidp.reconstruct.Recons:20 of
msgid "``WGS84/ UTM Zone xxx``: e.g. UTM Zone 54N -> Tokyo area."
msgstr "``WGS84/ UTM Zone xxx``：例如，UTM Zone 54N -> 东京地区。"

#: ../../python_api/autodoc/easyidp.reconstruct.Recons.rst:21:<autosummary>:1
msgid ":py:obj:`__init__ <easyidp.reconstruct.Recons.__init__>`\\ \$\$"
msgstr ""

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`crs <easyidp.reconstruct.Recons.crs>`\\"
msgstr ""

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`dom <easyidp.reconstruct.Recons.dom>`\\"
msgstr ""

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`dsm <easyidp.reconstruct.Recons.dsm>`\\"
msgstr ""

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`pcd <easyidp.reconstruct.Recons.pcd>`\\"
msgstr ""

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`label <easyidp.reconstruct.Recons.label>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Recons.crs:1:<autosummary>:1
#: easyidp.reconstruct.Recons.label:1 of
msgid "the 3D reconstruction project name, ``<class 'str'>``"
msgstr "3D重建项目名称，``<class 'str'>``"

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`meta <easyidp.reconstruct.Recons.meta>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Recons.crs:1:<autosummary>:1
#: easyidp.reconstruct.Recons.meta:1 of
msgid "meta information in this project, ``<class 'dict'>``"
msgstr "此项目的元信息，``<class 'dict'>``"

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`enabled <easyidp.reconstruct.Recons.enabled>`\\"
msgstr ""

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`sensors <easyidp.reconstruct.Recons.sensors>`\\"
msgstr ""

#: easyidp.reconstruct.Recons.crs:1:<autosummary>:1 of
msgid ":py:obj:`photos <easyidp.reconstruct.Recons.photos>`\\"
msgstr ""

#: ../../python_api/autodoc/easyidp.reconstruct.Sensor.rst:2
msgid "easyidp.reconstruct.Sensor"
msgstr ""

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
#: easyidp.reconstruct.Sensor:1 of
msgid "The base class of camera model"
msgstr "相机模型的基类"

#: ../../python_api/autodoc/easyidp.reconstruct.Sensor.rst:22:<autosummary>:1
msgid ":py:obj:`__init__ <easyidp.reconstruct.Sensor.__init__>`\\ \\(\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.reconstruct.Sensor.rst:22:<autosummary>:1
msgid ""
":py:obj:`in_img_boundary <easyidp.reconstruct.Sensor.in_img_boundary>`\\ "
"\\(polygon\\_hv\\[\\, ignore\\, log\\]\\)"
msgstr ""

#: ../../python_api/autodoc/easyidp.reconstruct.Sensor.rst:22:<autosummary>:1
#: easyidp.reconstruct.Sensor.in_img_boundary:1 of
msgid ""
"Judge whether given polygon is in the image area, and move points to "
"boundary if specify ignore."
msgstr "判断给定的多边形是否在图像区域内，如果指定忽略，则将点移动到边界。"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`id <easyidp.reconstruct.Sensor.id>`\\"
msgstr ""

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid "the sensor id in this 3D reconstruction project, often only has one."
msgstr "此3D重建项目中的传感器ID，通常只有一个。"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`label <easyidp.reconstruct.Sensor.label>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.label:1 of
msgid "the sensor label/name, ``<class 'str'>``"
msgstr "传感器标签/名称，``<class 'str'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`type <easyidp.reconstruct.Sensor.type>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.type:1 of
msgid ""
"Sensor type in [frame, fisheye, spherical, rpc] (often for metashape "
"project), ``<class 'str'>``"
msgstr "传感器类型在[frame, fisheye, spherical, rpc]中（通常用于metashape项目），``<class 'str'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`width <easyidp.reconstruct.Sensor.width>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.width:1 of
msgid "The sensor width pixel number, ``<class 'int'>``"
msgstr "传感器宽度像素数，``<class 'int'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`height <easyidp.reconstruct.Sensor.height>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.height:1 of
msgid "The sensor height pixel number, ``<class 'int'>``"
msgstr "传感器高度像素数，``<class 'int'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`w_mm <easyidp.reconstruct.Sensor.w_mm>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.w_mm:1 of
msgid "sensor actual width, unit is mm, ``<class 'float'>``"
msgstr "传感器实际宽度，单位为毫米，``<class 'float'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`h_mm <easyidp.reconstruct.Sensor.h_mm>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.h_mm:1 of
msgid "sensor actual height, unit is mm, ``<class 'float'>``"
msgstr "传感器实际高度，单位为毫米，``<class 'float'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`pixel_width <easyidp.reconstruct.Sensor.pixel_width>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.pixel_width:1 of
msgid "the scale of one pixel width, unit in mm, ``<class 'float'>``"
msgstr "一个像素宽度的比例，单位为毫米，``<class 'float'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`pixel_height <easyidp.reconstruct.Sensor.pixel_height>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.pixel_height:1 of
msgid "the scale of one pixel height, unit in mm, ``<class 'float'>``"
msgstr "一个像素高度的比例，单位为毫米，``<class 'float'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`pixel_size <easyidp.reconstruct.Sensor.pixel_size>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.pixel_size:1 of
msgid "the scale of one pixel, for pix4d, [pixel_height, pixel_width]"
msgstr "一个像素的比例，对于pix4d，[pixel_height, pixel_width]"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`focal_length <easyidp.reconstruct.Sensor.focal_length>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1
#: easyidp.reconstruct.Sensor.focal_length:1 of
msgid "focal length, unit in mm, ``<class 'float'>``"
msgstr "焦距，单位为毫米，``<class 'float'>``"

#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ":py:obj:`calibration <easyidp.reconstruct.Sensor.calibration>`\\"
msgstr ""

#: ../../docstring easyidp.reconstruct.Sensor.calibration:1
#: easyidp.reconstruct.Sensor.calibration:1:<autosummary>:1 of
msgid ""
"sensor calibration information, :py:class:`easyidp.Calibration "
"<easyidp.reconstruct.Calibration>`"
msgstr "传感器校准信息，:py:class:`easyidp.Calibration <easyidp.reconstruct.Calibration>`"

#: ../../docstring easyidp.reconstruct.Sensor.id:1 of
msgid ""
"the sensor id in this 3D reconstruction project, often only has one. "
"``<class 'int'>``"
msgstr "此3D重建项目中的传感器ID，通常只有一个。 ``<class 'int'>``"

#: easyidp.reconstruct.Sensor.in_img_boundary:3 of
msgid "[horizontal, vertical] points in pixel coordinate"
msgstr "[水平，垂直] 像素坐标中的点"

#: easyidp.reconstruct.Sensor.in_img_boundary:5 of
msgid ""
"Whether tolerate small parts outside image  - ``None``: strickly in image"
" area; - ``x``: only y (vertical) in image area, x can outside image; - "
"``y``: only x (horizontal) in image area, y can outside image.  .. todo::"
"      This API will be enhanced and changed in the future.      "
"``ignore`` (str) -> ``ignore_overflow`` (bool):      - ``True``: strickly"
" in image area, default;     - ``False``: cut the polygon inside the "
"image range;      .. image:: "
"../../_static/images/python_api/back2raw_ignore_todo.png         :alt: "
"back2raw_ignore_todo.png'         :scale: 60"
msgstr ""

#: easyidp.reconstruct.Sensor.in_img_boundary:5 of
msgid "Whether tolerate small parts outside image"
msgstr "是否容忍图像外的小部分"

#: easyidp.reconstruct.Sensor.in_img_boundary:11 of
msgid "待处理"
msgstr ""

#: easyidp.reconstruct.Sensor.in_img_boundary:13 of
msgid "This API will be enhanced and changed in the future."
msgstr "此API将在未来增强和更改。"

#: easyidp.reconstruct.Sensor.in_img_boundary:15 of
msgid "``ignore`` (str) -> ``ignore_overflow`` (bool):"
msgstr ""

#: easyidp.reconstruct.Sensor.in_img_boundary:17 of
msgid "``True``: strickly in image area, default;"
msgstr "``True``：严格在图像区域内，默认值；"

#: easyidp.reconstruct.Sensor.in_img_boundary:18 of
msgid "``False``: cut the polygon inside the image range;"
msgstr "``False``：在图像范围内裁剪多边形；"

#: easyidp.reconstruct.Sensor.in_img_boundary:11 of
msgid "back2raw_ignore_todo.png'"
msgstr ""

#: ../../python_api/autodoc/easyidp.reconstruct.save_back2raw_json_and_png.rst:2
msgid "easyidp.reconstruct.save\\_back2raw\\_json\\_and\\_png"
msgstr ""

#: ../../python_api/reconstruct.rst:110:<autosummary>:1
#: easyidp.reconstruct.save_back2raw_json_and_png:1 of
msgid "Save the backward reversed results"
msgstr "保存反向反转结果"

#: easyidp.reconstruct.save_back2raw_json_and_png:3 of
msgid ""
"the outputs of :func:`back2raw() <easyidp.roi.back2raw()>` function "
"results"
msgstr ":func:`back2raw() <easyidp.roi.back2raw()>` 函数结果的输出"

#: easyidp.reconstruct.save_back2raw_json_and_png:5 of
msgid "the folder to save output files"
msgstr "保存输出文件的文件夹"

#: ../../python_api/autodoc/easyidp.reconstruct.sort_img_by_distance.rst:2
msgid "easyidp.reconstruct.sort\\_img\\_by\\_distance"
msgstr ""

#: easyidp.reconstruct.sort_img_by_distance:3 of
msgid "The reconsturction project class"
msgstr "重建项目类"

#: easyidp.reconstruct.sort_img_by_distance:17 of
msgid "the same structure as output of roi.back2raw()"
msgstr "与roi.back2raw()的输出结构相同"

#: ../../python_api/autodoc/easyidp.roi.read_cc_txt.rst:2
msgid "easyidp.roi.read\\_cc\\_txt"
msgstr ""

#: ../../python_api/roi.rst:33:<autosummary>:1 easyidp.roi.read_cc_txt:1 of
msgid "Read the point cloud annotation made by cloudcompare"
msgstr "读取由CloudCompare制作的点云注释"

#: easyidp.roi.read_cc_txt:3 of
msgid "The path to cloudcompare annotation txt file"
msgstr "CloudCompare的txt标注文件路径"

#: easyidp.roi.read_cc_txt:6 of
msgid ""
"Please refer :ref:`make-roi-on-point-cloud` to know how to prepare txt "
"roi annotation in CloudCompare for point cloud."
msgstr "请参阅 :ref:`make-roi-on-point-cloud` 了解如何在CloudCompare中为点云准备txt roi注释。"

#: ../../python_api/autodoc/easyidp.shp.read_proj.rst:2
msgid "easyidp.shp.read\\_proj"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1 easyidp.shp.read_proj:1 of
msgid "read \\*.prj file to pyproj object"
msgstr "读取\\*.prj文件到pyproj对象"

#: easyidp.shp.read_proj:3 of
msgid "the file path of shp \\*.prj"
msgstr "shp \\*.prj 文件的路径"

#: ../../python_api/autodoc/easyidp.shp.read_shp.rst:2
msgid "easyidp.shp.read\\_shp"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1 easyidp.shp.read_shp:1 of
msgid "read shp file to python numpy object"
msgstr "读取shp文件到python numpy对象"

#: easyidp.roi.ROI.read_shp:3 easyidp.shp.read_shp:3
#: easyidp.shp.show_shp_fields:3 of
msgid "the file path of \\*.shp"
msgstr "shp文件的路径"

#: easyidp.shp.read_shp:5 of
msgid ""
"by default None, will read automatically from prj file with the same name"
" of shp filename, or give manually by ``read_shp(..., "
"shp_proj=pyproj.CRS.from_epsg(4326), ...)`` or ``read_shp(..., "
"shp_proj=r'path/to/{shp_name}.prj', ...)``"
msgstr "默认值为None，将自动从与shp文件名相同的prj文件中读取，或者通过 ``read_shp(..., shp_proj=pyproj.CRS.from_epsg(4326), ...)`` 或 ``read_shp(..., shp_proj=r'path/to/{shp_name}.prj', ...)`` 手动指定"

#: easyidp.roi.ROI.read_shp:13 easyidp.shp.read_shp:13 of
msgid "by default 'utf-8', for some chinese characters, 'gbk' may required"
msgstr "默认值为'utf-8'，对于某些中文字符，可能需要'gbk'"

#: easyidp.shp.read_shp:28 of
msgid "The example shp file has the following columns:"
msgstr "示例shp文件具有以下列："

#: easyidp.shp.read_shp:31 of
msgid "[0] ID"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[1] MASSIFID"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[2] CROPTYPE"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[3] CROPDATE"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[4] CROPAREA"
msgstr ""

#: easyidp.shp.read_shp:31 of
msgid "[5] ATTID"
msgstr ""

#: easyidp.shp.read_shp:33 of
msgid "23010...0000"
msgstr ""

#: easyidp.shp.read_shp:33 of
msgid "小麦"
msgstr ""

#: easyidp.shp.read_shp:33 easyidp.shp.read_shp:35 easyidp.shp.read_shp:37
#: easyidp.shp.read_shp:39 easyidp.shp.read_shp:41 easyidp.shp.read_shp:45
#: easyidp.shp.read_shp:47 easyidp.shp.read_shp:49 easyidp.shp.read_shp:51
#: easyidp.shp.read_shp:53 of
msgid "2018-09-01"
msgstr ""

#: easyidp.shp.read_shp:33 of
msgid "61525.26302"
msgstr ""

#: easyidp.shp.read_shp:35 of
msgid "23010...0012"
msgstr ""

#: easyidp.shp.read_shp:35 of
msgid "蔬菜"
msgstr ""

#: easyidp.shp.read_shp:35 of
msgid "2802.33512"
msgstr ""

#: easyidp.shp.read_shp:37 of
msgid "23010...0014"
msgstr ""

#: easyidp.shp.read_shp:37 of
msgid "玉米"
msgstr ""

#: easyidp.shp.read_shp:37 of
msgid "6960.7745"
msgstr ""

#: easyidp.shp.read_shp:39 of
msgid "23010...0061"
msgstr ""

#: easyidp.shp.read_shp:39 of
msgid "牧草"
msgstr ""

#: easyidp.shp.read_shp:39 of
msgid "25349.08639"
msgstr ""

#: easyidp.shp.read_shp:41 of
msgid "23010...0062"
msgstr ""

#: easyidp.shp.read_shp:41 of
msgid "71463.27666"
msgstr ""

#: easyidp.shp.read_shp:43 of
msgid "..."
msgstr ""

#: easyidp.shp.read_shp:45 of
msgid "23010...0582"
msgstr ""

#: easyidp.shp.read_shp:45 of
msgid "胡萝卜"
msgstr ""

#: easyidp.shp.read_shp:45 of
msgid "288.23876"
msgstr ""

#: easyidp.shp.read_shp:47 of
msgid "23010...0577"
msgstr ""

#: easyidp.shp.read_shp:47 of
msgid "杂豆"
msgstr ""

#: easyidp.shp.read_shp:47 of
msgid "2001.80384"
msgstr ""

#: easyidp.shp.read_shp:49 of
msgid "23010...0583"
msgstr ""

#: easyidp.shp.read_shp:49 of
msgid "大豆"
msgstr ""

#: easyidp.shp.read_shp:49 of
msgid "380.41704"
msgstr ""

#: easyidp.shp.read_shp:51 of
msgid "23010...0584"
msgstr ""

#: easyidp.shp.read_shp:51 easyidp.shp.read_shp:53 of
msgid "其它"
msgstr ""

#: easyidp.shp.read_shp:51 of
msgid "9133.25998"
msgstr ""

#: easyidp.shp.read_shp:53 of
msgid "23010...0585"
msgstr ""

#: easyidp.shp.read_shp:53 of
msgid "1704.27193"
msgstr ""

#: easyidp.shp.read_shp:56 of
msgid "First, prepare data"
msgstr "首先，准备数据"

#: easyidp.shp.read_shp:64 of
msgid "Then using the second column ``MASSIFID`` as shape keys:"
msgstr "然后使用第二列``MASSIFID``作为形状键："

#: easyidp.shp.read_shp:80 of
msgid ""
"Due to the duplication of ``CROPTYPE``, you can not using it as the "
"unique key, but you can combine several columns together by passing a "
"list to ``name_field``:"
msgstr "由于``CROPTYPE``的重复，您不能将其用作唯一键，但您可以通过传递一个列表给``name_field``来组合几列："

#: easyidp.shp.read_shp:100 of
msgid ":obj:`easyidp.jsonfile.read_geojson`"
msgstr ""

#: ../../python_api/autodoc/easyidp.shp.show_shp_fields.rst:2
msgid "easyidp.shp.show\\_shp\\_fields"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1 easyidp.shp.show_shp_fields:1 of
msgid ""
"Show geojson properties data, for better setting ``name_field`` of "
":py:obj:`read_shp <easyidp.roi.ROI.read_shp>`"
msgstr ""

#: easyidp.shp.show_shp_fields:5 of
msgid "default is 'utf-8', however, or some chinese characters, 'gbk' is required"
msgstr "默认值为'utf-8'，但是，对于某些中文字符，需要'gbk'"

#: easyidp.roi.ROI.read_geojson:58 easyidp.shp.show_shp_fields:37 of
msgid ":obj:`easyidp.jsonfile.show_geojson_fields`"
msgstr ""

#: ../../python_api/autodoc/easyidp.visualize.draw_backward_one_roi.rst:2
msgid "easyidp.visualize.draw\\_backward\\_one\\_roi"
msgstr ""

#: ../../python_api/visualize.rst:17:<autosummary>:1
#: easyidp.visualize.draw_backward_one_roi:1 of
msgid "Plot one ROI results on all available images."
msgstr "在所有可用图像上绘制一个ROI结果。"

#: easyidp.visualize.draw_backward_one_roi:3 of
msgid "The 3D reconstruction project object"
msgstr "3D重建项目对象"

#: easyidp.visualize.draw_backward_one_roi:5 of
msgid ""
"| The dictionary of one ROI backward to all images. | e.g. "
"``{\"IMG_2345\": np.array([...]), \"IMG_2346\": np.array([])}``"
msgstr ""

#: easyidp.visualize.draw_backward_one_roi of
msgid "The dictionary of one ROI backward to all images."
msgstr ""

#: easyidp.visualize.draw_backward_one_roi of
msgid "e.g. ``{\"IMG_2345\": np.array([...]), \"IMG_2346\": np.array([])}``"
msgstr ""

#: easyidp.visualize.draw_backward_one_roi:8 of
msgid "The pixel buffer number around the backward ROI results, by default 40"
msgstr "反向ROI结果周围的像素缓冲区数，默认值为40"

#: easyidp.visualize.draw_backward_one_roi:10
#: easyidp.visualize.draw_polygon_on_img:11 of
msgid ""
"The image title displayed on the top, by default None -> ``Projection on "
"[img_name]``"
msgstr "显示在顶部的图像标题，默认值为None -> ``Projection on [img_name]``"

#: easyidp.visualize.draw_backward_one_roi:38 of
msgid "Then use this code to show the results of ROI [N1W1]:"
msgstr "然后使用此代码显示ROI [N1W1]的结果："

#: easyidp.visualize.draw_backward_one_roi:44
#: easyidp.visualize.draw_polygon_on_img:69
#: easyidp.visualize.draw_polygon_on_img:86 of
msgid "It will get the following figure:"
msgstr "它将得到如下图："

#: easyidp.visualize.draw_backward_one_roi:-1 of
msgid "draw_backward_one_roi.png'"
msgstr ""

#: ../../python_api/autodoc/easyidp.visualize.draw_polygon_on_img.rst:2
msgid "easyidp.visualize.draw\\_polygon\\_on\\_img"
msgstr ""

#: ../../python_api/visualize.rst:17:<autosummary>:1
#: easyidp.visualize.draw_polygon_on_img:1 of
msgid "Plot one polygon on given image."
msgstr "在给定图像上绘制一个多边形。"

#: easyidp.visualize.draw_polygon_on_img:3 of
msgid "the image file name."
msgstr "图像文件名"

#: easyidp.visualize.draw_polygon_on_img:5 of
msgid "the file path of image"
msgstr "图像的文件路径"

#: easyidp.visualize.draw_polygon_on_img:7 of
msgid "the 2D polygon pixel coordinate on the image"
msgstr "图像上的2D多边形像素坐标"

#: easyidp.visualize.draw_polygon_on_img:46 of
msgid ""
"Then do backward projection, find the previous ROI positions on the raw "
"images."
msgstr "然后进行反向投影，找到原始图像上的先前ROI位置。"

#: easyidp.visualize.draw_polygon_on_img:58 of
msgid "The using this function to check one polygon on raw images"
msgstr "使用此函数检查原始图像上的一个多边形"

#: easyidp.visualize.draw_polygon_on_img:-1 of
msgid "p4d_back2raw_single_view.png'"
msgstr ""

#: easyidp.visualize.draw_polygon_on_img:75 of
msgid ""
"Add an corrected polygon (here manual shifting 10 pixels just as "
"example), and change the color and alpha info:"
msgstr "添加一个校正后的多边形（这里手动移动10个像素作为示例），并更改颜色和透明度信息："

#: easyidp.visualize.draw_polygon_on_img:-1 of
msgid "p4d_back2raw_single_view2.png'"
msgstr ""

#: ../../python_api/cvtools.rst:3
msgid "• cvtools"
msgstr ""

#: ../../python_api/cvtools.rst:7
msgid ""
"This is a package for simple imarray operations. Mainly about creating "
"binary masks and cropping image parts from given polygon coordinates."
msgstr ""
"这是一个用于简单图像数组操作的包。主要用于创建二进制掩码和从给定的多边形坐标裁剪图像部分。"

#: ../../python_api/cvtools.rst:10
msgid ""
"It can be viewed as a submodule for the :class:`easyidp.GeoTiff "
"<easyidp.geotiff.GeoTiff>` class."
msgstr ""
"它可以被视为 :class:`easyidp.GeoTiff <easyidp.geotiff.GeoTiff>` 类的子模块。"

#: ../../python_api/cvtools.rst:13 ../../python_api/data.rst:76
#: ../../python_api/geotiff.rst:19 ../../python_api/geotools.rst:11
#: ../../python_api/json.rst:15 ../../python_api/metashape.rst:20
#: ../../python_api/pix4d.rst:19 ../../python_api/pointcloud.rst:19
#: ../../python_api/reconstruct.rst:104 ../../python_api/roi.rst:24
#: ../../python_api/shp.rst:10 ../../python_api/visualize.rst:11
msgid "Functions"
msgstr "函数"

#: ../../python_api/cvtools.rst:20:<autosummary>:1
msgid ""
":py:obj:`imarray_crop <easyidp.cvtools.imarray_crop>`\\ \\(imarray\\, "
"polygon\\_hv\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/cvtools.rst:20:<autosummary>:1
msgid ""
":py:obj:`poly2mask <easyidp.cvtools.poly2mask>`\\ \\(image\\_shape\\, "
"poly\\_coord\\[\\, engine\\]\\)"
msgstr ""

#: ../../python_api/cvtools.rst:20:<autosummary>:1
msgid ":py:obj:`rgb2gray <easyidp.cvtools.rgb2gray>`\\ \\(rgb\\)"
msgstr ""

#: ../../python_api/data.rst:3
msgid "Data"
msgstr "数据"

#: ../../python_api/data.rst:8
msgid "Dataset"
msgstr "数据集"

#: ../../python_api/data.rst:10
msgid "The datasets are as follows (**for user**):"
msgstr "数据集如下（**供用户使用**）："

#: ../../python_api/data.rst:17:<autosummary>:1
msgid ":py:obj:`Lotus <easyidp.data.Lotus>`\\ \\(\\)"
msgstr ""

#: ../../python_api/data.rst:17:<autosummary>:1
msgid ":py:obj:`ForestBirds <easyidp.data.ForestBirds>`\\ \\(\\)"
msgstr ""

#: ../../python_api/data.rst:18
msgid "Use example:"
msgstr "使用示例："

#: ../../python_api/data.rst:39
msgid ""
"For Chinese mainland user who can not access the GoogleDrive directly, "
"the author personally setup an AliYun OSS downloading services in "
"**2.0.1**, please update EasyIDP to the latest version (probably required"
" :ref:`using-from-source-code`) and try:"
msgstr ""
"对于无法直接访问GoogleDrive的中国大陆用户，作者在**2.0.1**中亲自设置了阿里云OSS下载服务，请更新EasyIDP到最新版本（可能需要"
" :ref:`using-from-source-code` ），并尝试："

#: ../../python_api/data.rst:47
msgid "Then it will give an cost notice in Chinese for you to confirm:"
msgstr "然后它将给出中文的费用通知供您确认："

#: ../../python_api/data.rst:58
msgid ""
"After typing the required sentences, it will downloading the dataset "
"automatically from AliYun OSS services just like google cloud "
"performance."
msgstr ""
"输入所需的句子后，它将像Google云性能一样自动从阿里云OSS服务下载数据集。"

#: ../../python_api/data.rst:66
msgid "The dataset base class and testing class (**for developers**):"
msgstr "数据集基类和测试类（**供开发者使用**）："

#: ../../python_api/data.rst:74:<autosummary>:1
msgid ""
":py:obj:`EasyidpDataSet <easyidp.data.EasyidpDataSet>`\\ \\(\\[name\\, "
"gdrive\\_url\\, size\\]\\)"
msgstr ""

#: ../../python_api/data.rst:74:<autosummary>:1
msgid ":py:obj:`TestData <easyidp.data.TestData>`\\ \\(\\[test\\_out\\]\\)"
msgstr ""

#: ../../python_api/data.rst:86:<autosummary>:1
msgid ""
":py:obj:`user_data_dir <easyidp.data.user_data_dir>`\\ "
"\\(\\[file\\_name\\]\\)"
msgstr ""

#: ../../python_api/data.rst:86:<autosummary>:1
msgid ":py:obj:`show_data_dir <easyidp.data.show_data_dir>`\\ \\(\\)"
msgstr ""

#: ../../python_api/data.rst:86:<autosummary>:1
msgid ":py:obj:`url_checker <easyidp.data.url_checker>`\\ \\(url\\)"
msgstr ""

#: ../../python_api/data.rst:86:<autosummary>:1
msgid ":py:obj:`download_all <easyidp.data.download_all>`\\ \\(\\)"
msgstr ""

#: ../../python_api/data.rst:87
msgid "The functions can be used by:"
msgstr "这些函数可以通过以下方式使用："

#: ../../python_api/geotiff.rst:3
msgid "GeoTiff"
msgstr ""

#: ../../python_api/geotiff.rst:8 ../../python_api/metashape.rst:9
#: ../../python_api/pix4d.rst:8 ../../python_api/pointcloud.rst:8
#: ../../python_api/reconstruct.rst:13 ../../python_api/roi.rst:8
msgid "Class"
msgstr "类"

#: ../../python_api/geotiff.rst:10
msgid ""
"A summary of class ``easyidp.pointcloud.GeoTiff``, can be simple accessed"
" by ``easyidp.GeoTiff``"
msgstr ""

#: ../../python_api/geotiff.rst:17:<autosummary>:1
msgid ":py:obj:`GeoTiff <easyidp.geotiff.GeoTiff>`\\ \\(\\[tif\\_path\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:21
msgid ""
"This module (``easyidp.geotiff``) also contains the following standard-"
"alone functions for preocessing GeoTiff file directly."
msgstr ""
"此模块（``easyidp.geotiff``）还包含以下独立函数，用于直接处理GeoTiff文件。"

#: ../../python_api/geotiff.rst:25
msgid ""
"The :class:`easyidp.GeoTiff <easyidp.geotiff.GeoTiff>` class is an "
"advanced wrapper around the following functions, which is generally "
"sufficient for most simple application cases, please don't use the "
"following functions unless you really need them."
msgstr ""
":class:`easyidp.GeoTiff <easyidp.geotiff.GeoTiff>` 类是以下函数的高级包装器，通常足以满足大多数简单应用情况，除非您确实需要，否则请不要使用以下函数。"

#: ../../python_api/geotiff.rst:36:<autosummary>:1
msgid ":py:obj:`get_header <easyidp.geotiff.get_header>`\\ \\(tif\\_path\\)"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
msgid ":py:obj:`get_imarray <easyidp.geotiff.get_imarray>`\\ \\(tif\\_path\\)"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
msgid ""
":py:obj:`geo2pixel <easyidp.geotiff.geo2pixel>`\\ \\(points\\_hv\\, "
"header\\[\\, return\\_index\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
msgid ""
":py:obj:`pixel2geo <easyidp.geotiff.pixel2geo>`\\ \\(points\\_hv\\, "
"header\\)"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
msgid ":py:obj:`tifffile_crop <easyidp.geotiff.tifffile_crop>`\\ \\(page\\, top\\, left\\, h\\, w\\)"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
msgid ":py:obj:`point_query <easyidp.geotiff.point_query>`\\ \\(page\\, points\\_hv\\[\\, header\\]\\)"
msgstr ""

#: ../../python_api/geotiff.rst:36:<autosummary>:1
msgid ":py:obj:`save_geotiff <easyidp.geotiff.save_geotiff>`\\ \\(header\\, imarray\\, ...\\)"
msgstr ""

#: ../../python_api/geotools.rst:3
msgid "• geotools"
msgstr ""

#: ../../python_api/geotools.rst:7
msgid "This is a package for simple geo-coordinate transformation."
msgstr "这是一个用于简单地理坐标转换的包。"

#: ../../python_api/geotools.rst:19:<autosummary>:1
msgid ":py:obj:`convert_proj <easyidp.geotools.convert_proj>`\\ \\(shp\\_dict\\, crs\\_origin\\, crs\\_target\\)"
msgstr ""

#: ../../python_api/geotools.rst:19:<autosummary>:1
msgid ":py:obj:`convert_proj3d <easyidp.geotools.convert_proj3d>`\\ \\(points\\_np\\, crs\\_origin\\, crs\\_target\\)"
msgstr ""

#: ../../python_api/geotools.rst:19:<autosummary>:1
msgid ":py:obj:`is_single_point <easyidp.geotools.is_single_point>`\\ \\(points\\_np\\)"
msgstr ""

#: ../../python_api/index.rst:3
msgid "API Summary"
msgstr "API概述"

#: ../../python_api/index.rst:5
msgid "The EasyIDP package have the following modules:"
msgstr "EasyIDP包包含以下模块："

#: ../../python_api/index.rst:7
msgid ":doc:`Data Module <./data>` : Download and provide path to example files."
msgstr ""

#: ../../python_api/index.rst:8
msgid ":doc:`Point cloud Module <./pointcloud>` : read, write, check and crop operation."
msgstr ":doc:`点云模块 <./pointcloud>`： 读取、写入、检查和裁剪操作。"

#: ../../python_api/index.rst:9
msgid ":doc:`GeoTiff Module <./geotiff>` : read, write, crop, and statistics operation."
msgstr ":doc:`GeoTiff模块 <./geotiff>`： 读取、写入、裁剪和统计操作。"

#: ../../python_api/index.rst:11
msgid ":doc:`cvtools Submodule <./cvtools>` : processing ndarray images."
msgstr ":doc:`cvtools子模块 <./cvtools>`： 处理ndarray图像。"

#: ../../python_api/index.rst:13
msgid ":doc:`ROI Module <./roi>` : read region of interest from shp and txt file."
msgstr ":doc:`ROI模块 <./roi>`： 从shp和txt文件中读取感兴趣区域。"

#: ../../python_api/index.rst:15
msgid ":doc:`shp Submodule <./shp>`: read shape (\\*.shp) file."
msgstr ":doc:`shp子模块 <./shp>`： 读取shape (\\*.shp)文件。"

#: ../../python_api/index.rst:16
msgid ":doc:`jsonfile Submodule <./json>`: read and write json and geojson file."
msgstr ":doc:`jsonfile子模块 <./json>`： 读取和写入json和geojson文件。"

#: ../../python_api/index.rst:17
msgid ":doc:`geotools Submodule <./geotools>`: transform geo-coordinate."
msgstr ":doc:`geotools子模块 <./geotools>`： 转换地理坐标。"

#: ../../python_api/index.rst:19
msgid ":doc:`reconstruct Module <./reconstruct>` : process 3D reconstruction software project."
msgstr ":doc:`reconstruct模块 <./reconstruct>`： 处理3D重建软件项目。"

#: ../../python_api/index.rst:21
msgid ":doc:`Pix4D Submodule <./pix4d>`: handle Pix4D projects."
msgstr ":doc:`Pix4D子模块 <./pix4d>`： 处理Pix4D项目。"

#: ../../python_api/index.rst:22
msgid ":doc:`Metashape Submodule <./metashape>`: handle Metashape projects."
msgstr ":doc:`Metashape子模块 <./metashape>`： 处理Metashape项目。"

#: ../../python_api/index.rst:24
msgid ""
":doc:`visualize Module <./visualize>` : Draw visualization figures for "
"the output."
msgstr ""

#: ../../python_api/index.rst:27
msgid ""
"For each module, consisted by several base functions (e.g. "
"``easyidp.geotiff.*`` ) and an advanced wrapper class for them (e.g. "
"``easyidp.GeoTiff``). In the most cases, please use the upper case class "
"wrapper rather than the lowercase base functions unless you really need "
"them."
msgstr ""
"每一个模块都由一些底层函数(如 ``easyidp.geotiff.*`` )和一个高级封装的类(如 ``easyidp.GeoTiff`` "
")组成。大部分情况下，除非特别需要，请使用大写的高级封装的类而不是小写的底层函数"

#: ../../python_api/index.rst:29
msgid "For example, this function can be used to read geotiff meta infomation:"
msgstr "例如，下面这个函数可以用来读取geotiff的元信息："

#: ../../python_api/index.rst:36
msgid ""
"But it is more recommended use the advanced wrapper in most application "
"cases:"
msgstr "但是大部分情况下更推荐使用高级封装："

#: ../../python_api/index.rst:43
msgid ""
"Although it may seem like more code, advanced wrappers have more "
"convenient functions to use without caring about specific data structure "
"details. Most of our example cases are using the advanced class wrapper."
msgstr "尽管看上去代码数量变多了，但是高级封装有更方便使用的函数，而不用关心具体的数据结构细节。大部分的例子也使用高级封装的类"

#: ../../python_api/index.rst:47
msgid ""
"The :class:`easyidp.Container` object, its child objects, and objects "
"contains this object, like :class:`easyidp.ROI <easyidp.roi.ROI>` , "
"``ProjectPool`` , :class:`easyidp.Recons <easyidp.reconstruct.Recons>` , "
":class:`easyidp.Pix4D <easyidp.pix4d.Pix4D>` , :class:`easyidp.Metashape "
"<easyidp.metashape.Metashape>`, can not be saved by pickle."
msgstr ""

#: ../../python_api/index.rst:49
msgid ""
"Please check this link for more details `What can be pickled and "
"unpickled <https://docs.python.org/3/library/pickle.html#what-can-be-"
"pickled-and-unpickled>`_ ."
msgstr ""

#: ../../python_api/json.rst:5
msgid "• jsonfile"
msgstr ""

#: ../../python_api/json.rst:9
msgid ""
"This is a package for simple json file operations. Mainly about reading "
"and writting json files from python dict object."
msgstr "这是一个用于简单json文件操作的包。主要用于从python字典对象读取和写入json文件。"

#: ../../python_api/json.rst:12
msgid ""
"It can be viewed as a submodule for the :class:`easyidp.ROI "
"<easyidp.roi.ROI>` class."
msgstr "它可以被视为 :class:`easyidp.ROI <easyidp.roi.ROI>` 类的子模块。"

#: ../../python_api/json.rst:19
msgid ""
"The ``easyidp.ROI`` class is an advanced wrapper around the following "
"functions, which is generally sufficient for most simple application "
"cases, please don't use the following functions unless you really need "
"to."
msgstr ""
" ``easyidp.ROI`` 类是以下函数的高级包装器，通常足以满足大多数简单应用情况，除非您确实需要，否则请不要使用以下函数。"

#: ../../python_api/json.rst:29:<autosummary>:1
msgid ":py:obj:`read_json <easyidp.jsonfile.read_json>`\\ \\(json\\_path\\)"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1
msgid ""
":py:obj:`read_geojson <easyidp.jsonfile.read_geojson>`\\ "
"\\(geojson\\_path\\[\\, name\\_field\\, ...\\]\\)"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1
msgid ""
":py:obj:`show_geojson_fields <easyidp.jsonfile.show_geojson_fields>`\\ "
"\\(geojson\\_path\\)"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1
msgid ""
":py:obj:`dict2json <easyidp.jsonfile.dict2json>`\\ \\(data\\_dict\\, "
"json\\_path\\[\\, indent\\, ...\\]\\)"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1
msgid ""
":py:obj:`write_json <easyidp.jsonfile.write_json>`\\ \\(data\\_dict\\, "
"json\\_path\\[\\, indent\\, ...\\]\\)"
msgstr ""

#: ../../python_api/json.rst:29:<autosummary>:1
msgid ""
":py:obj:`save_json <easyidp.jsonfile.save_json>`\\ \\(data\\_dict\\, "
"json\\_path\\[\\, indent\\, ...\\]\\)"
msgstr ""

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:2 ../../python_api/roi.rst:18
msgid "easyidp.roi.ROI"
msgstr ""

#: ../../python_api/roi.rst:14 easyidp.roi.ROI:1 of
msgid ""
"A Region of Interest (ROI) object, can be either 2D or 3D, often read "
"from shp file."
msgstr "兴趣区（ROI）对象，可以是2D或3D，通常从shp文件读取。"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
#: easyidp.roi.ROI.__init__:1 of
msgid "The method to initialize the ROI class"
msgstr ""

#: easyidp.roi.ROI.__init__:3 of
msgid "the path to roi file, often is shp file path, by default None"
msgstr "ROI文件的路径，通常是shp文件路径，默认值为None"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ":py:obj:`__init__ <easyidp.roi.ROI.__init__>`\\ \\(\\[target\\_path\\]\\)"
msgstr ""

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ""
":py:obj:`back2raw <easyidp.roi.ROI.back2raw>`\\ \\(recons\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ":py:obj:`change_crs <easyidp.roi.ROI.change_crs>`\\ \\(target\\_crs\\)"
msgstr ""

#: easyidp.roi.ROI.change_crs:1 of
msgid "Change the geo coordinates of roi to another crs."
msgstr "将ROI的地理坐标更改为另一个CRS。"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ""
":py:obj:`crop <easyidp.roi.ROI.crop>`\\ \\(target\\[\\, "
"save\\_folder\\]\\)"
msgstr ""

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ""
":py:obj:`get_z_from_dsm <easyidp.roi.ROI.get_z_from_dsm>`\\ \\(dsm\\[\\, "
"mode\\, kernel\\, buffer\\, ...\\]\\)"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:1 of
msgid "Get the z values (heights) from DSM for 2D polygon"
msgstr "从DSM获取2D多边形的z值（高度）"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ""
":py:obj:`get_z_from_pcd <easyidp.roi.ROI.get_z_from_pcd>`\\ \\(pcd\\[\\, "
"mode\\, kernel\\, buffer\\]\\)"
msgstr ""

#: easyidp.roi.ROI.get_z_from_pcd:1 of
msgid "Get the z values (heights) from Point cloud for 2D polygon"
msgstr "从点云获取2D多边形的z值（高度）"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ":py:obj:`is_geo <easyidp.roi.ROI.is_geo>`\\ \\(\\)"
msgstr ""

#: easyidp.roi.ROI.is_geo:1 of
msgid "Returns True if the ROI is geo coordinate."
msgstr "如果ROI是地理坐标，返回True"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ""
":py:obj:`open <easyidp.roi.ROI.open>`\\ \\(target\\_path\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: easyidp.roi.ROI.open:1 of
msgid ""
"An advanced wrapper to open ROI without dealing with file format, current"
" support shapefile.shp and labelme.json"
msgstr "一个高级包装器，用于打开ROI而无需处理文件格式，目前支持shapefile.shp和labelme.json"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ""
":py:obj:`read_labelme_json <easyidp.roi.ROI.read_labelme_json>`\\ "
"\\(json\\_path\\)"
msgstr ""

#: easyidp.roi.ROI.read_labelme_json:1 of
msgid "read roi from labelme marked json file"
msgstr "从labelme标记的json文件中读取ROI"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ""
":py:obj:`read_shp <easyidp.roi.ROI.read_shp>`\\ \\(shp\\_path\\[\\, "
"shp\\_proj\\, name\\_field\\, ...\\]\\)"
msgstr ""

#: easyidp.roi.ROI.read_shp:1 of
msgid "read ROI from shp file"
msgstr "从shp文件读取ROI"

#: ../../python_api/manualdoc/easyidp.roi.ROI.rst:27:<autosummary>:1
msgid ""
":py:obj:`read_geojson <easyidp.roi.ROI.read_geojson>`\\ "
"\\(geojson\\_path\\[\\, name\\_field\\, ...\\]\\)"
msgstr ""

#: easyidp.roi.ROI.read_geojson:1 of
msgid "read ROI from geojson file"
msgstr "从geojson文件读取ROI"

#: easyidp.roi.ROI.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`crs <easyidp.roi.ROI.crs>`\\"
msgstr ""

#: easyidp.roi.ROI.crs:1 of
msgid "the CRS that current ROI used."
msgstr "当前ROI使用的CRS。"

#: easyidp.roi.ROI.back2raw:1:<autosummary>:1 of
msgid ":py:obj:`source <easyidp.roi.ROI.source>`\\"
msgstr ""

#: easyidp.roi.ROI.source:1 of
msgid "the source file path of current ROI."
msgstr "当前ROI的源文件路径。"

#: easyidp.roi.ROI.back2raw:7 of
msgid ""
"| Whether do distortion correction, by default True (back to raw image "
"with lens distortion); | If back to software corrected images without len"
" distortion, set it to False. | (Pix4D support do this operation, seems "
"metashape not supported yet.)"
msgstr ""

#: easyidp.roi.ROI.back2raw of
msgid ""
"Whether do distortion correction, by default True (back to raw image with"
" lens distortion);"
msgstr "是否进行畸变校正，默认值为True（返回带镜头畸变的原始图像）；"

#: easyidp.roi.ROI.back2raw of
msgid ""
"If back to software corrected images without len distortion, set it to "
"False."
msgstr "如果返回没有镜头畸变的软件校正图像，请将其设置为False。"

#: easyidp.roi.ROI.back2raw of
msgid "(Pix4D support do this operation, seems metashape not supported yet.)"
msgstr "(Pix4D支持此操作，Metashape似乎尚不支持。)"

#: easyidp.roi.ROI.back2raw:20 of
msgid ""
"**out_dict** -- The 2-layer dictionary, the first layer is the roi id, "
"the second layer is the image names contains each roi ( "
"``out_dict['roi_id']['image_name']`` )  .. code-block:: python      >>> "
"out_dict = roi.back2raw(...)     # find all available images with "
"specified roi (plot), e.g. roi named 'N1W1':     >>> one_roi_dict = "
"out_dict['N1W1']  # roi id     {'IMG_3457': ..., 'IMG_3458': ..., ...}"
"     # find the sepecific roi on specific image, e.g. roi named 'N1W1' on"
" image 'IMG_3457':     >>> one_roi_one_img_coord = "
"out_dict[\"N1W1']['IMG_3457']     array([[  43.9388228 , 1247.0474214 ],"
"            [  69.04076173,  972.90860296],            [ 353.26968458,  "
"993.31308291],            [ 328.12327606, 1267.41006845],            [  "
"43.9388228 , 1247.0474214 ]])  .. caution::     It is recommended to use "
"dict.items() for iteration.      .. code-block:: python          for "
"roi_id, img_dict in out_dict.items():             # roi_id = 'N1W1'"
"             # img_dict = out_dict[roi_id]             for img_name, "
"coords in img_dict.items():                 # img_name = \"IMG_3457\""
"                 # coords = out_dict[roi_id][img_name]                 "
"print(coords)      Not recommended to use in this way:      .. code-"
"block:: python          for roi_id in out_dict.keys()             "
"img_dict = out_dict[roi_id]             for img_name in img_dict.keys():"
"                 coords = out_dict[roi_id][img_name]                 "
"print(coords)"
msgstr ""

#: easyidp.roi.ROI.back2raw:20 of
msgid ""
"**out_dict** -- The 2-layer dictionary, the first layer is the roi id, "
"the second layer is the image names contains each roi ( "
"``out_dict['roi_id']['image_name']`` )"
msgstr ""

#: easyidp.roi.ROI.back2raw:37 of
msgid "It is recommended to use dict.items() for iteration."
msgstr "建议使用dict.items()进行迭代。"

#: easyidp.roi.ROI.back2raw:49 of
msgid "Not recommended to use in this way:"
msgstr "不建议以这种方式使用："

#: easyidp.roi.ROI.back2raw:77 of
msgid "Then do the backward calculation"
msgstr "然后进行反向计算"

#: easyidp.roi.ROI.back2raw:108 of
msgid ":obj:`easyidp.pix4d.back2raw`, :obj:`easyidp.metashape.back2raw`"
msgstr ""

#: easyidp.roi.ROI.change_crs:3 of
msgid "the CRS want convert to."
msgstr "要转换到的CRS。"

#: easyidp.roi.ROI.change_crs:13 of
msgid "Read roi with lon and lat CRS (WGS84)"
msgstr "读取使用经纬度CRS（WGS84）的ROI"

#: easyidp.roi.ROI.change_crs:32 of
msgid "Check the roi coordinates"
msgstr "检查ROI坐标"

#: easyidp.roi.ROI.change_crs:43 of
msgid "Read a geotiff with different CRS (UTM 54N)"
msgstr "读取具有不同CRS（UTM 54N）的GeoTIFF"

#: easyidp.roi.ROI.change_crs:65 of
msgid "Change the roi crs (coordiante) from WGS84 to UTM 54N"
msgstr "将ROI的CRS（坐标）从WGS84更改为UTM 54N"

#: easyidp.roi.ROI.change_crs:86 of
msgid "Check the converted coordiante values"
msgstr "检查转换后的坐标值"

#: easyidp.roi.ROI.crop:3 easyidp.roi.ROI.get_z_from_dsm:3 of
msgid "the path of dsm, or the GeoTiff object from idp.GeoTiff()"
msgstr "DSM的路径，或从idp.GeoTiff()生成的GeoTiff对象"

#: easyidp.roi.ROI.crop:26 of
msgid "Then crop the given DOM, DSM and PointCloud:"
msgstr "然后裁剪给定的DOM、DSM和点云："

#: easyidp.roi.ROI.crop:64 of
msgid ""
"Or you can specify the ``save_folder`` parameter to automatically save "
"the cropped results"
msgstr "或者您可以指定``save_folder``参数以自动保存裁剪结果"

#: easyidp.roi.ROI.crop:70 of
msgid ":func:`easyidp.GeoTiff.crop_rois <easyidp.geotiff.GeoTiff.crop_rois>`"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:5 of
msgid ""
"the mode to calculate z values, by default \"face\".  - ``point``: get "
"height on each vertex, result in different values for each vertex - "
"``face``: get height on polygon face, result in the same value for each "
"vertex"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:5 of
msgid "the mode to calculate z values, by default \"face\"."
msgstr "计算z值的模式，默认值为\"face\"。"

#: easyidp.roi.ROI.get_z_from_dsm:7 of
msgid ""
"``point``: get height on each vertex, result in different values for each"
" vertex"
msgstr "``point``：获取每个顶点的高度，结果是每个顶点的值不同"

#: easyidp.roi.ROI.get_z_from_dsm:8 of
msgid ""
"``face``: get height on polygon face, result in the same value for each "
"vertex"
msgstr "``face``：获取多边形面的高度，结果是每个顶点的值相同"

#: easyidp.roi.ROI.get_z_from_dsm:10 of
msgid ""
"The math kernel to calculate the z value, by default 'mean'  - ``mean``: "
"the mean value inside polygon - ``min``: the minimum value inside polygon"
" - ``max``: the maximum value inside polygon - ``pmin5``: 5th *percentile"
" mean* inside polygon - ``pmin10``: 10th *percentile mean* inside polygon"
" - ``pmax5``: 95th *percentile mean* inside polygon - ``pmax10``: 90th "
"*percentile mean* inside polygon  .. note::      percentile mean: the "
"mean value of all pixels over/under xth percentile threshold      .. "
"image:: ../../_static/images/python_api/percentile_mean.png         :alt:"
" percentile_mean.png'         :scale: 35"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:10 of
msgid "The math kernel to calculate the z value, by default 'mean'"
msgstr "计算z值的数学内核，默认值为'mean'"

#: easyidp.roi.ROI.get_z_from_dsm:12 of
msgid "``mean``: the mean value inside polygon"
msgstr "``mean``：多边形内的平均值"

#: easyidp.roi.ROI.get_z_from_dsm:13 of
msgid "``min``: the minimum value inside polygon"
msgstr "``min``：多边形内的最小值"

#: easyidp.roi.ROI.get_z_from_dsm:14 of
msgid "``max``: the maximum value inside polygon"
msgstr "``max``：多边形内的最大值"

#: easyidp.roi.ROI.get_z_from_dsm:15 of
msgid "``pmin5``: 5th *percentile mean* inside polygon"
msgstr "``pmin5``：多边形内第5个*百分位数平均值*"

#: easyidp.roi.ROI.get_z_from_dsm:16 of
msgid "``pmin10``: 10th *percentile mean* inside polygon"
msgstr "``pmin10``：多边形内第10个*百分位数平均值*"

#: easyidp.roi.ROI.get_z_from_dsm:17 of
msgid "``pmax5``: 95th *percentile mean* inside polygon"
msgstr "``pmax5``：多边形内第95个*百分位数平均值*"

#: easyidp.roi.ROI.get_z_from_dsm:18 of
msgid "``pmax10``: 90th *percentile mean* inside polygon"
msgstr "``pmax10``：多边形内第90个*百分位数平均值*"

#: easyidp.roi.ROI.get_z_from_dsm:22 of
msgid ""
"percentile mean: the mean value of all pixels over/under xth percentile "
"threshold"
msgstr "百分位数平均值：所有像素在第x个百分位数阈值以上/以下的平均值"

#: easyidp.roi.ROI.get_z_from_dsm of
msgid "percentile_mean.png'"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:28 of
msgid ""
"| the buffer of ROI, by default 0 (no buffer),  - ``0``: not using buffer"
" - ``-1``: ignore given polygon, using the full dsm to calculate the "
"height - ``float``: buffer distance, the unit of buffer follows the DSM "
"coordinates, either pixel or meter.  .. note::      If ``mode=\"point\"``"
" , will generate a round buffer polygon first, then extract the z-value "
"by this region, but the return will only be a single point.      If "
"``mode=\"face\"``, will buffer the polygon and then calculate the height "
"inside the buffered polygon      .. image:: "
"../../_static/images/python_api/roi_crop_mode.png         :alt: "
"roi_crop_mode.png'         :scale: 30"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm of
msgid "the buffer of ROI, by default 0 (no buffer),"
msgstr "ROI的缓冲区，默认值为0（无缓冲区），"

#: easyidp.roi.ROI.get_z_from_dsm:30 of
msgid "``0``: not using buffer"
msgstr "``0``：不使用缓冲区"

#: easyidp.roi.ROI.get_z_from_dsm:31 of
msgid "``-1``: ignore given polygon, using the full dsm to calculate the height"
msgstr "``-1``：忽略给定的多边形，使用整个DSM计算高度"

#: easyidp.roi.ROI.get_z_from_dsm:32 of
msgid ""
"``float``: buffer distance, the unit of buffer follows the DSM "
"coordinates, either pixel or meter."
msgstr "``float``：缓冲距离，缓冲区的单位遵循DSM坐标，可以是像素或米。"

#: easyidp.roi.ROI.get_z_from_dsm:36 of
msgid ""
"If ``mode=\"point\"`` , will generate a round buffer polygon first, then "
"extract the z-value by this region, but the return will only be a single "
"point."
msgstr "如果 ``mode=\"point\"`` ，将首先生成一个圆形缓冲多边形，然后通过该区域提取z值，但返回值将只有一个点。"

#: easyidp.roi.ROI.get_z_from_dsm:38 of
msgid ""
"If ``mode=\"face\"``, will buffer the polygon and then calculate the "
"height inside the buffered polygon"
msgstr "如果 ``mode=\"face\"`` ，将缓冲多边形，然后计算缓冲多边形内的高度"

#: easyidp.roi.ROI.get_z_from_dsm of
msgid "roi_crop_mode.png'"
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:44 of
msgid ""
"When the crs is not the save with DSM crs, where change the ROI crs to "
"fit DSM.  - ``False`` (default): change ROI's CRS; - ``True``: not change"
" ROI's CRS, only attach the z value to current coordinate."
msgstr ""

#: easyidp.roi.ROI.get_z_from_dsm:44 of
msgid ""
"When the crs is not the save with DSM crs, where change the ROI crs to "
"fit DSM."
msgstr "当CRS与DSM CRS不同时，将ROI CRS更改为适应DSM。"

#: easyidp.roi.ROI.get_z_from_dsm:46 of
msgid "``False`` (default): change ROI's CRS;"
msgstr " ``False``（默认值）：更改ROI的CRS；"

#: easyidp.roi.ROI.get_z_from_dsm:47 of
msgid ""
"``True``: not change ROI's CRS, only attach the z value to current "
"coordinate."
msgstr "``True`` ：不更改ROI的CRS，只将z值附加到当前坐标。"

#: easyidp.roi.ROI.get_z_from_dsm:65 of
msgid "The ROI and DSM, did not share the same CRS."
msgstr "ROI和DSM没有共享相同的CRS。"

#: easyidp.roi.ROI.get_z_from_dsm:67 of
msgid "The ROI is in longitude-latitude coordinate system, unit is degree."
msgstr "ROI在经纬度坐标系中，单位为度。"

#: easyidp.roi.ROI.get_z_from_dsm:96 of
msgid "While the DSM (and DOM) are in UTM zone 54N, unit is meter."
msgstr "而DSM（和DOM）在UTM区54N，单位为米。"

#: easyidp.roi.ROI.get_z_from_dsm:108 of
msgid "Different mode examples"
msgstr "不同模式示例"

#: easyidp.roi.ROI.get_z_from_dsm:111 of
msgid "The point mode, each point has its unique z value."
msgstr "点模式，每个点都有其唯一的z值。"

#: easyidp.roi.ROI.get_z_from_dsm:139 of
msgid "The face mode, all points of one ROI share the same z value."
msgstr "面模式，一个ROI的所有点共享相同的z值。"

#: easyidp.roi.ROI.get_z_from_dsm:167 of
msgid "Setting buffer"
msgstr "设置缓冲区"

#: easyidp.roi.ROI.get_z_from_dsm:170 of
msgid ""
"You can using buffer to calculate z values from a larger area. This will "
"decrease the effects of some extreme noise points on DSM. Especially for "
"the point mode, which is more sensitive to such noise."
msgstr ""
"您可以使用缓冲区从更大的区域计算z值。这将减少一些极端噪声点对DSM的影响。尤其是对于点模式，它对这种噪声更敏感。"

#: easyidp.roi.ROI.get_z_from_dsm:174 of
msgid ""
"The value here share the same unit as DSM, if your DSM in lon-lat "
"coordinate (e.g. WGS84, EPSG:4326), ``buffer=1.0`` will result in 1.0 "
"degree in longitude and latitude, this is a very large area!"
msgstr ""
"此处的值与DSM共享相同的单位，如果您的DSM在经纬度坐标系中（例如WGS84，EPSG:4326），``buffer=1.0`` 将导致经纬度为1.0度，这是一个非常大的区域！"

#: easyidp.roi.ROI.get_z_from_dsm:201 of
msgid "keep_crs option"
msgstr "keep_crs选项"

#: easyidp.roi.ROI.get_z_from_dsm:204 of
msgid ""
"If not keep CRS, the ROI x and y values will also change to the same "
"coordinate with DSM."
msgstr "如果不保持CRS，ROI的x和y值也将更改为与DSM相同的坐标。"

#: easyidp.roi.ROI.get_z_from_dsm:206 of
msgid "If do not want the value change, please setting ``keep_crs=True``"
msgstr "如果不希望值更改，请设置 ``keep_crs=True`` "

#: easyidp.roi.ROI.get_z_from_dsm:235 of
msgid ""
":func:`easyidp.GeoTiff.polygon_math "
"<easyidp.geotiff.GeoTiff.polygon_math>`"
msgstr ""

#: easyidp.roi.ROI.get_z_from_pcd:3 of
msgid "This function has not been implemented."
msgstr "此功能尚未实现。"

#: easyidp.roi.ROI.get_z_from_pcd:5 of
msgid ":obj:`get_z_from_dsm`"
msgstr ""

#: easyidp.roi.ROI.open:3 of
msgid "the path to roi files, current support shapefile.shp and labelme.json"
msgstr "ROI文件的路径，目前支持shapefile.shp和labelme.json"

#: easyidp.roi.ROI.open:8 of
msgid "Initialize an empty object:"
msgstr "初始化一个空对象："

#: easyidp.roi.ROI.open:17 easyidp.roi.ROI.read_geojson:19
#: easyidp.roi.ROI.read_shp:25 of
msgid "Then you can open a ROI by:"
msgstr "然后您可以通过以下方式打开ROI："

#: easyidp.roi.ROI.open:25 of
msgid "Or using this short function:"
msgstr "或者使用此简短函数："

#: easyidp.roi.ROI.open:35 of
msgid ""
"You can also pass several control parameters in this function, please "
"refer to :func:`read_shp` and :func:`read_labelme_json` for more "
"information"
msgstr ""
"您还可以在此函数中传递几个控制参数，请参阅 :func:`read_shp` 和 :func:`read_labelme_json` 了解更多信息"

#: easyidp.roi.ROI.read_geojson:56 of
msgid ""
"For more details of these parameters, please refer to "
":func:`easyidp.jsonfile.read_geojson`"
msgstr "有关这些参数的更多详细信息，请参阅 :func:`easyidp.jsonfile.read_geojson` "

#: easyidp.roi.ROI.read_labelme_json:3 of
msgid "the path to labelme json file."
msgstr "labelme json文件的路径。"

#: easyidp.roi.ROI.read_shp:5 of
msgid ""
"| by default None, will read automatically from prj file with the same "
"name of shp filename, | or give manually by ``read_shp(..., "
"shp_proj=pyproj.CRS.from_epsg(4326), ...)`` or | ``read_shp(..., "
"shp_proj=r'path/to/{shp_name}.prj', ...)``"
msgstr ""

#: easyidp.roi.ROI.read_shp of
msgid ""
"by default None, will read automatically from prj file with the same name"
" of shp filename,"
msgstr "默认值为None，将自动从与shp文件名相同的prj文件中读取，"

#: easyidp.roi.ROI.read_shp of
msgid ""
"or give manually by ``read_shp(..., shp_proj=pyproj.CRS.from_epsg(4326), "
"...)`` or"
msgstr "或者通过 ``read_shp(..., shp_proj=pyproj.CRS.from_epsg(4326), ...)`` 手动指定，或"

#: easyidp.roi.ROI.read_shp of
msgid "``read_shp(..., shp_proj=r'path/to/{shp_name}.prj', ...)``"
msgstr "``read_shp(..., shp_proj=r'path/to/{shp_name}.prj', ...)``"

#: easyidp.roi.ROI.read_shp:62 of
msgid ""
"For more details of these parameters, please refer to "
":func:`easyidp.shp.read_shp`"
msgstr "有关这些参数的更多详细信息，请参阅 :func:`easyidp.shp.read_shp` "

#: easyidp.roi.ROI.read_shp:64 of
msgid ":obj:`easyidp.shp.read_shp`"
msgstr ""

#: ../../python_api/metashape.rst:3
msgid "• Metashape"
msgstr ""

#: ../../python_api/metashape.rst:11
msgid ""
"A summary of class ``easyidp.metashape.Metashape``, can be simple "
"accessed by ``easyidp.Metashape``"
msgstr ""
"``easyidp.metashape.Metashape`` 类的摘要，可以通过 ``easyidp.Metashape`` 简单访问"

#: ../../python_api/metashape.rst:18:<autosummary>:1
msgid ""
":py:obj:`Metashape <easyidp.metashape.Metashape>`\\ "
"\$\\[project\\_path\\, chunk\\_id\\, ...\\]\$"
msgstr ""

#: ../../python_api/metashape.rst:22
msgid ""
"This module (``easyidp.metashape``) also contains the following standard-"
"alone functions for preocessing Metashape projects directly."
msgstr ""
"此模块（ ``easyidp.metashape`` ）还包含以下独立函数，用于直接处理Metashape项目。"

#: ../../python_api/metashape.rst:27
msgid ""
"The :class:`easyidp.Metashape <easyidp.metashape.Metashape>` class is an "
"advanced wrapper around the following functions, which is generally "
"sufficient for most simple application cases, please don't use the "
"following functions unless you really need them."
msgstr ""
" :class:`easyidp.Metashape <easyidp.metashape.Metashape>` 类是以下函数的高级包装器，通常足以满足大多数简单应用情况，除非您确实需要，否则请不要使用以下函数。"

#: ../../python_api/metashape.rst:34:<autosummary>:1
msgid ""
":py:obj:`read_project_zip <easyidp.metashape.read_project_zip>`\\ "
"\$project\\_folder\\, project\\_name\$"
msgstr ""

#: ../../python_api/metashape.rst:34:<autosummary>:1
msgid ""
":py:obj:`read_chunk_zip <easyidp.metashape.read_chunk_zip>`\\ "
"\$project\\_folder\\, project\\_name\\, ...\$"
msgstr ""

#: ../../python_api/metashape.rst:34:<autosummary>:1
msgid ""
":py:obj:`apply_transform_matrix "
"<easyidp.metashape.apply_transform_matrix>`\\ \\(points\\_xyz\\, "
"matrix\\)"
msgstr ""

#: ../../python_api/metashape.rst:34:<autosummary>:1
msgid "Transforms a point or points in homogeneous coordinates."
msgstr "在齐次坐标中变换一个或多个点。"

#: ../../python_api/pix4d.rst:3
msgid "• Pix4D"
msgstr ""

#: ../../python_api/pix4d.rst:10
msgid ""
"A summary of class ``easyidp.pix4d.Pix4D``, can be simple accessed by "
"``easyidp.Pix4D``"
msgstr ""
"``easyidp.pix4d.Pix4D`` 类的摘要，可以通过 ``easyidp.Pix4D`` 简单访问"

#: ../../python_api/pix4d.rst:17:<autosummary>:1
msgid ""
":py:obj:`Pix4D <easyidp.pix4d.Pix4D>`\\ \\(\\[project\\_path\\, "
"raw\\_img\\_folder\\, ...\\]\\)"
msgstr ""

#: ../../python_api/pix4d.rst:21
msgid ""
"This module (``easyidp.pix4d``) also contains the following standard-"
"alone functions for preocessing Pix4D projects directly."
msgstr ""
"此模块（ ``easyidp.pix4d`` ）还包含以下独立函数，用于直接处理Pix4D项目。"

#: ../../python_api/pix4d.rst:25
msgid ""
"The :class:`easyidp.Pix4D <easyidp.pix4d.Pix4D>` class is an advanced "
"wrapper around the following functions, which is generally sufficient for"
" most simple application cases, please don't use the following functions "
"unless you really need them."
msgstr ""
" :class:`easyidp.Pix4D <easyidp.pix4d.Pix4D>` 类是以下函数的高级包装器，通常足以满足大多数简单应用情况，除非您确实需要，否则请不要使用以下函数。"

#: ../../python_api/pix4d.rst:37:<autosummary>:1
msgid ""
":py:obj:`parse_p4d_project <easyidp.pix4d.parse_p4d_project>`\\ "
"\$project\\_path\\[\\, param\\_folder\\]\$"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
msgid ""
":py:obj:`parse_p4d_param_folder <easyidp.pix4d.parse_p4d_param_folder>`\\"
" \$param\\_path\$"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
msgid ":py:obj:`read_xyz <easyidp.pix4d.read_xyz>`\\ \$xyz\\_path\$"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
msgid ":py:obj:`read_pmat <easyidp.pix4d.read_pmat>`\\ \$pmat\\_path\$"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
msgid ":py:obj:`read_cicp <easyidp.pix4d.read_cicp>`\\ \$cicp\\_path\$"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
msgid ":py:obj:`read_ccp <easyidp.pix4d.read_ccp>`\\ \$ccp\\_path\$"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
msgid ""
":py:obj:`read_campos_geo <easyidp.pix4d.read_campos_geo>`\\ "
"\$campos\\_path\$"
msgstr ""

#: ../../python_api/pix4d.rst:37:<autosummary>:1
msgid ":py:obj:`read_cam_ssk <easyidp.pix4d.read_cam_ssk>`\\ \$ssk\\_path\$"
msgstr ""

#: ../../python_api/pointcloud.rst:3
msgid "Point Cloud"
msgstr "点云"

#: ../../python_api/pointcloud.rst:10
msgid ""
"A summary of class ``easyidp.pointcloud.PointCloud``, can be simple "
"accessed by ``easyidp.PointCloud``"
msgstr ""
"``easyidp.pointcloud.PointCloud`` 类的摘要，可以通过 ``easyidp.PointCloud`` 简单访问"

#: ../../python_api/pointcloud.rst:17:<autosummary>:1
msgid ""
":py:obj:`PointCloud <easyidp.pointcloud.PointCloud>`\\ "
"\$\\[pcd\\_path\\, offset\\]\$"
msgstr ""

#: ../../python_api/pointcloud.rst:21
msgid ""
"This module (``easyidp.pointcloud``) also contains the following "
"standard-alone functions for preocessing PointCloud file (ply, las, laz) "
"directly."
msgstr ""
"此模块（ ``easyidp.pointcloud`` ）还包含以下独立函数，用于直接处理点云文件（ply、las、laz）。"

#: ../../python_api/pointcloud.rst:25
msgid ""
"The :class:`easyidp.PointCloud <easyidp.pointcloud.PointCloud>` class is "
"an advanced wrapper around the following functions, which is generally "
"sufficient for most simple application cases, please don't use the "
"following functions unless you really need to."
msgstr ""
" :class:`easyidp.PointCloud <easyidp.pointcloud.PointCloud>` 类是以下函数的高级包装器，通常足以满足大多数简单应用情况，除非您确实需要，否则请不要使用以下函数。"

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
msgid ":py:obj:`read_las <easyidp.pointcloud.read_las>`\\ \$las\\_path\$"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
msgid ":py:obj:`read_laz <easyidp.pointcloud.read_laz>`\\ \$laz\\_path\$"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
msgid ":py:obj:`read_ply <easyidp.pointcloud.read_ply>`\\ \$ply\\_path\$"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
msgid ""
":py:obj:`write_las <easyidp.pointcloud.write_las>`\\ \\(las\\_path\\, "
"points\\, colors\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
msgid ""
":py:obj:`write_laz <easyidp.pointcloud.write_laz>`\\ \\(laz\\_path\\, "
"points\\, colors\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/pointcloud.rst:36:<autosummary>:1
msgid ""
":py:obj:`write_ply <easyidp.pointcloud.write_ply>`\\ \\(ply\\_path\\, "
"points\\, colors\\[\\, ...\\]\\)"
msgstr ""

#: ../../python_api/reconstruct.rst:3
msgid "reconstruct"
msgstr ""

#: ../../python_api/reconstruct.rst:9
msgid ""
"This is the base module for 3D reconstruction project, all the following "
"classes and functions have already been implemented into the submodule "
":class:`easyidp.Pix4D <easyidp.pix4d.Pix4D>` and "
":class:`easyidp.Metashape <easyidp.metashape.Metashape>`. They are "
"generally sufficient for most application cases, it is not recommended to"
" create the following classes or use the following functions directly "
"unless you really need to."
msgstr ""
"这是3D重建项目的基础模块，以下所有类和函数已在子模块 :class:`easyidp.Pix4D <easyidp.pix4d.Pix4D>` 和 :class:`easyidp.Metashape <easyidp.metashape.Metashape>` 中实现。它们通常足以满足大多数应用情况，不建议直接创建以下类或使用以下函数，除非您确实需要。"

#: ../../python_api/reconstruct.rst:15
msgid "A summary of base class in the module ``easyidp.reconstruct``."
msgstr "模块 ``easyidp.reconstruct`` 中基类的摘要。"

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
msgid ":py:obj:`Recons <easyidp.reconstruct.Recons>`\\ \$\$"
msgstr ""

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
msgid "The base class for reconstruction project."
msgstr "重建项目的基类。"

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
msgid ":py:obj:`Sensor <easyidp.reconstruct.Sensor>`\\ \$\$"
msgstr ""

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
msgid ":py:obj:`Photo <easyidp.reconstruct.Photo>`\\ \$\\[sensor\\]\$"
msgstr ""

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
msgid ""
":py:obj:`Calibration <easyidp.reconstruct.Calibration>`\\ "
"\$\\[sensor\\]\$"
msgstr ""

#: ../../python_api/reconstruct.rst:25:<autosummary>:1
msgid ":py:obj:`ChunkTransform <easyidp.reconstruct.ChunkTransform>`\\ \$\$"
msgstr ""

#: ../../python_api/reconstruct.rst:26
msgid "You can definately access these base class directly by:"
msgstr "您可以直接访问这些基类："

#: ../../python_api/reconstruct.rst:40
msgid "But it is more often used in the Pix4D or Metashape project in this way:"
msgstr "但它更常用于Pix4D或Metashape项目中："

#: ../../python_api/reconstruct.rst:44 ../../python_api/reconstruct.rst:73
msgid "Load the example data:"
msgstr "加载示例数据："

#: ../../python_api/reconstruct.rst:50
msgid "And read the demo pix4d project:"
msgstr "并读取演示Pix4D项目："

#: ../../python_api/reconstruct.rst:59 ../../python_api/reconstruct.rst:85
msgid "Then access the classes:"
msgstr "然后访问这些类："

#: ../../python_api/reconstruct.rst:79
msgid "And read the demo metashape project:"
msgstr "并读取演示Metashape项目："

#: ../../python_api/reconstruct.rst:110:<autosummary>:1
msgid ""
":py:obj:`sort_img_by_distance "
"<easyidp.reconstruct.sort_img_by_distance>`\\ \\(recons\\, "
"img\\_dict\\_all\\, roi\\)"
msgstr ""

#: ../../python_api/reconstruct.rst:110:<autosummary>:1
msgid ""
":py:obj:`save_back2raw_json_and_png "
"<easyidp.reconstruct.save_back2raw_json_and_png>`\\ \$recons\\, ...\$"
msgstr ""

#: ../../python_api/roi.rst:3
msgid "ROI"
msgstr "兴趣区(ROI)"

#: ../../python_api/roi.rst:10
msgid ""
"A summary of class ``easyidp.roi.ROI``, can be simple accessed by "
"``easyidp.ROI``"
msgstr ""
" ``easyidp.roi.ROI`` 类的摘要，可以通过 ``easyidp.ROI`` 简单访问"

#: ../../python_api/roi.rst:14
msgid ":doc:`easyidp.ROI <manualdoc/easyidp.roi.ROI>`"
msgstr ""

#: ../../python_api/roi.rst:28
msgid ""
"The :class:`easyidp.ROI <easyidp.roi.ROI>` class is an advanced wrapper "
"around the following functions, which is generally sufficient for most "
"simple application cases, please don't use the following functions unless"
" you really need to."
msgstr ""
" :class:`easyidp.ROI <easyidp.roi.ROI>` 类是以下函数的高级包装器，通常足以满足大多数简单应用情况，除非您确实需要，否则请不要使用以下函数。"

#: ../../python_api/roi.rst:33:<autosummary>:1
msgid ":py:obj:`read_cc_txt <easyidp.roi.read_cc_txt>`\\ \$txt\\_path\$"
msgstr ""

#: ../../python_api/shp.rst:5
msgid "• shapefile"
msgstr ""

#: ../../python_api/shp.rst:14
msgid ""
"The :mod:`easyidp.ROI <easyidp.roi.ROI>` class is an advanced wrapper "
"around the following functions, which is generally sufficient for most "
"simple application cases, please don't use the following functions unless"
" you really need to."
msgstr ""
" :mod:`easyidp.ROI <easyidp.roi.ROI>` 类是以下函数的高级包装器，通常足以满足大多数简单应用情况，除非您确实需要，否则请不要使用以下函数。"

#: ../../python_api/shp.rst:21:<autosummary>:1
msgid ":py:obj:`read_proj <easyidp.shp.read_proj>`\\ \$prj\\_path\$"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1
msgid ""
":py:obj:`show_shp_fields <easyidp.shp.show_shp_fields>`\\ "
"\$shp\\_path\\[\\, encoding\\]\$"
msgstr ""

#: ../../python_api/shp.rst:21:<autosummary>:1
msgid ""
":py:obj:`read_shp <easyidp.shp.read_shp>`\\ \\(shp\\_path\\[\\, "
"shp\\_proj\\, name\\_field\\, ...\\]\\)"
msgstr ""

#: ../../python_api/visualize.rst:3
msgid "Visualize"
msgstr ""

#: ../../python_api/visualize.rst:7
msgid "The functions for easy result preview and visualization."
msgstr "用于轻松结果预览和可视化的函数。"

#: ../../python_api/visualize.rst:17:<autosummary>:1
msgid ""
":py:obj:`draw_polygon_on_img <easyidp.visualize.draw_polygon_on_img>`\\ "
"\\(img\\_name\\, img\\_path\\, ...\\)"
msgstr ""

#: ../../python_api/visualize.rst:17:<autosummary>:1
msgid ""
":py:obj:`draw_backward_one_roi "
"<easyidp.visualize.draw_backward_one_roi>`\\ \\(proj\\, "
"result\\_dict\\[\\, ...\\]\\)"
msgstr ""